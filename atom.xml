<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-08-02T04:08:44+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 5 クラス]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/20/study-of-perfect-java-chapter-5/"/>
    <updated>2016-07-20T08:40:03+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/20/study-of-perfect-java-chapter-5</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>オブジェクトの生成</h2>

<p>Javaのオブジェクト生成方法は以下の5つ</p>

<table>
<thead>
<tr>
<th> procedure   </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>new</code> 式 </td>
<td> 基本的な生成手段 </td>
</tr>
<tr>
<td> <code>String</code> リテラル及び結合演算式 </td>
<td> 文字列固有の手段 </td>
</tr>
<tr>
<td> オートボクシング </td>
<td> 数値クラス固有の手段 </td>
</tr>
<tr>
<td> リフレクション </td>
<td> フレームワークなどが下位に隠蔽すべき手段 </td>
</tr>
<tr>
<td> <code>clone</code> メソッド</td>
<td> <code>Object</code> クラスに実装された手段 </td>
</tr>
</tbody>
</table>


<h2>ファクトリパターン</h2>

<p><code>new</code> 式をファクトリメソッドに隠蔽することでオブジェクトの生成をコンストラクタから分離する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// コンストラクタへのアクセスを制限</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Sample</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ファクトリメソッド</span>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Sample</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Sample</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Sample</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sample</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>オブジェクトプーリング

<ul>
<li>オブジェクトの生成にコストがかかる場合、キャッシュされた生成済みオブジェクトを使う</li>
</ul>
</li>
<li>シングルトンパターン

<ul>
<li>オブジェクトの数を1つに制限する</li>
</ul>
</li>
</ul>


<h2>クラス宣言</h2>

<p>新しいクラスを定義するには次のように予約語 <code>class</code> を使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">修飾子</span><span class="o">]</span> <span class="kd">class</span> <span class="nc">クラス名</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">メンバ宣言</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">フィールド宣言</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">メソッド宣言</span>
</span><span class='line'>      <span class="o">-</span> <span class="n">ネストしたクラス宣言及びネストしたインターフェース宣言</span>
</span><span class='line'>    <span class="n">コンストラクタ宣言</span>
</span><span class='line'>    <span class="n">初期化ブロック</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クラスの修飾子</h3>

<ul>
<li>クラス宣言時に指定できる修飾子は以下の5つ</li>
<li>複数同時指定可能（ただし <code>final</code> と <code>abstract</code> を同時に指定するとコンパイルエラー）</li>
</ul>


<table>
<thead>
<tr>
<th> modifier </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>public</code> </td>
<td> グローバルにアクセス可（書かないとパッケージ内に限定） </td>
</tr>
<tr>
<td> <code>final</code> </td>
<td> 継承禁止 </td>
</tr>
<tr>
<td> <code>abstract</code> </td>
<td> 抽象クラス </td>
</tr>
<tr>
<td> <code>strictfp</code> </td>
<td> クラス内に記述した浮動小数点遠山を厳密に評価 </td>
</tr>
<tr>
<td> アノテーション </td>
<td> 省略 </td>
</tr>
</tbody>
</table>


<h2>フィールド</h2>

<h3>フィールド宣言の修飾子</h3>

<table>
<thead>
<tr>
<th> modifier </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>public</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>protected</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>private</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>final</code> </td>
<td> フィールド変数への再代入禁止 </td>
</tr>
<tr>
<td> <code>static</code> </td>
<td> クラスフィールド </td>
</tr>
<tr>
<td> <code>transient</code> </td>
<td> シリアライズの対象外 </td>
</tr>
<tr>
<td> <code>volatile</code> </td>
<td> スレッド間で変数の値を同期 </td>
</tr>
</tbody>
</table>


<ul>
<li><code>public</code> 、 <code>protected</code> 、 <code>private</code> は同時に指定不可</li>
<li><code>final</code> 、 <code>volatile</code> は同時に指定不可</li>
</ul>


<h3>フィールド変数のスコープ</h3>

<ul>
<li>宣言の位置にかかわらず同一クラス内のすべてのコンストラクタとメソッドから使える</li>
<li>コンストラクタ内、メソッド内以外の場所では宣言した行以降がスコープとなる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// コンパイルエラー</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// コンパイルエラー</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// フィールド宣言</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;sample&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>this参照</h3>

<ul>
<li><code>this</code> 参照は明示的な宣言なしに使える、該当クラスのオブジェクトを参照する参照型変数</li>
<li>クラス内での変数名はフィールド変数よりローカル変数、パラメータ変数が優先される</li>
<li>これらの場合にフィールド変数を使う場合は <code>this</code> 参照を明示する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;sample&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">method</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">s</span><span class="o">;</span> <span class="c1">// パラメータ変数</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">s</span><span class="o">;</span> <span class="c1">// フィールド変数</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">method2</span> <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;test 2&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">s</span><span class="o">;</span> <span class="c1">// ローカル変数</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">s</span><span class="o">;</span> <span class="c1">// フィールド変数</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>メソッド</h2>

<h3>メソッド宣言の修飾子</h3>

<table>
<thead>
<tr>
<th> modifier </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>public</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>protected</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>private</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>abstract</code> </td>
<td> 抽象メソッド </td>
</tr>
<tr>
<td> <code>final</code> </td>
<td> オーバーライド不可 </td>
</tr>
<tr>
<td> <code>static</code> </td>
<td> クラスメソッド </td>
</tr>
<tr>
<td> <code>synchronized</code> </td>
<td> 同期のためのロック獲得 </td>
</tr>
<tr>
<td> <code>native</code> </td>
<td> ネイティヴメソッド </td>
</tr>
<tr>
<td> <code>strictfp</code> </td>
<td> 浮動小数点演算を厳密に評価 </td>
</tr>
</tbody>
</table>


<ul>
<li><code>public</code> 、 <code>protected</code> 、 <code>private</code> は同時に指定不可</li>
<li><code>abstract</code> は <code>static</code> 、 <code>final</code> 、 <code>synchronized</code> 、 <code>native</code> 、 <code>strictfp</code> と同時に指定不可</li>
</ul>


<h3>同一クラス内でのメソッドのスコープ</h3>

<ul>
<li>クラス内でメソッド宣言より前で有効</li>
<li>クラス内で <code>this</code> 参照を使った呼び出しも可能</li>
</ul>


<h3>他のクラスからのメソッド呼び出し</h3>

<ul>
<li>アクセス制御が許せば可能</li>
<li>オブジェクト参照に <code>.</code> メソッドアクセス修飾子を適用する</li>
</ul>


<h3>引数</h3>

<ul>
<li>メソッド定義のパラメータ変数を <em>仮引数</em></li>
<li>メソッド呼び出し時に渡すパラメータを <em>実引数</em></li>
<li>メソッドが呼ばれると仮引数に実引数が代入される（call by value）</li>
</ul>


<h4>可変長引数</h4>

<ul>
<li>メソッド宣言の引数定義でパラメータ変数の型に <code>...</code> を書く</li>
<li>任意の数の実引数で呼び出すことができる</li>
<li>このような引数を可変長引数という</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">exec</span> <span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Sample</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Sample</span><span class="o">();</span>
</span><span class='line'><span class="n">sample</span><span class="o">.</span><span class="na">exec</span><span class="o">();</span>
</span><span class='line'><span class="n">sample</span><span class="o">.</span><span class="na">exec</span><span class="o">(</span><span class="s">&quot;hoge&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">sample</span><span class="o">.</span><span class="na">exec</span><span class="o">(</span><span class="s">&quot;hoge&quot;</span><span class="o">,</span> <span class="s">&quot;fuga&quot;</span><span class="o">,</span> <span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>内部的には配列として引数が渡る</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 上記クラス定義と等価</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">exec</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">messages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>返り値</h3>

<ul>
<li><code>return</code> 文を使う</li>
<li><code>return</code> はどこにいくつ書いても良い</li>
<li><code>return</code> の後に実行されるような文を書くとコンパイルエラー</li>
<li><code>void</code> メソッドに <code>return</code> を書くとコンパイルエラー</li>
<li><code>return</code> が返す値が返り値の型に代入できないとコンパイルエラー</li>
</ul>


<h3>メソッド実行の終わり方</h3>

<ul>
<li><code>return</code> 文で抜ける</li>
<li><code>void</code> 型のメソッドを最後まで実行して抜ける</li>
<li>例外を投げて抜ける</li>
</ul>


<h3>メソッドのオーバーロード</h3>

<ul>
<li>同じ引数の並びで同名のメソッドの宣言はコンパイルエラー</li>
<li>引数の型が変わると同名でもコンパイル可能</li>
<li>これをメソッドのオーバーロードと呼ぶ</li>
</ul>


<h3>メソッドのシグネチャ</h3>

<ul>
<li>クラスの中でメソッドを一意に特定する情報をシグネチャと呼ぶ</li>
<li>メソッドのシグネチャは以下の2つ

<ul>
<li>メソッド名</li>
<li>引数の型の並び</li>
</ul>
</li>
</ul>


<h3>再帰呼び出し</h3>

<ul>
<li>メソッドが自分自身のメソッドを呼ぶこと</li>
<li>停止条件が必要</li>
</ul>


<h2>コンストラクタ</h2>

<h3>コンストラクタの宣言</h3>

<ul>
<li>オブジェクト生成時に呼ばれる</li>
<li>コンストラクタ名はクラス名と一致する</li>
<li>修飾子に書けるのは以下の3つ

<ul>
<li><code>public</code></li>
<li><code>protected</code></li>
<li><code>private</code></li>
</ul>
</li>
<li>コンストラクタはクラス名と同名のメソッドに見えるが言語仕様上は別物</li>
<li>コンストラクタ内に <code>return</code> 文を書くとコンパイルエラー</li>
<li>オブジェクトの初期化処理はコンストラクタにまとめるべき</li>
</ul>


<h3>this呼び出しとsuper呼び出し</h3>

<ul>
<li><code>this</code> 呼び出しでコンストラクタの共通化ができる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// フィールド宣言を省略</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Sample</span> <span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">label</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">label</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span> <span class="c1">// 下のコンストラクタ呼び出し</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Sample</span> <span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">label</span><span class="o">,</span> <span class="kt">int</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">label</span> <span class="o">=</span> <span class="n">label</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">level</span> <span class="o">=</span> <span class="n">level</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>継承したクラスから継承元のコンストラクタを <code>super</code> で呼び出す</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">SubSample</span> <span class="kd">extends</span> <span class="n">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SubSample</span> <span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">String</span> <span class="n">label</span><span class="o">,</span> <span class="kt">int</span> <span class="n">level</span><span class="o">,</span> <span class="n">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">label</span><span class="o">,</span> <span class="n">level</span><span class="o">);</span> <span class="c1">// Sample クラスのコンストラクタ呼び出し</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>デフォルトコンストラクタ</h3>

<ul>
<li>コンストラクタ宣言が書かれないクラスにはデフォルトコンストラクタが自動生成される</li>
<li>デフォルトコンストラクタの引数はなし、中身が空</li>
</ul>


<h3>オブジェクト初期化の順序</h3>

<ol>
<li>フィールド変数にデフォルト値代入</li>
<li>フィールド変数宣言時の初期化、初期化ブロックを上から順に実行</li>
<li>コンストラクタ呼び出し</li>
</ol>


<h2>staticメンバ</h2>

<ul>
<li><code>static</code> 修飾子がついたフィールド変数やメソッド</li>
<li>クラスメンバという</li>
<li><code>static</code> がつかないフィールド変数、メソッドはインスタンスメンバ</li>
<li>クラスメンバは実体がクラスにしかなく、オブジェクトはコピーを持たない</li>
<li>インスタンスフィールドとクラスフィールドは同じ名前空間（同名はつけられない）</li>
</ul>


<h2>継承</h2>

<ul>
<li>継承には実装の継承と振る舞いの継承の2つがある</li>
<li>振る舞いの継承は後出の「インターフェース」</li>
<li>実装の継承としての拡張継承は、あらかじめ意図して設計されたクラスからのみ行うべき</li>
</ul>


<h3>拡張継承の構文</h3>

<ul>
<li>クラス宣言時に <code>extends</code> を使って継承する</li>
<li><code>extends</code> のないクラス宣言は暗黙に <code>java.lang.Object</code> を継承する</li>
<li>Java のすべてのクラスは必ず <code>java.lang.Object</code> を直接的または間接的に継承する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="n">修飾子</span><span class="o">]</span> <span class="kd">class</span> <span class="nc">クラス名</span> <span class="kd">extends</span> <span class="n">基底クラス名</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">クラス本体</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>継承したクラスで継承元と同名のフィールド変数を宣言すると継承元のフィールド変数を隠蔽する</li>
<li>継承元にあるメソッドと同じシグネチャのメソッドを定義するとメソッドをオーバーライドする</li>
<li>メソッドをオーバーライドする条件

<ul>
<li>同じメソッド名</li>
<li>引数の数と型がすべて一致</li>
<li>返り値の型が一致、もしくは継承型</li>
<li><code>throws</code> 説の例外型が一致もしくは継承した例外型</li>
<li>アクセス制御が一致もしくはより緩い</li>
</ul>
</li>
</ul>


<h3>@Overrideアノテーション</h3>

<ul>
<li><code>@Override</code> というアノテーションをつけるとオーバーライドのミスに気づける</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Class</span> <span class="n">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">exec</span> <span class="o">(</span><span class="n">CharSequence</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;sample:exec&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Class</span> <span class="n">SubSample</span> <span class="kd">extends</span> <span class="n">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">exec</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;subSample:exec&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>super参照</h3>

<ul>
<li>オーバーライドされた元メソッドに <code>private</code> 修飾子がついていなければオーバーライドしたメソッド内から <code>super</code> 参照を通じて元のメソッドを呼び出すことができる</li>
<li>隠蔽されたフィールド変数も同様</li>
</ul>


<h3>finalクラス</h3>

<ul>
<li><code>final</code> 修飾子がついたクラスを final クラスと呼ぶ</li>
<li>final クラスを継承元にして <code>extends</code> で拡張しようとするとコンパイルエラー</li>
</ul>


<h2>抽象クラスと抽象メソッド</h2>

<ul>
<li>抽象クラスはインスタンス化できないクラス</li>
<li><code>abstract</code> 修飾子をつけてクラス宣言すると抽象クラスになる</li>
<li>抽象クラスは何らかの具象クラスの基底クラスとなる（雛形の役割を担う）</li>
<li>メソッド修飾子として <code>abstract</code> をつけると抽象メソッドとなる</li>
<li>抽象メソッドはメソッド本体をもたない（オーバーライド前提）</li>
<li>抽象メソッドを一つでももつとそのクラスは抽象クラス</li>
</ul>


<h2>ネストしたクラス</h2>

<ul>
<li>あるクラスの下請けを担うクラスをヘルパークラスという</li>
<li>クラス内にクラスを宣言できる</li>
<li>ネストしたクラスをメンバクラスと呼ぶ</li>
<li>外側のクラスをエンクロージングクラスと呼ぶ</li>
</ul>


<h3>staticなネストしたクラス</h3>

<ul>
<li><code>static</code> 修飾子がついたネストしたクラス</li>
<li><code>private</code> 修飾子が指定されるとエンクロージングクラスの外から見えなくなる</li>
<li>エンクロージングクラスの <code>private</code> フィールドや <code>private</code> メソッドにアクセスできる</li>
<li>エンクロージングクラスもネストしたクラスの <code>private</code> フィールドや <code>private</code> メソッドにアクセスできる</li>
</ul>


<h3>内部クラス</h3>

<ul>
<li>非 <code>static</code> なネストしたクラスを内部クラスと呼ぶ</li>
<li>内部クラスのオブジェクトはエンクロージングオブジェクトへの参照を暗黙的にもつ</li>
<li>エンクロージングクラスのクラスメソッド内では内部クラスのオブジェクト生成ができない</li>
</ul>


<h3>ローカル内部クラス</h3>

<ul>
<li>ローカル内部クラスはメソッド内、コンストラクタ内、初期化ブロック内、 <code>if</code> 節などのブロック内で定義するクラス</li>
<li>ローカル内部クラスはブロックの外からはアクセスできない</li>
<li>クラスの実装をブロック内に隠蔽するときに使う</li>
</ul>


<h3>匿名クラス</h3>

<ul>
<li>匿名クラスにはクラス名がない</li>
<li>オブジェクト生成は以下の構文で行う</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">基底型</span><span class="o">(</span><span class="n">実引数</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">メソッド宣言とフィールド宣言の差分実装</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>匿名クラスにはクラス名がないため、基底型名を <code>new</code> 演算子に渡し、基底型との差分実装を書き足す</li>
<li>匿名クラスを使う利点

<ul>
<li>コンストラクタが不要</li>
<li>オブジェクト作成が1つだけ</li>
</ul>
</li>
</ul>


<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 4 変数とオブジェクト]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/18/study-of-perfect-java-chapter-4/"/>
    <updated>2016-07-18T20:13:40+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/18/study-of-perfect-java-chapter-4</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>変数とオブジェクト</h2>

<ul>
<li>Javaの変数は以下の二つに分類される

<ul>
<li>基本型変数</li>
<li>参照型変数</li>
</ul>
</li>
<li>オブジェクトはある体系にそってデータを表すモノであり、名前を持たない</li>
</ul>


<h2>変数</h2>

<h3>参照型変数</h3>

<ul>
<li>C言語のポインタ型変数の値がメモリ上のアドレス値そのものであるのに対し、Javaの参照型変数の値はオブジェクトの位置情報を指し示す抽象的な「何か」である</li>
<li>参照型変数は名前を持ち、オブジェクトを参照することで扱いやすく橋渡しする</li>
<li>参照型変数自体に型があり以下の3種類、これは参照しているオブジェクトの型とは別

<ul>
<li>クラス型</li>
<li>配列型</li>
<li>インターフェース型</li>
</ul>
</li>
</ul>


<h3>基本型変数</h3>

<ul>
<li>基本型変数は値をそのまま保持する</li>
<li>基本型の種類は以下の8つ

<ul>
<li><code>boolean</code></li>
<li><code>byte</code></li>
<li><code>char</code></li>
<li><code>short</code></li>
<li><code>int</code></li>
<li><code>long</code></li>
<li><code>float</code></li>
<li><code>double</code></li>
</ul>
</li>
</ul>


<h3>変数の宣言</h3>

<ul>
<li>変数を使うには最初に変数を宣言する</li>
<li>変数宣言は最初に変数の型を書き、続けて変数名を書く</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>基本型変数の宣言時も型名を変数名の前に書く</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>同じスコープで同名の変数は宣言できない</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">method</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="c1">// コンパイルエラー</span>
</span></code></pre></td></tr></table></div></figure>


<h3>変数の初期化</h3>

<ul>
<li>変数は宣言時に初期化できる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初期化しない場合の変数のデフォルト値は変数の型と種類に依存する</li>
</ul>


<h3>変数の修飾子</h3>

<ul>
<li>変数の宣言時に修飾子を付けることができる</li>
<li>変数に使える修飾子は以下

<ul>
<li><code>private</code></li>
<li><code>protected</code></li>
<li><code>public</code></li>
<li><code>transient</code></li>
<li><code>final</code></li>
<li><code>static</code></li>
<li><code>volatile</code></li>
</ul>
</li>
</ul>


<h2>オブジェクト</h2>

<h3>オブジェクトの生成</h3>

<ul>
<li><code>new</code> の後にクラス名を書き、 <code>()</code> で引数を指定する</li>
<li>引数の定義はクラスごとに決まっている</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="s">&quot;012&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参照型変数への代入</h3>

<ul>
<li>生成したオブジェクトは参照型変数へ参照を渡して扱う</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>あくまで変数が扱っているのはオブジェクトへの参照なので、以下の例では2つの変数は同じオブジェクトへの参照を持つ</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'><span class="n">StringBuilder</span> <span class="n">sb2</span> <span class="o">=</span> <span class="n">sb</span><span class="o">;</span>
</span><span class='line'><span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;012&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">sb2</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;345&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">// sb: &quot;0123445&quot;</span>
</span><span class='line'><span class="c1">// sb2: &quot;012345&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>基本型変数への代入</h3>

<ul>
<li>基本型変数へ代入されるのはオブジェクトの参照ではなく値そのもの</li>
<li>値そのものをコピーして代入する</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">K</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'><span class="c1">// i: 42</span>
</span><span class='line'><span class="c1">// j: 43</span>
</span><span class='line'><span class="c1">// k: 42</span>
</span></code></pre></td></tr></table></div></figure>


<h3>null参照</h3>

<ul>
<li><code>null</code> は「何も参照していない」ということを表す</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>nullチェック</h4>

<ul>
<li>参照先がなく、 <code>null</code> を持つ参照型変数にたいする演算は <code>NullPointerException</code></li>
<li><code>Object</code> クラスに <code>null</code> をチェックするためのメソッドがある</li>
</ul>


<table>
<thead>
<tr>
<th> method </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>equals</code> </td>
<td> 引数のどちらかが <code>null</code> でも使える比較 </td>
</tr>
<tr>
<td> <code>toString</code> </td>
<td> <code>null</code> の場合の文字列を指定可能 </td>
</tr>
<tr>
<td> <code>isNull</code> </td>
<td> 引数が <code>null</code> のとき真 </td>
</tr>
<tr>
<td> <code>notNull</code> </td>
<td> 引数が <code>null</code> でないとき真 </td>
</tr>
<tr>
<td> <code>requireNonNull</code> </td>
<td> 引数が <code>null</code> だと即座に <code>NullPointerException</code> </td>
</tr>
</tbody>
</table>


<h3>Optional型</h3>

<ul>
<li><code>Optional</code> 型は任意のオブジェクトをくるんで <code>null</code> かもしれない状態を表現する</li>
<li>基本型変数のための <code>Optional</code> 型として以下の 3 つがある

<ul>
<li><code>OptionalInt</code></li>
<li><code>OptionalLong</code></li>
<li><code>OptionalDouble</code></li>
</ul>
</li>
<li><code>Optional</code> オブジェクトは <code>of</code> または <code>ofNullable</code> メソッドを使って任意のオブジェクトから生成できる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span><span class="o">;</span>
</span><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">StringBuilder</span><span class="o">&gt;</span> <span class="n">osb</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="c1">// Oprional&lt;StringBuilder&gt; osb = Optional.ofNullable(sb);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>get</code> メソッドで <code>Optional</code> オブジェクトでくるんだオブジェクトを取得</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Optional</span><span class="o">&lt;</span><span class="n">StringBuilder</span><span class="o">&gt;</span> <span class="n">osb</span><span class="o">;</span>
</span><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="n">osb</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>くるんだオブジェクトが <code>null</code> でなければそのまま呼び出し、 <code>null</code> であれば引数のオブジェクトを返す例</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="n">osb</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="s">&quot;none&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>変数を介さないオブジェクトの操作</h3>

<ul>
<li>変数に参照を格納しなくてもオブジェクトを操作できる</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">(</span><span class="s">&quot;012&quot;</span><span class="o">).</span><span class="na">length</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>文字列リテラルでも</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ドット演算子でメソッド呼び出しをつなげることをメソッドチェインという</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">();</span>
</span><span class='line'><span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;012&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;345&quot;</span><span class="o">).</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'><span class="c1">// len: 6</span>
</span></code></pre></td></tr></table></div></figure>


<h2>変数と型</h2>

<ul>
<li>オブジェクトの型はクラスで定義されている</li>
<li>変数の型とオブジェクトの型が一致もしくはオブジェクトの型が変数の型の下位型であるとき変数にオブジェクトの参照を代入可能</li>
<li>変数が参照するオブジェクトに対して行える操作は変数の型できまる</li>
<li>下位型のオブジェクトは上位型の持つメソッドを持つことが保証されている

<ul>
<li>ただし実態が同一とは限らない</li>
</ul>
</li>
</ul>


<h2>変数の詳細</h2>

<h3>変数の種類</h3>

<table>
<thead>
<tr>
<th> type </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> ローカル変数 </td>
<td> メソッドもしくはコンストラクタ内で宣言される。メソッドやコンストラクタが終わると消滅。 </td>
</tr>
<tr>
<td> パラメータ変数 </td>
<td> メソッドもしくはコンストラクタに引数として渡る。メソッドやコンストラクタが終わると消滅。 </td>
</tr>
<tr>
<td> インスタンスフィールド変数 </td>
<td> クラスの構成要素 </td>
</tr>
<tr>
<td> クラスフィールド変数 </td>
<td> クラスの構成要素 </td>
</tr>
</tbody>
</table>


<h3>変数のデフォルト値</h3>

<table>
<thead>
<tr>
<th> type </th>
<th> default value </th>
</tr>
</thead>
<tbody>
<tr>
<td> 参照型 </td>
<td> <code>null</code>      </td>
</tr>
<tr>
<td> <code>boolean</code> </td>
<td> <code>false</code>  </td>
</tr>
<tr>
<td> <code>char</code> </td>
<td> &ldquo;¥u0000&rdquo;    </td>
</tr>
<tr>
<td> <code>byte</code>, <code>short</code>, <code>int</code>, <code>Long</code> </td>
<td> 0 </td>
</tr>
<tr>
<td> <code>float</code>, <code>double</code> </td>
<td> +0.0 </td>
</tr>
</tbody>
</table>


<h3>変数のスコープ</h3>

<h4>ローカル変数</h4>

<ul>
<li>変数を宣言した行からメソッドもしくはコンストラクタが終わるまで</li>
</ul>


<h4>ブロックスコープ</h4>

<ul>
<li><code>{}</code> で囲ったブロックに閉じたスコープ</li>
<li>変数を宣言した行からブロックが終わるまで</li>
</ul>


<h4>シャドーイング</h4>

<ul>
<li>同一のスコープ内で同じ変数を2度以上宣言</li>
</ul>


<h4>パラメータ変数のスコープ</h4>

<ul>
<li>メソッド及びコンストラクタの中</li>
</ul>


<h4>フィールド変数のスコープ</h4>

<ul>
<li>フィールド変数のスコープはクラス内</li>
<li>宣言した行の位置は無関係</li>
</ul>


<h2>オブジェクトの寿命</h2>

<p>オブジェクトへの参照が外れる条件
* ローカル変数及びパラメータ変数のスコープが外れたとき
* オブジェクトが消滅したとき
* クラスが消滅し、クラスフィールド変数の参照が外れたとき
* 変数に別のオブジェクトの参照もしくは <code>null</code> が再代入されたとき
* 変数を介さない操作がされていた場合、式の評価が終わったとき</p>

<h2>final変数と不変オブジェクト</h2>

<ul>
<li><code>final</code> 修飾子を指定した変数を final 変数と呼ぶ</li>
<li>final 変数は再代入不可</li>
<li><code>final</code> 修飾子が禁止するのは変数自体の値の変更であって、変数が参照するオブジェクト自体の変更ではない</li>
</ul>


<h2>参照</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 3 数値①]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/17/study-of-perfect-java-chapter-3/"/>
    <updated>2016-07-17T17:36:05+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/17/study-of-perfect-java-chapter-3</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>整数型</h2>

<p>以下の5種類</p>

<table>
<thead>
<tr>
<th> name   </th>
<th> bit length </th>
<th>  min  </th>
<th>  max  </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>byte</code>  </td>
<td> 8         </td>
<td> -128  </td>
<td>  127  </td>
</tr>
<tr>
<td> <code>char</code>  </td>
<td> 16        </td>
<td> 0     </td>
<td> 65535 </td>
</tr>
<tr>
<td> <code>short</code> </td>
<td> 16        </td>
<td> -32768 </td>
<td> 32767 </td>
</tr>
<tr>
<td> <code>int</code>   </td>
<td> 32        </td>
<td> -2147483648 </td>
<td> 2147483647 </td>
</tr>
<tr>
<td> <code>long</code>  </td>
<td> 64        </td>
<td> -9223372036854775808 </td>
<td> 9223372036854775807 </td>
</tr>
</tbody>
</table>


<h3>bit値</h3>

<p>符号あり整数で最上位ビットが1の値は負の値となる</p>

<h4>4bit長の符号なし整数</h4>

<table>
<thead>
<tr>
<th> type </th>
<th> value </th>
<th> bit </th>
</tr>
</thead>
<tbody>
<tr>
<td> min  </td>
<td> 0     </td>
<td> 0000 </td>
</tr>
<tr>
<td> max  </td>
<td> 15    </td>
<td> 1111 </td>
</tr>
</tbody>
</table>


<h4>4bit長の符号あり整数</h4>

<table>
<thead>
<tr>
<th> type      </th>
<th> value </th>
<th> bit </th>
</tr>
</thead>
<tbody>
<tr>
<td> min bit   </td>
<td> 0     </td>
<td> 0000 </td>
</tr>
<tr>
<td> max value </td>
<td> 7     </td>
<td> 0111 </td>
</tr>
<tr>
<td> min value </td>
<td> -8    </td>
<td> 1000 </td>
</tr>
<tr>
<td> max bit   </td>
<td> -1    </td>
<td> 1111 </td>
</tr>
</tbody>
</table>


<h2>桁あふれ</h2>

<p>整数の加算はbit値を進める処理であり、</p>

<p>整数の減算はbit値を戻す処理である</p>

<p>したがってbitの境界値をまたいで整数の加算減算を行うと予期しない結果となる場合がある</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Interger</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'><span class="c1">// i: 2147483647</span>
</span><span class='line'>
</span><span class='line'><span class="n">i</span><span class="o">++</span>
</span><span class='line'><span class="c1">// i: -2147483648</span>
</span></code></pre></td></tr></table></div></figure>


<h2>整数リテラル</h2>

<ul>
<li><code>L</code> または <code>l</code> で終わる整数リテラルの型は <code>long</code> 型</li>
<li>それ以外の整数リテラルは <code>int</code> 型</li>
<li><code>int</code> 型リテラル値を <code>byte</code> 、 <code>char</code> 、 <code>short</code> の型の変数に代入する場合、値が代入する先の型の範囲内であれば自動的に型が変換されて代入される

<ul>
<li>代入する先の型の範囲を超えている場合はコンパイルエラーとなる</li>
</ul>
</li>
</ul>


<h3>基数</h3>

<ul>
<li><code>0b</code> から始めると 2 進数</li>
<li><code>0</code> から始めると 8 進数</li>
<li><code>0x</code> から始めると 16 進数</li>
</ul>


<h2>整数の演算</h2>

<h3>四則演算</h3>

<table>
<thead>
<tr>
<th> 演算子 </th>
<th> 演算 </th>
</tr>
</thead>
<tbody>
<tr>
<td> +     </td>
<td> 和   </td>
</tr>
<tr>
<td> -     </td>
<td> 差   </td>
</tr>
<tr>
<td> *     </td>
<td> 積   </td>
</tr>
<tr>
<td> /     </td>
<td> 商   </td>
</tr>
</tbody>
</table>


<h4>注意点</h4>

<ul>
<li>大きな正の整数の和における桁あふれ</li>
<li>小さな負の整数の差における桁あふれ</li>
<li>絶対値の大きな整数同士の積の桁あふれ</li>
<li>商の結果は切り捨て</li>
<li>0 による割り算は <code>ArithmeticException</code></li>
</ul>


<h3>剰余</h3>

<ul>
<li>剰余演算子は <code>%</code></li>
<li>0 による剰余演算は <code>ArithmeticException</code></li>
</ul>


<h3>符号反転</h3>

<p>単項演算子 <code>-</code> は通常単純に符号を反転させる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class='line'><span class="c1">// -n: -10</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかしここにも桁あふれの問題があるので注意</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="o">-</span><span class="mi">2147483648</span><span class="o">;</span>
</span><span class='line'><span class="c1">// -n: -2147483648</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.15.4">仕様書</a>によると</p>

<blockquote><p>-x equals (~x)+1</p></blockquote>

<ul>
<li><code>~</code> は bit 反転演算子</li>
<li>-2147483648 は bit に変換すると 100&hellip;0（0 が 31 個つづく）</li>
<li>これを反転させると 011&hellip;1（1 が 31 個つづく）となり、これは 2147483647 を表す</li>
<li>2147483647 + 1 は桁あふれが起こり、 -2147483648 となる</li>
</ul>


<h3>インクリメント・デクリメント</h3>

<ul>
<li><code>++</code> でインクリメント</li>
<li><code>--</code> でデクリメント</li>
</ul>


<h2>キャスト</h2>

<p><code>()</code> 付きで型を書くことで強制的に型変換する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="kt">short</span> <span class="n">si</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span><span class="n">i</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>代入先の型に収まらないとあふれたbitが切り捨てられる</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">short</span> <span class="n">si</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)</span><span class="mi">65536</span><span class="o">;</span>
</span><span class='line'><span class="c1">// si: 0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>65536 は bit に変換すると 100&hellip;0 （0 が 16 個つづく）</li>
<li><code>short</code> 型は 16 bit なので先頭の 1 があふれる</li>
</ul>


<h2>ブーリアン（真偽値）</h2>

<p>ブーリアン型が取りうる値は <code>true</code> か <code>false</code> のみ</p>

<p>※ ド・モルガンの法則の説明等</p>

<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></li>
<li><a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.15.4">15.15.4. Unary Minus Operator -</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 2 文字と文字列]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/12/study-of-perfect-java-chapter-2/"/>
    <updated>2016-07-12T16:17:33+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/12/study-of-perfect-java-chapter-2</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>文字列</h2>

<p>&ldquo;（ダブルクォート）で囲んで文字数リテラル</p>

<h3>String クラス</h3>

<ul>
<li>文字列リテラルから <code>String</code> オブジェクトが自動生成</li>
<li>配列のように1文字ごとにindexが振られる</li>
</ul>


<h3>StringBuilder クラス</h3>

<ul>
<li>オブジェクトに対して破壊的</li>
<li><code>String</code> オブジェクトは read only</li>
</ul>


<h3>文字列の結合</h3>

<ul>
<li><code>+=</code> と <code>StringBuilder</code> の関係</li>
<li><code>join</code> メソッド</li>
</ul>


<h3>文字列の比較</h3>

<ul>
<li><code>==</code> 演算子じゃなくて <code>equals</code> メソッド

<ul>
<li><code>==</code> 比較は同一のオブジェクトへの参照かどうかの比較</li>
</ul>
</li>
<li>同じ文字列リテラルは同じ <code>String</code> オブジェクト</li>
<li>ただし <code>String</code> と <code>StringBuilder</code> では文字列の内容が同じでも違うオブジェクト

<ul>
<li>そんなときは <code>contentEquals</code> メソッド</li>
</ul>
</li>
<li><code>StringBuilder</code> 同士の文字列の内容比較もできないので、 <code>toString</code> で <code>String</code> に変換してから <code>contentEquals</code> 使うこと</li>
</ul>


<h3>文字列と数値の変換</h3>

<h4>数値から文字列への変換</h4>

<p><code>valueOf</code> メソッド</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="mi">255</span><span class="o">);</span>
</span><span class='line'><span class="c1">// s: &quot;255&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>toString</code> メソッドで10進数以外に直接変換する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="mi">255</span><span class="o">,</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'><span class="c1">// s: &quot;ff&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>文字列から数値への変換</h3>

<p><code>parseInt</code> メソッド</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="s">&quot;255&quot;</span><span class="o">);</span>
</span><span class='line'><span class="c1">// i: 255</span>
</span></code></pre></td></tr></table></div></figure>


<p>基数を与えて10進数以外の処理</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseint</span><span class="o">(</span><span class="s">&quot;ff&quot;</span><span class="o">,</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'><span class="c1">// i: 255</span>
</span></code></pre></td></tr></table></div></figure>


<h2>文字</h2>

<ul>
<li>&lsquo;（シングルクォート）で囲んで文字リテラル</li>
<li>Javaの世界ではUTF-16

<ul>
<li>文字を16bitの数値で表す <code>char</code> 型</li>
</ul>
</li>
<li>文字リテラルは <code>char</code> 型の数値</li>
<li><code>String</code> オブジェクトは文字（ <code>char</code> 型）の配列</li>
</ul>


<h2>バイト</h2>

<ul>
<li>歴史的に文字とバイトは同一視されがち</li>
<li>Javaではバイトを文字と区別する</li>
<li>8bit長の <code>byte</code> 型</li>
<li>バイト列は <code>byte</code> 型の配列</li>
</ul>


<h3>バイト列と文字列の変換</h3>

<h4>バイト列から文字列への変換</h4>

<p><code>byte</code> の配列を渡して <code>String</code> オブジェクトを生成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[]{</span><span class="mh">0x61</span><span class="o">,</span> <span class="mh">0x62</span><span class="o">,</span> <span class="mh">0x63</span><span class="o">};</span>
</span><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'><span class="c1">// s: abc</span>
</span></code></pre></td></tr></table></div></figure>


<h4>文字列からバイト列への変換</h4>

<p><code>getBytes</code> メソッドを使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioからGAE for Javaアプリケーションをdeployするのに必要なFacet]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/07/facets-necessary-in-order-to-deploy-from-android-studio-to-gae/"/>
    <updated>2016-07-07T08:27:00+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/07/facets-necessary-in-order-to-deploy-from-android-studio-to-gae</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/okitsutakatomo/items/18cdd3db35185a9b1e99">こちらの記事</a>を参考にGAE for JavaアプリケーションをAndroid Studio + Gradleでセットアップし、サンプルアプリケーションを開発してみました。</p>

<p>早速GAEにdeployしてみようと、メニューバーの <code>Build</code> から <code>Deploy Module to App Engine...</code> を選択してdeployを実行&hellip;ところがタスクが走らずうんともすんとも言わないので調べてみました。</p>

<h2>結論</h2>

<p>以下の設定を <code>app.iml</code> ファイルに追記する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;facet</span> <span class="na">type=</span><span class="s">&quot;android-gradle&quot;</span> <span class="na">name=</span><span class="s">&quot;Android-Gradle&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;GRADLE_PROJECT_PATH&quot;</span> <span class="na">value=</span><span class="s">&quot;:app&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/facet&gt;</span>
</span><span class='line'><span class="nt">&lt;facet</span> <span class="na">type=</span><span class="s">&quot;java-gradle&quot;</span> <span class="na">name=</span><span class="s">&quot;Java-Gradle&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>     <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;BUILD_FOLDER_PATH&quot;</span> <span class="na">value=</span><span class="s">&quot;$MODULE_DIR$/build&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>     <span class="nt">&lt;option</span> <span class="na">name=</span><span class="s">&quot;BUILDABLE&quot;</span> <span class="na">value=</span><span class="s">&quot;true&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;/facet&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://qiita.com/okitsutakatomo/items/18cdd3db35185a9b1e99">こちら</a>は少々特殊な方法でmoduleを作成しているのでFacetの設定が不十分となってしまった模様。</p>

<h2>Facetとは</h2>

<p>FacetはIntelliJ IDEAに用意された機能で、使用するフレームワークや言語に合わせたFacetを設定することでIntelliJ IDEAが必要なコンポーネントのダウンロードや各種補完機能の設定などを行ってくれるもの。</p>

<p>Android StudioはIntelliJ IDEAをベースとして開発されたIDEなのでFacetの機能を継承している。</p>

<h2>参照</h2>

<ul>
<li><a href="http://qiita.com/okitsutakatomo/items/18cdd3db35185a9b1e99">GoogleAppEngine for Java を AndroidStudio + Gradleで開発環境を作る</a></li>
<li><a href="https://www.jetbrains.com/help/idea/2016.1/facet.html">Facet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DockerでRails環境を構築した手順]]></title>
    <link href="http://sojiro14.github.io/blog/2016/06/26/docker-rails-setup-tutorial/"/>
    <updated>2016-06-26T03:45:48+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/06/26/docker-rails-setup-tutorial</id>
    <content type="html"><![CDATA[<p>2016/07/10 修正: <code>docker-compose.yml</code> と <code>nginx.conf</code> の一部を修正しました</p>

<p>とある経緯で Docker を使って Rails の環境をセットアップした手順です。</p>

<h1>setting files</h1>

<p>まずは用意した file から。</p>

<h2>docker-compose.yml</h2>

<figure class='code'><figcaption><span>docker-compose.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># not use datastore container now</span>
</span><span class='line'><span class="c1">#datastore:</span>
</span><span class='line'><span class="c1">#  build: Dockerfiles/datastore</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">mysql</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql:5.6.26</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD</span><span class="p-Indicator">:</span> <span class="s">&#39;pass&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;3306:3306&#39;</span>
</span><span class='line'><span class="c1">#  volumes_from:</span>
</span><span class='line'><span class="c1">#    - datastore</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">nginx</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Dockerfiles/nginx</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;80:80&#39;</span>
</span><span class='line'><span class="c1">#  volumes_from:</span>
</span><span class='line'><span class="c1">#    - datastore</span>
</span><span class='line'>  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">web</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bundle exec unicorn -c config/unicorn.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#  volumes_from:</span>
</span><span class='line'><span class="c1">#    - datastore</span>
</span><span class='line'>  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">.:/usr/src/app</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="s">&#39;3000:3000&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">mysql</span>
</span><span class='line'>  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">RAILS_ENV</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">development</span>
</span><span class='line'>    <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD</span><span class="p-Indicator">:</span> <span class="s">&#39;pass&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">DATABASE_URL</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql2://root:pass@mysql:3306</span>
</span><span class='line'>    <span class="l-Scalar-Plain">SECRET_KEY_BASE</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">hogehoge</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dockerfile</h2>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> rails:onbuild
</span></code></pre></td></tr></table></div></figure>


<h2>Dockerfiles/nginx/Dockerfile</h2>

<figure class='code'><figcaption><span>Dockerfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='dockerfile'><span class='line'><span class="k">FROM</span> nginx:1.7.9
</span><span class='line'>
</span><span class='line'>COPY nginx.conf /etc/nginx/nginx.conf
</span></code></pre></td></tr></table></div></figure>


<h2>Dockerfiles/nginx/nginx.conf</h2>

<figure class='code'><figcaption><span>nginx.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>user  nginx<span class="p">;</span>
</span><span class='line'>worker_processes  1<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>error_log  /var/log/nginx/error.log warn<span class="p">;</span>
</span><span class='line'>pid        /var/run/nginx.pid<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>events <span class="o">{</span>
</span><span class='line'>  worker_connections 1024<span class="p">;</span> <span class="c"># increase if you have lots of clients</span>
</span><span class='line'>  accept_mutex off<span class="p">;</span> <span class="c"># &quot;on&quot; if nginx worker_processes &gt; 1</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>http <span class="o">{</span>
</span><span class='line'>  include mime.types<span class="p">;</span>
</span><span class='line'>  default_type application/octet-stream<span class="p">;</span>
</span><span class='line'>  log_format  main  <span class="s1">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
</span><span class='line'>                    <span class="s1">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
</span><span class='line'>                    <span class="s1">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  access_log  /var/log/nginx/access.log  main<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  sendfile on<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  tcp_nopush on<span class="p">;</span> <span class="c"># off may be better for *some* Comet/long-poll stuff</span>
</span><span class='line'>  tcp_nodelay off<span class="p">;</span> <span class="c"># on may be better for some Comet/long-poll stuff</span>
</span><span class='line'>
</span><span class='line'>  gzip on<span class="p">;</span>
</span><span class='line'>  gzip_http_version 1.0<span class="p">;</span>
</span><span class='line'>  gzip_proxied any<span class="p">;</span>
</span><span class='line'>  gzip_min_length 500<span class="p">;</span>
</span><span class='line'>  gzip_disable <span class="s2">&quot;MSIE [1-6]\.&quot;</span><span class="p">;</span>
</span><span class='line'>  gzip_types text/plain text/html text/xml text/css
</span><span class='line'>             text/comma-separated-values
</span><span class='line'>             text/javascript application/x-javascript
</span><span class='line'>             application/atom+xml<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  upstream app_server <span class="o">{</span>
</span><span class='line'>    <span class="c"># for UNIX domain socket setups:</span>
</span><span class='line'>    <span class="c"># server unix:/path/to/.unicorn.sock fail_timeout=0;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># for TCP setups, point these to your backend servers</span>
</span><span class='line'>    <span class="c"># server 192.168.0.7:8080 fail_timeout=0;</span>
</span><span class='line'>    server web:3000 <span class="nv">fail_timeout</span><span class="o">=</span>0<span class="p">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  server <span class="o">{</span>
</span><span class='line'>    listen       80<span class="p">;</span>
</span><span class='line'>    server_name  localhost<span class="p">;</span>
</span><span class='line'>    client_max_body_size 4G<span class="p">;</span>
</span><span class='line'>    keepalive_timeout 5<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># path for static files</span>
</span><span class='line'>    root /usr/your_app/home/system/public<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    try_files <span class="nv">$uri</span>/index.html <span class="nv">$uri</span>.html <span class="nv">$uri</span> @app<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    location @app <span class="o">{</span>
</span><span class='line'>      proxy_set_header X-Forwarded-For <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>      proxy_set_header Host <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>      proxy_redirect off<span class="p">;</span>
</span><span class='line'>      proxy_pass http://app_server<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Rails error pages</span>
</span><span class='line'>    error_page <span class="m">500</span> <span class="m">502</span> <span class="m">503</span> <span class="m">504</span> /500.html<span class="p">;</span>
</span><span class='line'>    <span class="nv">location</span> <span class="o">=</span> /500.html <span class="o">{</span>
</span><span class='line'>      root /usr/your_app/home/system/public<span class="p">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Setup Tutorial</h1>

<h2>Download Tools</h2>

<h3>VirtualBox</h3>

<p><a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p>

<p>please install version >= 5.x</p>

<h3>Homebrew</h3>

<p><a href="http://brew.sh/index_ja.html">http://brew.sh/index_ja.html</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>/usr/bin/ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Docker Tools</h3>

<h4>Docker</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install docker
</span></code></pre></td></tr></table></div></figure>


<h4>Docker Machine</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install docker-machine
</span></code></pre></td></tr></table></div></figure>


<h4>Docker Compose</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install docker-compose
</span></code></pre></td></tr></table></div></figure>


<h2>Download Application</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/path/to/workspace
</span><span class='line'><span class="nv">$ </span>git clone git@github.com:your/App.git your_app
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>your_app
</span></code></pre></td></tr></table></div></figure>


<h2>Setup Docker Machine</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-machine create --driver virtualbox dev
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker-machine ls
</span><span class='line'>NAME   ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER    ERRORS
</span><span class='line'>dev    -        virtualbox   Running   tcp://192.168.99.100:2376           v1.10.0
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">eval</span> <span class="s2">&quot;$(docker-machine env dev)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(docker-machine env dev)&quot;&#39;</span> &gt;&gt; ~/.bashrc
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-machine start dev
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker-machine ip dev
</span><span class='line'>192.168.99.100
</span></code></pre></td></tr></table></div></figure>


<h2>Setup Application</h2>

<h3>Build Docker Images and Start Containers</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ~/path/to/workspace/your_app</span>
</span><span class='line'><span class="nv">$ </span>docker-compose build
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>docker-compose up
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>please open another tab</p>

<h3>Setup DB</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose run web rake db:create
</span><span class='line'><span class="nv">$ </span>docker-compose run web rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<h2>Access Application</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-machine ip dev
</span><span class='line'>192.168.99.100
</span></code></pre></td></tr></table></div></figure>


<p>access to <code>192.168.99.100:3000</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plenv で Perl を管理する]]></title>
    <link href="http://sojiro14.github.io/blog/2016/03/05/management-perl-versions-by-plenv/"/>
    <updated>2016-03-05T07:14:26+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/03/05/management-perl-versions-by-plenv</id>
    <content type="html"><![CDATA[<p>Perl をバージョンごと、あるいはプロジェクトごとに管理するためのツールである plenv の導入手順メモ</p>

<h2>plenv をインストールする</h2>

<h3>homebrew の update</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'>Updated Homebrew from c0fae05 to bfe20af.
</span><span class='line'>No changes to formulae.
</span></code></pre></td></tr></table></div></figure>


<p>先ほど <a href="http://blog.sojiro.me/blog/2016/03/05/management-ruby-versions-by-rbenv/">rbenv をインストールする手順</a> で同じことをやったばかりなので更新なし</p>

<h3>plenv と perl-build のインストール</h3>

<p>これも <a href="http://blog.sojiro.me/blog/2016/03/05/management-ruby-versions-by-rbenv/">どこか</a> で見たような手順</p>

<p><code>perl-build</code> は <code>plenv</code> のプラグイン</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install plenv perl-build
</span><span class='line'><span class="o">==</span>&gt; Downloading https://github.com/tokuhirom/plenv/archive/2.2.0.tar.gz
</span><span class='line'><span class="o">==</span>&gt; Downloading from https://codeload.github.com/tokuhirom/plenv/tar.gz/2.2.0
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>plenv init</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(plenv init -)&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p> <code>plenv init -</code> でやっていることは以下の通り</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>plenv init -
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/Your/Home/Directory/.plenv/shims:${PATH}&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PLENV_SHELL</span><span class="o">=</span>bash
</span><span class='line'><span class="nb">source</span> <span class="s1">&#39;/usr/local/Cellar/plenv/2.2.0/libexec/../completions/plenv.bash&#39;</span>
</span><span class='line'>
</span><span class='line'>plenv<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">local command</span>
</span><span class='line'>
</span><span class='line'><span class="nb">  command</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -gt <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">shift</span>
</span><span class='line'><span class="nb">  </span><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s2">&quot;$command&quot;</span> in
</span><span class='line'>  rehash<span class="p">|</span>shell<span class="o">)</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="s2">&quot;`plenv &quot;</span>sh-<span class="nv">$command</span><span class="s2">&quot; &quot;</span><span class="nv">$@</span><span class="s2">&quot;`&quot;</span><span class="p">;;</span>
</span><span class='line'>  *<span class="o">)</span>
</span><span class='line'>    <span class="nb">command </span>plenv <span class="s2">&quot;$command&quot;</span> <span class="s2">&quot;$@&quot;</span><span class="p">;;</span>
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>perl のインストール</h2>

<p>インストールできる perl のバージョンを確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>plenv install -l
</span><span class='line'>Available versions:
</span><span class='line'> 5.6.0
</span><span class='line'> 5.6.1-TRIAL1
</span><span class='line'> 5.6.1-TRIAL2
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>最新の安定版であるバージョン <code>5.22.1</code> をインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>plenv install 5.22.1
</span><span class='line'>Installing 5.22.1 as 5.22.1
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>インストールされたバージョンを確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>plenv versions
</span><span class='line'>* system <span class="o">(</span><span class="nb">set </span>by /My/Home/Directory/.plenv/version<span class="o">)</span>
</span><span class='line'>  5.22.1
</span></code></pre></td></tr></table></div></figure>


<h2>使用する perl を設定</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>plenv global 5.22.1
</span><span class='line'><span class="nv">$ </span>plenv versions
</span><span class='line'>  system
</span><span class='line'>* 5.22.1 <span class="o">(</span><span class="nb">set </span>by /My/Home/Directory/.plenv/version<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>perl に cpanm をインストールする</h2>

<p>現在使用している perl に <code>cpanm</code> をインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>plenv install-cpanm
</span><span class='line'>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
</span><span class='line'>                                 Dload  Upload   Total   Spent    Left  Speed
</span><span class='line'><span class="m">100</span>   <span class="m">314</span>    <span class="m">0</span>   <span class="m">314</span>    <span class="m">0</span>     <span class="m">0</span>   <span class="m">2078</span>      <span class="m">0</span> --:--:-- --:--:-- --:--:--  2079
</span><span class='line'><span class="m">100</span>  296k  <span class="m">100</span>  296k    <span class="m">0</span>     <span class="m">0</span>   367k      <span class="m">0</span> --:--:-- --:--:-- --:--:-- 2135k
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p> <code>cpanm</code> のパスが変わっていることを確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>which cpanm
</span><span class='line'>/My/Home/Directory/.plenv/shims/cpanm
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<ul>
<li><a href="https://github.com/tokuhirom/plenv">plenv</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rbenv で Ruby を管理する]]></title>
    <link href="http://sojiro14.github.io/blog/2016/03/05/management-ruby-versions-by-rbenv/"/>
    <updated>2016-03-05T06:22:42+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/03/05/management-ruby-versions-by-rbenv</id>
    <content type="html"><![CDATA[<p>Ruby をバージョンごと、あるいはプロジェクトごとに管理するためのツールである rbenv の導入手順メモ</p>

<h2>rbenv をインストールする</h2>

<h3>homebrew の update</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'>Updated Homebrew from b369c25 to c0fae05.
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h3>rbenv と ruby-build のインストール</h3>

<p> <code>rbenv</code> と同時に <code>ruby-build</code> もインストールする</p>

<p> <code>ruby-build</code> は <code>rbenv</code> のプラグインで <code>rbenv install</code> コマンドを提供する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install rbenv ruby-build
</span><span class='line'><span class="o">==</span>&gt; Installing dependencies <span class="k">for</span> rbenv: autoconf, pkg-config, openssl, ruby-build
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>rbenv init</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.bash_profile
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p> <code>rbenv init -</code> でやっていることは以下の通り</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv init -
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/Your/Home/Directory/.rbenv/shims:${PATH}&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">RBENV_SHELL</span><span class="o">=</span>bash
</span><span class='line'><span class="nb">source</span> <span class="s1">&#39;/usr/local/Cellar/rbenv/1.0.0/libexec/../completions/rbenv.bash&#39;</span>
</span><span class='line'><span class="nb">command </span>rbenv rehash 2&gt;/dev/null
</span><span class='line'>rbenv<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">local command</span>
</span><span class='line'><span class="nb">  command</span><span class="o">=</span><span class="s2">&quot;$1&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -gt <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nb">shift</span>
</span><span class='line'><span class="nb">  </span><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="s2">&quot;$command&quot;</span> in
</span><span class='line'>  rehash<span class="p">|</span>shell<span class="o">)</span>
</span><span class='line'>    <span class="nb">eval</span> <span class="s2">&quot;$(rbenv &quot;</span>sh-<span class="nv">$command</span><span class="s2">&quot; &quot;</span><span class="nv">$@</span><span class="s2">&quot;)&quot;</span><span class="p">;;</span>
</span><span class='line'>  *<span class="o">)</span>
</span><span class='line'>    <span class="nb">command </span>rbenv <span class="s2">&quot;$command&quot;</span> <span class="s2">&quot;$@&quot;</span><span class="p">;;</span>
</span><span class='line'>  <span class="k">esac</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ruby のインストール</h2>

<p>インストールできる ruby のバージョンを確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install -l
</span><span class='line'>Available versions:
</span><span class='line'>  1.8.6-p383
</span><span class='line'>  1.8.6-p420
</span><span class='line'>  1.8.7-p249
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>バージョン <code>2.2.0</code> をインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.2.0
</span><span class='line'>Downloading ruby-2.2.0.tar.bz2...
</span><span class='line'>-&gt; https://cache.ruby-lang.org/pub/ruby/2.2/ruby-2.2.0.tar.bz2
</span><span class='line'>Installing ruby-2.2.0...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>インストールされたバージョンを確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv versions
</span><span class='line'>* system <span class="o">(</span><span class="nb">set </span>by /My/Home/Directory/.rbenv/version<span class="o">)</span>
</span><span class='line'>  2.2.0
</span></code></pre></td></tr></table></div></figure>


<h2>使用する ruby を設定</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv global 2.2.0
</span><span class='line'><span class="nv">$ </span>rbenv versions
</span><span class='line'>  system
</span><span class='line'>* 2.2.0 <span class="o">(</span><span class="nb">set </span>by /My/Home/Directory/.rbenv/version<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ブログを管理しているディレクトリは system ruby にしておく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>git/blog/
</span><span class='line'><span class="nv">$ </span>rbenv <span class="nb">local </span>system
</span><span class='line'><span class="nv">$ </span>rbenv versions
</span><span class='line'>* system <span class="o">(</span><span class="nb">set </span>by /My/Home/Directory/git/blog/.ruby-version<span class="o">)</span>
</span><span class='line'>  2.2.0
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span>
</span><span class='line'><span class="nv">$ </span>rbenv versions
</span><span class='line'>  system
</span><span class='line'>* 2.2.0 <span class="o">(</span><span class="nb">set </span>by /My/Home/Directory/.rbenv/version<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<ul>
<li><a href="https://github.com/rbenv/rbenv">rbenv</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minil を使った Changes ファイルの更新]]></title>
    <link href="http://sojiro14.github.io/blog/2016/02/21/how-to-write-changes-with-minil/"/>
    <updated>2016-02-21T01:24:33+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/02/21/how-to-write-changes-with-minil</id>
    <content type="html"><![CDATA[<p>CPAN モジュールの bug fix を行ったので修正版をリリース。</p>

<p> <code>minil</code> 様様と思いながら <code>minil release</code> コマンドを打つのだが、
いつも Changes ファイルの更新のところで、どこに何を書けば良いのだっけ？となってしまうのでここにメモしておくことにした。</p>

<h2>{{$NEXT}} の下に書く</h2>

<p>今回のリリースだとこうなった</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Revision history for Perl extension JSON-MergePatch
</span><span class='line'>
</span><span class='line'>{\{$NEXT}}
</span><span class='line'>
</span><span class='line'>    - (bug fix) diff() :when the same hash-refs are present in the hash values of source and target (thanks bessarabov)
</span><span class='line'>    - refactoring
</span><span class='line'>
</span><span class='line'>0.02 2015-09-13T09:08:20Z
</span><span class='line'>
</span><span class='line'>    - use JSON::MaybeXS and fix keys arg
</span><span class='line'>
</span><span class='line'>0.01 2015-07-02T18:29:20Z
</span><span class='line'>
</span><span class='line'>    - original version</span></code></pre></td></tr></table></div></figure>


<p> <code>{{$NEXT}}</code> となっているところにバージョンやら日付やらが入る。</p>

<h2>参照</h2>

<p><a href="http://perldoc.jp/docs/modules/Minilla-v0.6.4/lib/Minilla/Tutorial.pod#Make32a32new32build">Minilla チュートリアルドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef のリモート実行]]></title>
    <link href="http://sojiro14.github.io/blog/2015/11/14/the-second-step-of-chef/"/>
    <updated>2015-11-14T23:08:53+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/11/14/the-second-step-of-chef</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sojiro.me/blog/2015/11/01/the-first-step-of-chef/">前回</a> 対象サーバで直接 Chef を実行してみました。</p>

<p>今回は手元からリモートのサーバに対して Chef を実行する仕組みを試してみます。</p>

<h2>knife-solo のインストール</h2>

<p>手元のクックブックをリモートのサーバに転送して <code>chef-solo</code> コマンドを実行するまでの一連の作業を実行できる <code>knife-solo</code> コマンドをインストールする</p>

<p> <code>knife-solo</code> コマンドは gem でインストールできる。手元の Mac OS でインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install knife-solo
</span><span class='line'>...
</span><span class='line'>Thanks <span class="k">for</span> installing knife-solo!
</span><span class='line'>...
</span><span class='line'><span class="m">36</span> gems installed
</span></code></pre></td></tr></table></div></figure>


<h2>Berkshelf のインストール</h2>

<p>クックブックの依存関係を管理する <code>Berkshelf</code> というツールもこのタイミングでインストールする。これは <code>knife-solo</code> が他の gem のインストール状況によってデフォルトのオプションが変わるため</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem install berkshelf
</span><span class='line'>...
</span><span class='line'><span class="m">25</span> gems installed
</span></code></pre></td></tr></table></div></figure>


<h2>ローカルにリポジトリを作る</h2>

<p>まずはローカルにリポジトリを作る</p>

<p>Vagrantfile があるディレクトリで以下のコマンドを実行して作成する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife solo init .
</span><span class='line'>/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/lib/ruby/2.0.0/rubygems/specification.rb:2007:in <span class="sb">`</span>raise_if_conflicts<span class="err">&#39;</span>: Unable to activate rspec-3.0.0, because rspec-core-3.4.0 conflicts with rspec-core <span class="o">(</span>~&gt; 3.0.0<span class="o">)</span>, rspec-expectations-3.4.0 conflicts with rspec-expectations <span class="o">(</span>~&gt; 3.0.0<span class="o">)</span>, rspec-mocks-3.4.0 conflicts with rspec-mocks <span class="o">(</span>~&gt; 3.0.0<span class="o">)</span> <span class="o">(</span>Gem::LoadError<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラーが発生した</p>

<p>rspec と rspec-core のバージョンが合っていなかったので rspec を update する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo gem update rspec
</span><span class='line'>...
</span><span class='line'>Gems updated: rspec rspec-collection_matchers
</span></code></pre></td></tr></table></div></figure>


<p>再度リポジトリの作成を実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife solo init .
</span><span class='line'>WARNING: No knife configuration file found
</span><span class='line'>Creating kitchen...
</span><span class='line'>Creating knife.rb in kitchen...
</span><span class='line'>Creating cupboards...
</span><span class='line'>Setting up Berkshelf...
</span></code></pre></td></tr></table></div></figure>


<p>これで実行ディレクトリ内に様々な雛形ディレクトリ、ファイルが作成された</p>

<h2>リモートのサーバに Chef Solo をインストールする</h2>

<p>今回リモートサーバとして想定する Vagrant の環境に対して SSH の設定を以下のようにしておく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh-config --host testhost &gt;&gt; ~/.ssh/config
</span></code></pre></td></tr></table></div></figure>


<p>以下のコマンドで Chef Solo をリモートサーバに対してインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife solo bootstrap testhost
</span><span class='line'>Bootstrapping Chef...
</span><span class='line'>...
</span><span class='line'>Thank you <span class="k">for</span> installing Chef!
</span><span class='line'>...
</span><span class='line'>Chef Client finished, 0/0 resources updated in <span class="m">06</span> seconds
</span></code></pre></td></tr></table></div></figure>


<p>今回は前回 Chef Solo をインストールした環境に対して打ったので最終的な結果は <code>0/0 resources updated</code> になっている</p>

<h2>クックブックの作成</h2>

<p>ローカルにクックブックを作成する。今回は git をインストールするためのクックブックを作る</p>

<p>自作のクックブックは site-cookbooks 以下に置くことが慣例になっているので出力先に site-cookbooks を指定している</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife cookbook create git -o site-cookbooks
</span></code></pre></td></tr></table></div></figure>


<p>これで site-cookbooks 以下に git クックブックの雛形が出来上がる</p>

<h2>レシピの編集</h2>

<p>レシピの雛形 <code>site-cookbooks/git/recipes/default.rb</code> を編集していく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim site-cookbooks/git/recipes/default.rb
</span><span class='line'><span class="nv">$ </span>cat site-cookbooks/git/recipes/default.rb
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Cookbook Name:: git</span>
</span><span class='line'><span class="c"># Recipe:: default</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Copyright 2015, YOUR_COMPANY_NAME</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>package <span class="s2">&quot;git&quot;</span> <span class="k">do</span>
</span><span class='line'>    action :install
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>Node オブジェクトの編集</h2>

<p>Chef で管理する Node （サーバ）の状態を記述し、それぞれの Node に対してどのクックブックが適用されるかを設定する Node オブジェクトを編集する</p>

<p>Node オブジェクトは <code>knife solo bootstrap testhost</code> 実行時に <code>nodes/testhost.json</code> として作成されている</p>

<p>今回はここに先ほど作成した git クックブックの適用を記述する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim nodes/testhost.json
</span><span class='line'><span class="nv">$ </span>cat nodes/testhost.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;run_list&quot;</span>: <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;recipe[git]&quot;</span>
</span><span class='line'>  <span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;automatic&quot;</span>: <span class="o">{</span>
</span><span class='line'>    <span class="s2">&quot;ipaddress&quot;</span>: <span class="s2">&quot;testhost&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>クックブックの実行</h2>

<p>準備が整ったのでいよいよクックブックをリモートサーバに対して実行する</p>

<p>以下のコマンドで実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife solo cook testhost
</span><span class='line'>Running Chef on testhost...
</span><span class='line'>...
</span><span class='line'>Chef Client finished, 0/1 resources updated in <span class="m">07</span> seconds
</span></code></pre></td></tr></table></div></figure>


<p>これも同じく前回の環境ですでに git をインストール済みなので <code>0/1 resources updated</code> として正常に実行された</p>

<p>これでリモートへの Chef 実行完了！</p>

<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/477416500X/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=477416500X&amp;linkCode=as2&amp;tag=sojiro14-22">Chef 実践入門</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのChef]]></title>
    <link href="http://sojiro14.github.io/blog/2015/11/01/the-first-step-of-chef/"/>
    <updated>2015-11-01T02:17:51+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/11/01/the-first-step-of-chef</id>
    <content type="html"><![CDATA[<p>Chef を使ってみます。
Vagrant で環境をつくっておいてそこで色々試してみます。</p>

<p>今回はゲスト側でクックブック、レシピを作って実行してみます。</p>

<h2>Chef のインストール</h2>

<p> <code>vagrant ssh</code> で Vagrant の環境に入って Chef をインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -L https://www.opscode.com/chef/install.sh <span class="p">|</span> sudo bash
</span><span class='line'>...
</span><span class='line'>Thank you <span class="k">for</span> installing Chef!
</span></code></pre></td></tr></table></div></figure>


<p>Chef Solo がインストールされているか確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chef-solo -v
</span><span class='line'>Chef: 12.5.1
</span></code></pre></td></tr></table></div></figure>


<h2>クックブックを作る</h2>

<p>Chef をインストールすると <code>knife</code> というコマンドもインストールされる。
この <code>knife</code> コマンドを使ってクックブックを作る</p>

<p>今回は git をインストールするための git クックブックを作る</p>

<p>コマンドは以下のように指定する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>knife cookbooks create <span class="o">[</span>クックブック名<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>今回は出力先を指定する <code>-o</code> オプションを指定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo knife cookbook create git -o /var/chef/cookbooks
</span></code></pre></td></tr></table></div></figure>


<p>このコマンドで git という名前のクックブックが作成され、 <code>/var/chef/cookbooks/git/recipes/default.rb</code> にレシピの雛形が作られる</p>

<h2>レシピの編集</h2>

<p>レシピの雛形に git をインストールするレシピを書く</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo vi /var/chef/cookbooks/git/recipes/default.rb
</span><span class='line'><span class="nv">$ </span>cat /var/chef/cookbooks/git/recipes/default.rb
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Cookbook Name:: git</span>
</span><span class='line'><span class="c"># Recipe:: default</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Copyright 2015, YOUR_COMPANY_NAME</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># All rights reserved - Do Not Redistribute</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'>package <span class="s2">&quot;git&quot;</span> <span class="k">do</span>
</span><span class='line'>  action :install
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>クックブックの実行</h2>

<p>作成したクックブックを実行する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo chef-solo -o git
</span><span class='line'>...
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>Converging <span class="m">1</span> resources
</span><span class='line'>Recipe: git::default
</span><span class='line'>  * yum_package<span class="o">[</span>git<span class="o">]</span> action install
</span><span class='line'>    - install version 1.7.1-3.el6_4.1 of package git
</span><span class='line'>
</span><span class='line'>Running handlers:
</span><span class='line'>Running handlers <span class="nb">complete</span>
</span><span class='line'>Chef Client finished, 1/1 resources updated in <span class="m">38</span> seconds
</span></code></pre></td></tr></table></div></figure>


<p>git がインストールされたか確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git --version
</span><span class='line'>git version 1.7.1
</span></code></pre></td></tr></table></div></figure>


<h2>Chef の特徴</h2>

<h3>OS の違いを吸収してくれる</h3>

<p>上記 git の例ではこちらで指定していないにも関わらず、実行した環境が CentOS であることを解釈して yum パッケージでインストールが行われた</p>

<p>実行された環境の OS 毎の違いを吸収してくれる</p>

<h3>冪等性が担保されている</h3>

<p>先ほどのクックブックをもう一度実行してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo chef-solo -o git
</span><span class='line'>...
</span><span class='line'>Chef Client finished, 0/1 resources updated in <span class="m">07</span> seconds
</span></code></pre></td></tr></table></div></figure>


<p>今回は何もせずに正常に終了したことが分かる</p>

<p>Chef ではクックブックを何度実行しても、クックブックに規定された状態になる冪等性が担保されている</p>

<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/477416500X/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=477416500X&amp;linkCode=as2&amp;tag=sojiro14-22">Chef 実践入門</a></li>
</ul>


<p>余談: Chef に関する記事は web 上にも色々ありますが、 Chef は用途によって様々なツール、使い方があり、基本的な用語や概念などを理解できていないと思わぬところでハマってしまいがちです。 <a href="http://www.amazon.co.jp/gp/product/477416500X/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=477416500X&amp;linkCode=as2&amp;tag=sojiro14-22">Chef 実践入門</a> は Chef に関して体系的に理解できるので最初にサラッと読んでしまうのが近道だと感じました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InnoDBにおけるSQL別ロックの挙動]]></title>
    <link href="http://sojiro14.github.io/blog/2015/10/27/how-locks-behave-by-sqls-on-innodb/"/>
    <updated>2015-10-27T21:17:32+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/10/27/how-locks-behave-by-sqls-on-innodb</id>
    <content type="html"><![CDATA[<p>研修時代に書いた InnoDB に関するメモ第二弾。</p>

<p>ロックの挙動に関しては基礎の基礎でちょっと考えれば分かるものの、開発しているとふとしたところで考慮が漏れていたりするので注意したい。</p>

<h2>SELECT &hellip; FROM</h2>

<p>一貫性読み取りであり、データベースのスナップショットを読み取り、トランザクションの遮断レベルが SERIALIZABLE に設定されなければロックは設定しません。SERIALIZABLE レベルの場合、検索時に直面したインデックスレコード上に共有ネクストキーロックが設定されます。</p>

<h2>SELECT &hellip; FROM &hellip; LOCK IN SHARE MODE</h2>

<p><em>検索時に直面したすべてのインデックスレコード上</em>に <strong>共有ネクストキーロック</strong> が設定されます。</p>

<h2>SELECT &hellip; FROM &hellip; FOR UPDATE</h2>

<p><em>検索で特定されたインデックスレコード</em>に対し、 <strong>排他ネクストキーロック</strong> が設定され、ほかのセッションが SELECT &hellip; FROM &hellip; LOCK IN SHARE MODE を実行したり、特定のトランザクション遮断レベルで読み取りを行ったりできないようにします。 <strong>ただし、ギャップロックの部分に関しては共有ロックとなります</strong> 。</p>

<h2>UPDATE &hellip; WHERE &hellip;</h2>

<p><em>検索が直面するすべてのレコード上</em>に <strong>排他ネクストキーロック</strong> を設定します。</p>

<h2>DELETE FROM &hellip; WHERE &hellip;</h2>

<p><em>検索が直面するすべてのレコード上</em>に <strong>排他ネクストキーロック</strong> を設定します。</p>

<h2>INSERT</h2>

<p><strong>挿入される行に排他ロック</strong> を設定します。このロックはネクストキーロックではなくインデックスレコードロックである (つまりギャップロックが存在しない) ため、ほかのセッションは挿入行の前にあるギャップへの挿入を自由に行えます。</p>

<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4873116384/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873116384&amp;linkCode=as2&amp;tag=sojiro14-22">実践ハイパフォーマンスMySQL 第3版</a></li>
<li><a href="ftp://ftp.ntu.edu.tw/MySQL/doc/refman/5.1-olh/ja/innodb-locks-set.html">ftp://ftp.ntu.edu.tw/MySQL/doc/refman/5.1-olh/ja/innodb-locks-set.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InnoDBにおけるロックの種類]]></title>
    <link href="http://sojiro14.github.io/blog/2015/10/25/kinds-of-locks-of-innodb/"/>
    <updated>2015-10-25T23:02:53+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/10/25/kinds-of-locks-of-innodb</id>
    <content type="html"><![CDATA[<p>MySQL でよく使う InnoDB のロックについて研修時代に書いたメモ。</p>

<h2>種類</h2>

<ul>
<li>レコードロック: <strong>インデックスレコードの</strong> ロック</li>
<li>ギャップロック: インデックスレコード間にあるギャップのロック、先頭のインデックスレコードの前や末尾のインデックスレコードの後にあるギャップのロック、のいずれか</li>
<li>ネクストキーロック: インデックスレコードに対するレコードロックと、そのインデックスレコードの前、または後ろにあるギャップに対するギャップロックとを組み合わせたもの</li>
</ul>


<h2>InnoDBの行ロック（レコードロック）</h2>

<p>InnoDBは行ロックができる、とよく言いますが、
正確には <strong>インデックスレコード</strong> にロックをかけているので、
primary key や、unique key といったレコードを一意に特定できるインデックスを使用せずにロックをかけるとテーブルロックの様な挙動を示します。（実際には隠しクラスタインデックスが生成、使用される。）</p>

<h2>ギャップロック、ネクストキーロック</h2>

<p>ギャップロック、ネクストキーロックは</p>

<ul>
<li>範囲を指定して（複数のレコードにまたがって）ロックを獲得しようとしたとき</li>
<li>存在しないレコードに対してロックを獲得しようとしたとき</li>
</ul>


<p>のみ起こりうる。</p>

<p>また、 <strong>ギャップロックは常に共有ロックと同じ挙動</strong> を示す</p>

<h2>例</h2>

<p>前提：id(primary key)が10, 20, 30のレコードが入っているテーブル</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">15</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>    <span class="o">#</span><span class="n">id</span> <span class="mi">11</span><span class="o">~</span><span class="mi">19</span><span class="err">にギャップロック</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">15</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>    <span class="o">#</span><span class="n">id</span> <span class="o">~</span><span class="mi">20</span><span class="err">にネクストキーロック</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">20</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>    <span class="o">#</span><span class="n">id</span> <span class="o">~</span><span class="mi">20</span><span class="err">にネクストキーロック</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&lt;=</span> <span class="mi">20</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>   <span class="o">#</span><span class="n">id</span> <span class="o">~</span><span class="mi">30</span><span class="err">にネクストキーロック</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="mi">15</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>    <span class="o">#</span><span class="n">id</span> <span class="mi">11</span><span class="o">~</span><span class="err">にギャップロック</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">from</span> <span class="k">table</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">35</span> <span class="k">for</span> <span class="k">update</span><span class="p">;</span>    <span class="o">#</span><span class="n">id</span> <span class="mi">31</span><span class="o">~</span><span class="err">にギャップロック</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4873116384/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873116384&amp;linkCode=as2&amp;tag=sojiro14-22">実践ハイパフォーマンスMySQL 第3版</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails アプリを MySQL で作るときのメモ]]></title>
    <link href="http://sojiro14.github.io/blog/2015/09/21/rails-new-with-mysql/"/>
    <updated>2015-09-21T22:34:43+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/09/21/rails-new-with-mysql</id>
    <content type="html"><![CDATA[<p>Rails 4.0.5 のアプリを MySQL で立てるときのメモ</p>

<h3>rails new にオプションをつける</h3>

<p>オプションを付けずに <code>rails new</code> すると SQLite で立てられてしまうので、以下のようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails new app_name -d mysql
</span></code></pre></td></tr></table></div></figure>


<h3>mysql2 のバージョンを指定</h3>

<p>2015/09/21 時点の mysql2 は rails 上での実行時にバグを含んでいるようなのでバージョン指定する。</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mysql2&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.3.20&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<h3>mysql のパスワード設定</h3>

<p> <code>config/database.yml</code> に mysql のパスワードを設定する。環境変数の指定は以下のようにする。</p>

<figure class='code'><figcaption><span>config/database.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">utf8</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app_name_development</span>
</span><span class='line'>  <span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5</span>
</span><span class='line'>  <span class="l-Scalar-Plain">username</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;MYSQLPASS&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">socket</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/var/lib/mysql/mysql.sock</span>
</span></code></pre></td></tr></table></div></figure>


<h3>database の作成</h3>

<p>最後に database を作って完了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake db:create
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<ul>
<li><a href="http://qiita.com/shizuma/items/0f9660d5d46a0012eb9e">Rails mysql2でrake db:createがエラー問題</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant Provisioning の謎]]></title>
    <link href="http://sojiro14.github.io/blog/2015/09/17/mystery-of-vagrant-provisioning/"/>
    <updated>2015-09-17T05:21:08+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/09/17/mystery-of-vagrant-provisioning</id>
    <content type="html"><![CDATA[<p>Vagrant で立てた CentOS の仮想環境にちょっとした環境構築をしようと、provision ファイルを作って <code>vagrant provision</code> で実行しようとしたところ RVM のインストールから先が上手くいかなかった。</p>

<p>（ <code>vagrant provision</code> に関しては <a href="http://blog.sojiro.me/blog/2015/05/03/the-first-step-for-vagrant/">過去のエントリ</a> に記載があります）</p>

<p>provision ファイルの該当箇所は以下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ruby and rails</span>
</span><span class='line'>curl -L https://get.rvm.io <span class="p">|</span> bash -s
</span><span class='line'><span class="nb">source</span> ~/.profile
</span><span class='line'>
</span><span class='line'>rvm requirements
</span><span class='line'>rvm install 2.0.0 --with-openssl-dir<span class="o">=</span><span class="nv">$HOME</span>/.rvm/usr
</span></code></pre></td></tr></table></div></figure>


<p>上記コマンドのうち、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://get.rvm.io <span class="p">|</span> bash -s
</span></code></pre></td></tr></table></div></figure>


<p>だけが実行できているが、このコマンドの結果も意図したものとなっていない。
それ以降のコマンドは失敗する。</p>

<p>まだ原因は良くわかっていない。</p>

<ul>
<li>RVM のインストール自体はできている</li>
<li>どのユーザー（vagrant? root?）で実行されているのか分からない</li>
<li>vagrant ユーザーに対しては <code>rvm</code> コマンドの path が通っているが、root ユーザーには通っていない</li>
<li>provision 実行のログ的には root で実行しているように見える</li>
<li><code>vagrant ssh</code> して手動でコマンドを実行すると意図した結果になる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sed コマンドで置換]]></title>
    <link href="http://sojiro14.github.io/blog/2015/09/15/note-of-sed-command/"/>
    <updated>2015-09-15T01:58:45+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/09/15/note-of-sed-command</id>
    <content type="html"><![CDATA[<p>ファイルの中身を置換する必要があったので <code>sed</code> コマンドを使った。</p>

<h3>使うオプション</h3>

<p>今回使うのは</p>

<ul>
<li>変換処理の条件式を指定するための <code>e</code> オプション</li>
<li>変換してそのままファイルを上書きする <code>i</code> オプション</li>
</ul>


<h3>やってみる</h3>

<p>今回はこんな感じ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sed -ie <span class="s1">&#39;条件式&#39;</span> ファイル名
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cat <span class="nb">test</span>
</span><span class='line'>testtesttest
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sed -ie <span class="s1">&#39;s/test/hoge/g&#39;</span> <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cat <span class="nb">test</span>
</span><span class='line'>hogehogehoge
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'><span class="nb">test </span>teste
</span></code></pre></td></tr></table></div></figure>


<p>指定したファイルは条件に沿って置換されているが、オリジナルの内容を持ったファイルも生成されている</p>

<p>オリジナルの内容を持ったファイルは使う sed コマンド（OS）によって元のファイル名に &lsquo;e&rsquo; が付いたり &lsquo;-e&rsquo; が付いたりする</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find コマンドの使い方]]></title>
    <link href="http://sojiro14.github.io/blog/2015/08/14/how-to-use-find-command/"/>
    <updated>2015-08-14T09:37:49+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/08/14/how-to-use-find-command</id>
    <content type="html"><![CDATA[<p>いつまでも <code>find</code> コマンドの使い方を覚えられないアホなのでメモしておく。。。</p>

<h3>基本的に</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find <span class="o">[</span>探すディレクトリ<span class="o">]</span> -name <span class="s1">&#39;ファイルの条件&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだけは覚えとけ、と。</p>

<h3>たまには</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>find . -name <span class="s1">&#39;*.swp&#39;</span> -ok rm <span class="o">{}</span> <span class="se">\;</span>
</span></code></pre></td></tr></table></div></figure>


<p>見つけたファイルをそのまま次のコマンドに受け渡す <code>-ok</code> オプションもたまには使えるかも知れない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPAN モジュールのリリース]]></title>
    <link href="http://sojiro14.github.io/blog/2015/07/06/release-cpan-module/"/>
    <updated>2015-07-06T02:19:14+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/07/06/release-cpan-module</id>
    <content type="html"><![CDATA[<p>上司にお膳立てされ、後輩にお尻を叩かれ、やっとのことで CPAN モジュールをリリースしました。</p>

<p>前回のエントリに続き、リリースの手順を記します。</p>

<h2>モジュールの作成</h2>

<p>ここがコアの部分ですが、内容は作るモジュールに依るので割愛。編集すべきは以下のファイルです。</p>

<ul>
<li>lib/ 配下のプログラム</li>
<li>t/ 配下のテストプラグラム</li>
<li>cpanfile</li>
</ul>


<p>cpanfile の作成は <code>scan-prereqs-cpanfile</code> を使うと便利です。</p>

<p>このコマンドは <strong>App::scan_prereqs_cpanfile</strong> モジュールで提供されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cpanm App::scan_prereqs_cpanfile
</span><span class='line'>scan-prereqs-cpanfile &gt; cpanfile
</span></code></pre></td></tr></table></div></figure>


<h2>テスト</h2>

<p>モジュールの作成ができたら test を実行しますが、このとき <code>minil test</code> コマンドを使うと Changes や META.json、README.md が自動で編集されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>minil <span class="nb">test</span>
</span><span class='line'>Creating working directory: /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
</span><span class='line'>cp Build.PL /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/Build.PL
</span><span class='line'>cp Changes /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/Changes
</span><span class='line'>cp LICENSE /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/LICENSE
</span><span class='line'>cp META.json /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/META.json
</span><span class='line'>cp README.md /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/README.md
</span><span class='line'>cp cpanfile /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/cpanfile
</span><span class='line'>cp lib/JSON/MergePatch.pm /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/lib/JSON/MergePatch.pm
</span><span class='line'>cp minil.toml /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/minil.toml
</span><span class='line'>cp t/00_compile.t /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/t/00_compile.t
</span><span class='line'>Building /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: It<span class="s1">&#39;s new $module</span>
</span><span class='line'><span class="s1">Version: 0.01</span>
</span><span class='line'><span class="s1">fatal: bad default revision &#39;</span>HEAD<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">Writing MANIFEST file</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/minimum_version.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/cpan_meta.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/pod.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/spelling.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/permissions.t</span>
</span><span class='line'><span class="s1">[5DuYQ9x7] $ perl -I. Build.PL</span>
</span><span class='line'><span class="s1">Creating new &#39;</span>Build<span class="s1">&#39; script for &#39;</span>JSON-MergePatch<span class="s1">&#39; version &#39;</span>0.01<span class="err">&#39;</span>
</span><span class='line'><span class="o">[</span>5DuYQ9x7<span class="o">]</span> <span class="nv">$ </span>perl -I. Build build
</span><span class='line'>cp lib/JSON/MergePatch.pm blib/lib/JSON/MergePatch.pm
</span><span class='line'>t/00_compile.t .. ok
</span><span class='line'>All tests successful.
</span><span class='line'><span class="nv">Files</span><span class="o">=</span>1, <span class="nv">Tests</span><span class="o">=</span>1,  <span class="m">0</span> wallclock secs <span class="o">(</span> 0.01 usr  0.01 sys +  0.03 cusr  0.01 <span class="nv">csys</span> <span class="o">=</span>  0.06 CPU<span class="o">)</span>
</span><span class='line'>Result: PASS
</span><span class='line'>Removing /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
</span></code></pre></td></tr></table></div></figure>


<h2>リリース</h2>

<p>テストが通ったらいよいよリリースします。</p>

<p>CPAN へのリリースには PAUSE ID が必要です。取得方法は<a href="http://blog.sojiro.me/blog/2015/05/17/get-pause-id/">こちら</a>。</p>

<p>リリースには <code>minil release</code> コマンドを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Release engineering requires Version::Next, but it is not available. Please install Version::Next using your preferred CPAN client at ...
</span></code></pre></td></tr></table></div></figure>


<p> <strong>Version::Next</strong> がないと怒られたので入れて再度実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm Version::Next
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Release engineering requires CPAN::Uploader, but it is not available. Please install CPAN::Uploader using your preferred CPAN client at ...
</span></code></pre></td></tr></table></div></figure>


<p>今度は <strong>CPAN::Uploader</strong> がないと怒られたので入れて再度実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm CPAN::Uploader
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>Next Release? <span class="o">[</span>0.01<span class="o">]</span>
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>...
</span><span class='line'>All tests successful.
</span><span class='line'><span class="nv">Files</span><span class="o">=</span>8, <span class="nv">Tests</span><span class="o">=</span>67,  <span class="m">0</span> wallclock secs <span class="o">(</span> 0.04 usr  0.03 sys +  0.18 cusr  0.04 <span class="nv">csys</span> <span class="o">=</span>  0.29 CPU<span class="o">)</span>
</span><span class='line'>Result: PASS
</span><span class='line'>Wrote JSON-MergePatch-0.01.tar.gz
</span><span class='line'>Upload to CPAN
</span><span class='line'>Release to CPAN ? <span class="o">[</span>y/n<span class="o">]</span>   y
</span><span class='line'>missing user argument at
</span></code></pre></td></tr></table></div></figure>


<p>リリースバージョンの確認と、 CPAN にリリースするかの確認に答えていざリリース、と思いきや</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>missing user argument at
</span></code></pre></td></tr></table></div></figure>


<p>と怒られました。</p>

<p>どうやら <code>~/.pause</code> ファイルに PAUSE のユーザー情報を記載する必要があるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim ~/.pause
</span><span class='line'><span class="nv">$ </span>cat ~/.pause
</span><span class='line'>user SOJIRO
</span><span class='line'>password your_password
</span></code></pre></td></tr></table></div></figure>


<p>再度実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>Next Release? <span class="o">[</span>0.01<span class="o">]</span>
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>...
</span><span class='line'>All tests successful.
</span><span class='line'><span class="nv">Files</span><span class="o">=</span>8, <span class="nv">Tests</span><span class="o">=</span>67,  <span class="m">0</span> wallclock secs <span class="o">(</span> 0.04 usr  0.03 sys +  0.18 cusr  0.05 <span class="nv">csys</span> <span class="o">=</span>  0.30 CPU<span class="o">)</span>
</span><span class='line'>Result: PASS
</span><span class='line'>Wrote JSON-MergePatch-0.01.tar.gz
</span><span class='line'>Upload to CPAN
</span><span class='line'>Release to CPAN ? <span class="o">[</span>y/n<span class="o">]</span>   y
</span><span class='line'>registering upload with PAUSE web server
</span><span class='line'>POSTing upload <span class="k">for</span> /user/home_directory/git/cpan/JSON-MergePatch/.build/ilpDOKuE/JSON-MergePatch-0.01.tar.gz to https://pause.perl.org/pause/authenquery
</span><span class='line'>PAUSE add message sent ok <span class="o">[</span>200<span class="o">]</span>
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git commit -a -m Checking in changes prior to tagging of version 0.01.
</span><span class='line'>Changelog diff is:
</span><span class='line'>diff --git a/Changes b/Changes
</span><span class='line'>index 643c7bc..dae7daa 100644
</span><span class='line'>--- a/Changes
</span><span class='line'>+++ b/Changes
</span><span class='line'>@@ -2,5 +2,7 @@ Revision <span class="nb">history </span><span class="k">for</span> Perl extension JSON-MergePatch
</span><span class='line'>
</span><span class='line'> <span class="o"></span>
</span><span class='line'>
</span><span class='line'>+0.01 2015-07-02T18:29:20Z
</span><span class='line'>+
</span><span class='line'>     - original version
</span><span class='line'>
</span><span class='line'><span class="o">[</span>master 3bf0db2<span class="o">]</span> Checking in changes prior to tagging of version 0.01.
</span><span class='line'>
</span><span class='line'> <span class="m">2</span> files changed, <span class="m">17</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletion<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>Pushing to origin
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git push origin master
</span><span class='line'>Counting objects: 7, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to <span class="m">8</span> threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="m">831</span> bytes <span class="p">|</span> <span class="m">0</span> bytes/s, <span class="k">done</span>.
</span><span class='line'>Total <span class="m">4</span> <span class="o">(</span>delta 2<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:sojiro14/JSON-MergePatch.git
</span><span class='line'>
</span><span class='line'>   9c8c207..3bf0db2  master -&gt; master
</span><span class='line'>
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git tag 0.01
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git push origin tag 0.01
</span><span class='line'>Total <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:sojiro14/JSON-MergePatch.git
</span><span class='line'>
</span><span class='line'> * <span class="o">[</span>new tag<span class="o">]</span>         0.01 -&gt; 0.01
</span><span class='line'>
</span><span class='line'>Removing /user/home_directory/git/cpan/JSON-MergePatch/.build/ilpDOKuE
</span></code></pre></td></tr></table></div></figure>


<p>テストが実行された後、CPAN にリリースされました。最後にその時点の tag が切られて完了。</p>

<p>ついに CPAN モジュールをリリースしてしまいました。メンテナンスちゃんとしなくては。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></li>
<li><a href="http://hotolab.net/blog/first_minil/">はじめてのCPAN Authorになろうとして困ったメモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPAN モジュールのための雛形を作る]]></title>
    <link href="http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module/"/>
    <updated>2015-07-02T00:13:24+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module</id>
    <content type="html"><![CDATA[<p>いよいよ CPAN モジュールを作ろうと思います。</p>

<p>しかし既存の CPAN モジュールを見てみると本体のプログラムの他に見慣れないファイルがちらほら。。。</p>

<p>正直どんなファイル群で CPAN モジュールを構成すれば良いのか分かっていないわけです。</p>

<p>そんな悩みを解決してくれたのが <strong>Minilla</strong> モジュールです。</p>

<h2>Minilla のインストール</h2>

<p> <strong>Minilla</strong> は CPAN モジュールなので <code>cpanm</code> コマンドでインストールできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm Minilla
</span><span class='line'>--&gt; Working on Minilla
</span><span class='line'>Fetching http://cpan.metacpan.org/authors/id/T/TO/TOKUHIROM/Minilla-v2.4.1.tar.gz ... OK
</span><span class='line'>Configuring Minilla-v2.4.1 ... OK
</span><span class='line'>...
</span><span class='line'>Building and testing Minilla-v2.4.1 ... OK
</span><span class='line'>Successfully installed Minilla-v2.4.1
</span><span class='line'><span class="m">11</span> distributions installed
</span></code></pre></td></tr></table></div></figure>


<h2>雛形の作成</h2>

<p> <strong>Minilla</strong> がインストールできたら早速 CPAN モジュールの雛形を作ります。 <code>minil new Your::Module</code> で作成できます。</p>

<p>今回は <strong>JSON::MergePatch</strong> というモジュールを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cd</span> ~/git/cpan
</span><span class='line'><span class="nv">$ </span>minil new JSON::MergePatch
</span><span class='line'>Writing lib/JSON/MergePatch.pm
</span><span class='line'>Writing Changes
</span><span class='line'>Writing t/00_compile.t
</span><span class='line'>Writing .travis.yml
</span><span class='line'>Writing .gitignore
</span><span class='line'>Writing LICENSE
</span><span class='line'>Writing cpanfile
</span><span class='line'>Initializing git JSON::MergePatch
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git init
</span><span class='line'>Initialized empty Git repository in /user/home_directory/git/cpan/JSON-MergePatch/.git/
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: It<span class="s1">&#39;s new $module</span>
</span><span class='line'><span class="s1">Version: 0.01</span>
</span><span class='line'><span class="s1">fatal: bad default revision &#39;</span>HEAD<span class="err">&#39;</span>
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git add .
</span><span class='line'>Finished to create JSON::MergePatch
</span></code></pre></td></tr></table></div></figure>


<p>これで雛形ができました。</p>

<p>そしてこれから雛形を編集していくわけですが、自分で編集するのは基本的に以下のファイルのみです。</p>

<ul>
<li>lib/ 配下のプログラム</li>
<li>t/ 配下のテストプラグラム</li>
<li>cpanfile</li>
</ul>


<p>以下のファイルはそれぞれ <code>minil hoge</code> コマンド実行時に自動で編集されます。</p>

<ul>
<li>Changes: リリース時に更新される</li>
<li>META.json: cpanfile に合わせて更新される</li>
<li>README.md: lib/Your/Module.pm の記述から更新される</li>
</ul>


<h2>つづく</h2>

<p>次回はいよいよ CPAN へ公開する際の手順を書こうと思います。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewをupdateしよう]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/19/update-homebrew/"/>
    <updated>2015-05-19T23:39:53+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/19/update-homebrew</id>
    <content type="html"><![CDATA[<p>以前の記事で Homebrew を使って Docker のもろもろをインストールしたが、実はそのときインストールされたツールのバージョンが古く、それが原因で作業が少し詰まった。</p>

<p>そんなときは Homebrew の update である。</p>

<h2>Homebrew を update する</h2>

<p>おもむろに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span></code></pre></td></tr></table></div></figure>


<p>新しい FORMULA 、更新された FORMULA 、削除された FORMULA の一覧が表示されて Homebrew の update が完了する</p>

<h2>古いモジュールの upgrade</h2>

<p>Homebrew を update しただけでは、すでにインストールされているモジュールは新しくならない</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew upgrade <span class="o">[</span>FORMULA<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>で最新バージョンに upgrade する</p>

<p>今後 Homebrew を使うときは参照する FORMULA のバージョンも気にしたい</p>
]]></content>
  </entry>
  
</feed>
