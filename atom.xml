<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2015-07-07T23:58:37+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CPAN モジュールのリリース]]></title>
    <link href="http://sojiro14.github.io/blog/2015/07/06/release-cpan-module/"/>
    <updated>2015-07-06T02:19:14+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/07/06/release-cpan-module</id>
    <content type="html"><![CDATA[<p>上司にお膳立てされ、後輩にお尻を叩かれ、やっとのことで CPAN モジュールをリリースしました。</p>

<p>前回のエントリに続き、リリースの手順を記します。</p>

<h2>モジュールの作成</h2>

<p>ここがコアの部分ですが、内容は作るモジュールに依るので割愛。編集すべきは以下のファイルです。</p>

<ul>
<li>lib/ 配下のプログラム</li>
<li>t/ 配下のテストプラグラム</li>
<li>cpanfile</li>
</ul>


<p>cpanfile の作成は <code>scan-prereqs-cpanfile</code> を使うと便利です。</p>

<p>このコマンドは <strong>App::scan_prereqs_cpanfile</strong> モジュールで提供されています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cpanm App::scan_prereqs_cpanfile
</span><span class='line'>scan-prereqs-cpanfile &gt; cpanfile
</span></code></pre></td></tr></table></div></figure>


<h2>テスト</h2>

<p>モジュールの作成ができたら test を実行しますが、このとき <code>minil test</code> コマンドを使うと Changes や META.json、README.md が自動で編集されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>minil <span class="nb">test</span>
</span><span class='line'>Creating working directory: /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
</span><span class='line'>cp Build.PL /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/Build.PL
</span><span class='line'>cp Changes /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/Changes
</span><span class='line'>cp LICENSE /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/LICENSE
</span><span class='line'>cp META.json /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/META.json
</span><span class='line'>cp README.md /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/README.md
</span><span class='line'>cp cpanfile /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/cpanfile
</span><span class='line'>cp lib/JSON/MergePatch.pm /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/lib/JSON/MergePatch.pm
</span><span class='line'>cp minil.toml /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/minil.toml
</span><span class='line'>cp t/00_compile.t /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/t/00_compile.t
</span><span class='line'>Building /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: It<span class="s1">&#39;s new $module</span>
</span><span class='line'><span class="s1">Version: 0.01</span>
</span><span class='line'><span class="s1">fatal: bad default revision &#39;</span>HEAD<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">Writing MANIFEST file</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/minimum_version.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/cpan_meta.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/pod.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/spelling.t</span>
</span><span class='line'><span class="s1">Writing release tests: xt/minilla/permissions.t</span>
</span><span class='line'><span class="s1">[5DuYQ9x7] $ perl -I. Build.PL</span>
</span><span class='line'><span class="s1">Creating new &#39;</span>Build<span class="s1">&#39; script for &#39;</span>JSON-MergePatch<span class="s1">&#39; version &#39;</span>0.01<span class="err">&#39;</span>
</span><span class='line'><span class="o">[</span>5DuYQ9x7<span class="o">]</span> <span class="nv">$ </span>perl -I. Build build
</span><span class='line'>cp lib/JSON/MergePatch.pm blib/lib/JSON/MergePatch.pm
</span><span class='line'>t/00_compile.t .. ok
</span><span class='line'>All tests successful.
</span><span class='line'><span class="nv">Files</span><span class="o">=</span>1, <span class="nv">Tests</span><span class="o">=</span>1,  <span class="m">0</span> wallclock secs <span class="o">(</span> 0.01 usr  0.01 sys +  0.03 cusr  0.01 <span class="nv">csys</span> <span class="o">=</span>  0.06 CPU<span class="o">)</span>
</span><span class='line'>Result: PASS
</span><span class='line'>Removing /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
</span></code></pre></td></tr></table></div></figure>


<h2>リリース</h2>

<p>テストが通ったらいよいよリリースします。</p>

<p>CPAN へのリリースには PAUSE ID が必要です。取得方法は<a href="http://blog.sojiro.me/blog/2015/05/17/get-pause-id/">こちら</a>。</p>

<p>リリースには <code>minil release</code> コマンドを使います。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Release engineering requires Version::Next, but it is not available. Please install Version::Next using your preferred CPAN client at ...
</span></code></pre></td></tr></table></div></figure>


<p> <strong>Version::Next</strong> がないと怒られたので入れて再度実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm Version::Next
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Release engineering requires CPAN::Uploader, but it is not available. Please install CPAN::Uploader using your preferred CPAN client at ...
</span></code></pre></td></tr></table></div></figure>


<p>今度は <strong>CPAN::Uploader</strong> がないと怒られたので入れて再度実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm CPAN::Uploader
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>Next Release? <span class="o">[</span>0.01<span class="o">]</span>
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>...
</span><span class='line'>All tests successful.
</span><span class='line'><span class="nv">Files</span><span class="o">=</span>8, <span class="nv">Tests</span><span class="o">=</span>67,  <span class="m">0</span> wallclock secs <span class="o">(</span> 0.04 usr  0.03 sys +  0.18 cusr  0.04 <span class="nv">csys</span> <span class="o">=</span>  0.29 CPU<span class="o">)</span>
</span><span class='line'>Result: PASS
</span><span class='line'>Wrote JSON-MergePatch-0.01.tar.gz
</span><span class='line'>Upload to CPAN
</span><span class='line'>Release to CPAN ? <span class="o">[</span>y/n<span class="o">]</span>   y
</span><span class='line'>missing user argument at
</span></code></pre></td></tr></table></div></figure>


<p>リリースバージョンの確認と、 CPAN にリリースするかの確認に答えていざリリース、と思いきや</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>missing user argument at
</span></code></pre></td></tr></table></div></figure>


<p>と怒られました。</p>

<p>どうやら <code>~/.pause</code> ファイルに PAUSE のユーザー情報を記載する必要があるようです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim ~/.pause
</span><span class='line'><span class="nv">$ </span>cat ~/.pause
</span><span class='line'>user SOJIRO
</span><span class='line'>password your_password
</span></code></pre></td></tr></table></div></figure>


<p>再度実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>minil release
</span><span class='line'>
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>Next Release? <span class="o">[</span>0.01<span class="o">]</span>
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'>...
</span><span class='line'>All tests successful.
</span><span class='line'><span class="nv">Files</span><span class="o">=</span>8, <span class="nv">Tests</span><span class="o">=</span>67,  <span class="m">0</span> wallclock secs <span class="o">(</span> 0.04 usr  0.03 sys +  0.18 cusr  0.05 <span class="nv">csys</span> <span class="o">=</span>  0.30 CPU<span class="o">)</span>
</span><span class='line'>Result: PASS
</span><span class='line'>Wrote JSON-MergePatch-0.01.tar.gz
</span><span class='line'>Upload to CPAN
</span><span class='line'>Release to CPAN ? <span class="o">[</span>y/n<span class="o">]</span>   y
</span><span class='line'>registering upload with PAUSE web server
</span><span class='line'>POSTing upload <span class="k">for</span> /user/home_directory/git/cpan/JSON-MergePatch/.build/ilpDOKuE/JSON-MergePatch-0.01.tar.gz to https://pause.perl.org/pause/authenquery
</span><span class='line'>PAUSE add message sent ok <span class="o">[</span>200<span class="o">]</span>
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: JSON Merge Patch implementation
</span><span class='line'>Version: 0.01
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git commit -a -m Checking in changes prior to tagging of version 0.01.
</span><span class='line'>Changelog diff is:
</span><span class='line'>diff --git a/Changes b/Changes
</span><span class='line'>index 643c7bc..dae7daa 100644
</span><span class='line'>--- a/Changes
</span><span class='line'>+++ b/Changes
</span><span class='line'>@@ -2,5 +2,7 @@ Revision <span class="nb">history </span><span class="k">for</span> Perl extension JSON-MergePatch
</span><span class='line'>
</span><span class='line'> <span class="o"></span>
</span><span class='line'>
</span><span class='line'>+0.01 2015-07-02T18:29:20Z
</span><span class='line'>+
</span><span class='line'>     - original version
</span><span class='line'>
</span><span class='line'><span class="o">[</span>master 3bf0db2<span class="o">]</span> Checking in changes prior to tagging of version 0.01.
</span><span class='line'>
</span><span class='line'> <span class="m">2</span> files changed, <span class="m">17</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletion<span class="o">(</span>-<span class="o">)</span>
</span><span class='line'>Pushing to origin
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git push origin master
</span><span class='line'>Counting objects: 7, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to <span class="m">8</span> threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>4/4<span class="o">)</span>, <span class="m">831</span> bytes <span class="p">|</span> <span class="m">0</span> bytes/s, <span class="k">done</span>.
</span><span class='line'>Total <span class="m">4</span> <span class="o">(</span>delta 2<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:sojiro14/JSON-MergePatch.git
</span><span class='line'>
</span><span class='line'>   9c8c207..3bf0db2  master -&gt; master
</span><span class='line'>
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git tag 0.01
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git push origin tag 0.01
</span><span class='line'>Total <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>To git@github.com:sojiro14/JSON-MergePatch.git
</span><span class='line'>
</span><span class='line'> * <span class="o">[</span>new tag<span class="o">]</span>         0.01 -&gt; 0.01
</span><span class='line'>
</span><span class='line'>Removing /user/home_directory/git/cpan/JSON-MergePatch/.build/ilpDOKuE
</span></code></pre></td></tr></table></div></figure>


<p>テストが実行された後、CPAN にリリースされました。最後にその時点の tag が切られて完了。</p>

<p>ついに CPAN モジュールをリリースしてしまいました。メンテナンスちゃんとしなくては。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></li>
<li><a href="http://hotolab.net/blog/first_minil/">はじめてのCPAN Authorになろうとして困ったメモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPAN モジュールのための雛形を作る]]></title>
    <link href="http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module/"/>
    <updated>2015-07-02T00:13:24+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module</id>
    <content type="html"><![CDATA[<p>いよいよ CPAN モジュールを作ろうと思います。</p>

<p>しかし既存の CPAN モジュールを見てみると本体のプログラムの他に見慣れないファイルがちらほら。。。</p>

<p>正直どんなファイル群で CPAN モジュールを構成すれば良いのか分かっていないわけです。</p>

<p>そんな悩みを解決してくれたのが <strong>Minilla</strong> モジュールです。</p>

<h2>Minilla のインストール</h2>

<p> <strong>Minilla</strong> は CPAN モジュールなので <code>cpanm</code> コマンドでインストールできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm Minilla
</span><span class='line'>--&gt; Working on Minilla
</span><span class='line'>Fetching http://cpan.metacpan.org/authors/id/T/TO/TOKUHIROM/Minilla-v2.4.1.tar.gz ... OK
</span><span class='line'>Configuring Minilla-v2.4.1 ... OK
</span><span class='line'>...
</span><span class='line'>Building and testing Minilla-v2.4.1 ... OK
</span><span class='line'>Successfully installed Minilla-v2.4.1
</span><span class='line'><span class="m">11</span> distributions installed
</span></code></pre></td></tr></table></div></figure>


<h2>雛形の作成</h2>

<p> <strong>Minilla</strong> がインストールできたら早速 CPAN モジュールの雛形を作ります。 <code>minil new Your::Module</code> で作成できます。</p>

<p>今回は <strong>JSON::MergePatch</strong> というモジュールを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cd</span> ~/git/cpan
</span><span class='line'><span class="nv">$ </span>minil new JSON::MergePatch
</span><span class='line'>Writing lib/JSON/MergePatch.pm
</span><span class='line'>Writing Changes
</span><span class='line'>Writing t/00_compile.t
</span><span class='line'>Writing .travis.yml
</span><span class='line'>Writing .gitignore
</span><span class='line'>Writing LICENSE
</span><span class='line'>Writing cpanfile
</span><span class='line'>Initializing git JSON::MergePatch
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git init
</span><span class='line'>Initialized empty Git repository in /user/home_directory/git/cpan/JSON-MergePatch/.git/
</span><span class='line'>Retrieving meta data from lib/JSON/MergePatch.pm.
</span><span class='line'>Name: JSON::MergePatch
</span><span class='line'>Abstract: It<span class="s1">&#39;s new $module</span>
</span><span class='line'><span class="s1">Version: 0.01</span>
</span><span class='line'><span class="s1">fatal: bad default revision &#39;</span>HEAD<span class="err">&#39;</span>
</span><span class='line'><span class="o">[</span>JSON-MergePatch<span class="o">]</span> <span class="nv">$ </span>git add .
</span><span class='line'>Finished to create JSON::MergePatch
</span></code></pre></td></tr></table></div></figure>


<p>これで雛形ができました。</p>

<p>そしてこれから雛形を編集していくわけですが、自分で編集するのは基本的に以下のファイルのみです。</p>

<ul>
<li>lib/ 配下のプログラム</li>
<li>t/ 配下のテストプラグラム</li>
<li>cpanfile</li>
</ul>


<p>以下のファイルはそれぞれ <code>minil hoge</code> コマンド実行時に自動で編集されます。</p>

<ul>
<li>Changes: リリース時に更新される</li>
<li>META.json: cpanfile に合わせて更新される</li>
<li>README.md: lib/Your/Module.pm の記述から更新される</li>
</ul>


<h2>つづく</h2>

<p>次回はいよいよ CPAN へ公開する際の手順を書こうと思います。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homebrewをupdateしよう]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/19/update-homebrew/"/>
    <updated>2015-05-19T23:39:53+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/19/update-homebrew</id>
    <content type="html"><![CDATA[<p>以前の記事で Homebrew を使って Docker のもろもろをインストールしたが、実はそのときインストールされたツールのバージョンが古く、それが原因で作業が少し詰まった。</p>

<p>そんなときは Homebrew の update である。</p>

<h2>Homebrew を update する</h2>

<p>おもむろに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span></code></pre></td></tr></table></div></figure>


<p>新しい FORMULA 、更新された FORMULA 、削除された FORMULA の一覧が表示されて Homebrew の update が完了する</p>

<h2>古いモジュールの upgrade</h2>

<p>Homebrew を update しただけでは、すでにインストールされているモジュールは新しくならない</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew upgrade <span class="o">[</span>FORMULA<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>で最新バージョンに upgrade する</p>

<p>今後 Homebrew を使うときは参照する FORMULA のバージョンも気にしたい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Schema のバリデーション]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/18/validate-json-schema/"/>
    <updated>2015-05-18T23:41:47+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/18/validate-json-schema</id>
    <content type="html"><![CDATA[<p>JSON Schema を勉強中であります。</p>

<p>その名の通り JSON でリソースそのものやリソースの操作まで表現できる面白いツールだと思います。</p>

<p>しかし、 JSON Schema は往々にして複雑になりがちで、書く量が多くなると typo も増えてきます。</p>

<p>そこで今回は JSON Schema のバリデーションに使えるツールをメモ程度に書いておきます。</p>

<h2>validate-schema コマンド</h2>

<p>まずは <code>validate-schema</code> コマンドから。簡単なバリデーションをしてくれる。</p>

<p>gem の json_schema パッケージに入っているのでインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install json_schema
</span><span class='line'>Password:
</span><span class='line'>Fetching: json_schema-0.6.0.gem <span class="o">(</span>100%<span class="o">)</span>
</span><span class='line'>Successfully installed json_schema-0.6.0
</span><span class='line'>...
</span><span class='line'><span class="m">1</span> gem installed
</span></code></pre></td></tr></table></div></figure>


<p>インストールできたらオプションに <code>-d</code> をつけて実行</p>

<p>これがバリデーションに通った例</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>validate-schema -d json_schema/directory/test.json
</span><span class='line'>json_schema/directory/test.json is valid.
</span></code></pre></td></tr></table></div></figure>


<p>バリデーションに落ちるとこうなる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>validate-schema -d json_schema/directory/test.json
</span><span class='line'>json_schema/directory/test.json: Invalid JSON. Try to validate using <span class="sb">`</span>jsonlint<span class="sb">`</span>.
</span></code></pre></td></tr></table></div></figure>


<p>なんと別のツールを使って確かめろということなので、以下につづく。</p>

<h2>jsonlint コマンド</h2>

<p>さて、 validate-schema に jsonlint を使え、と言われたので早速インストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install jsonlint -g
</span><span class='line'>npm http GET https://registry.npmjs.org/jsonlint
</span><span class='line'>npm http <span class="m">200</span> https://registry.npmjs.org/jsonlint
</span><span class='line'>...
</span><span class='line'>/usr/local/bin/jsonlint -&gt; /usr/local/lib/node_modules/jsonlint/lib/cli.js
</span><span class='line'>jsonlint@1.6.2 /usr/local/lib/node_modules/jsonlint
</span><span class='line'>├── nomnom@1.8.1 <span class="o">(</span>underscore@1.6.0, chalk@0.4.0<span class="o">)</span>
</span><span class='line'>└── JSV@4.0.2
</span></code></pre></td></tr></table></div></figure>


<p>インストールが完了したら早速チェック</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>jsonlint json_schema/directory/test.json
</span><span class='line'><span class="o">[</span>Error: Parse error on line 20:
</span><span class='line'>...<span class="err">&quot;</span><span class="o">]</span>,                <span class="o">}</span>            <span class="o">}</span>,
</span><span class='line'>----------------------^
</span><span class='line'>Expecting <span class="s1">&#39;STRING&#39;</span>, got <span class="s1">&#39;}&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>今度はバリデーションに落ちる理由と場所を示してくれるのですぐに修正できる</p>

<p>だいたいバリデーションに落ちるときは <code>,</code> のつけ過ぎが多い</p>

<p>これらのツールで無駄にハマる時間をなくしたいものです。</p>

<h2>validate-schema コマンド（再）</h2>

<p>今回は JSON Schema 単体のチェックだったので <code>validate-schema</code> コマンドが使い勝手悪く見えるので補足</p>

<p>もともとは、ある JSON データが JSON Schema に則っているかのバリデーションをするツールである</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>validate-schema json_schema/check.json test.json
</span><span class='line'>test.json#/emotion: failed schema <span class="c">#/properties/emotion: embarrassment is not a member of [&quot;pleasure&quot;, &quot;anger&quot;, &quot;sadness&quot;, &quot;enjoyment&quot;].</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<ul>
<li><a href="https://github.com/brandur/json_schema">validate-schema</a></li>
<li><a href="https://www.npmjs.com/package/jsonlint">jsonlint</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PAUSE ID の取得]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/17/get-pause-id/"/>
    <updated>2015-05-17T23:23:14+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/17/get-pause-id</id>
    <content type="html"><![CDATA[<p>いま私は日本の Perl シーンにおける名立たるプログラマの方々の元で仕事させていただくという大変ありがたい立場にいるのですが、常々</p>

<p><strong> OSS に対する活動が成長の大きな糧になるからチャレンジすべし </strong></p>

<p>とアドバイスを受けています。</p>

<p>ところが初めてその言葉を受けてから既に1年以上経とうというのに何もしていない。これは本当にいかんと思ってとにかく CAPN に貢献してみようと。</p>

<p>そこで調べてみると PAUSE ID なるものが必要なようなので取得までの過程をここへメモします</p>

<h2>PAUSE ID の取得</h2>

<p>PAUSE は The Perl Authors Upload Server の略称で、ここから CPAN へのアップなどするよう</p>

<p><a href="http://pause.perl.org/pause/query?ACTION=request_id">ここ</a> から登録を開始する</p>

<p>各項目に入力してアカウント申請を行う</p>

<p>full name の欄はそれっぽい名前じゃないとはじかれるが、後から変えられる</p>

<p>申請を行うと、しばらくしてアカウント発行の通知が登録したメールアドレスに届く</p>

<p>この通知は人によって届くまでの時間にばらつきがあるようだが、今回は申請したその日のうちに来た</p>

<p>通知にはパスワード変更ページへのリンクと暫定のパスワードが記載されているので、登録した ID と暫定パスワードで Basic 認証を突破してパスワードを設定する</p>

<p>アカウントが発行されると Edit Account Info というメニューへアクセスできるようになる</p>

<p>ここに</p>

<blockquote><p>The email address [id]@cpan.org should be configured to forward mail to &hellip;</p></blockquote>

<p>という項目があるので、 <code>[id]@cpan.org</code> へのメールを受け取るメールアドレスを設定する</p>

<p>ここで設定しておかないと後々 <code>[id]@cpan.org</code> に対するメールが受け取れず不便を被るので要設定とのこと</p>

<h2>Gravatar の設定</h2>

<p>Gravatar は Email アカウントにアイコンを紐づけて様々なサービスで使えるようにするサービスで、 GitHub などでも使われている</p>

<p><a href="https://ja.gravatar.com/">https://ja.gravatar.com/</a></p>

<p>Gravatar に PAUSE ID に紐づいたアドレスでアイコンを設定することで CPAN のアカウントへアイコンを設定することができる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[id]@cpan.org  # 設定するメールアドレス</span></code></pre></td></tr></table></div></figure>


<p>既に Gravatar のアカウントがある場合は「メールアドレスの追加」から上記アドレスを追加すればよい</p>

<p>新たに Gravatar のアカウントを取得する場合は注意が必要なようである。 <code>@cpan.org</code> のメールアドレスが前項の PAUSE ID 取得の際に自分のメールアドレスへ転送されるよう設定してからでないと、メールアドレスの認証が取れず、 Gravatar のアカウント取得に失敗するようだ。</p>

<p><img src="http://sojiro14.github.io/images/cpan/gravatar.png"></p>

<p>Gravatar の設定が済むと PAUSE アカウントに設定したアイコンが表示されるようになる</p>

<p><img src="http://sojiro14.github.io/images/cpan/sojiro.png"></p>

<p>さて、アカウントは取得した。後はコードを書いて上げるだけ。</p>

<p>やるしかないのです。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51284970.html">こんな僕が CPAN Author （一応） になるまで。</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webからデバイスのカメラを起動する]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/13/start-up-a-web-camera-via-web/"/>
    <updated>2015-05-13T18:58:45+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/13/start-up-a-web-camera-via-web</id>
    <content type="html"><![CDATA[<p>Web からデバイスのカメラを起動してみたいと思いたち、少し調べて見たことのメモ</p>

<h2>準備</h2>

<p>以前のエントリ <a href="http://blog.sojiro.me/blog/2015/01/07/making-a-web-server-with-node-dot-js/">Node.jsを使ってWeb Serverを作ってみました</a> で立てたサーバーで実験してみます</p>

<h2>ベースとなるコード</h2>

<p>このコードに手を入れていきます</p>

<figure class='code'><figcaption><span>web.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;title&gt;Hello World&lt;/title&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="o">****</span><span class="p">,</span> <span class="s1">&#39;xxx.xx.x.xxx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;server listening...&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コードの全体像</h2>

<p>最終的なコードはこちら。かなり手抜きしてます</p>

<p><a href="http://python-gazo.blog.jp/html5/javascript/webcamera">こちら</a> を参考にさせていただきました</p>

<figure class='code'><figcaption><span>web_camera.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_html</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span><span class="cm">/*</span>
</span><span class='line'><span class="cm">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="cm">&lt;html&gt;</span>
</span><span class='line'><span class="cm">&lt;head&gt;</span>
</span><span class='line'><span class="cm">  &lt;title&gt;Web Camera&lt;/title&gt;</span>
</span><span class='line'><span class="cm">  &lt;script type=&quot;text/javascript&quot;&gt;</span>
</span><span class='line'><span class="cm">function capCamera(){</span>
</span><span class='line'><span class="cm">  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;</span>
</span><span class='line'><span class="cm">    window.URL = window.URL || window.webkitURL;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  var video = document.getElementById(&quot;camera&quot;);</span>
</span><span class='line'><span class="cm">  var localStream = null;</span>
</span><span class='line'><span class="cm">  navigator.getUserMedia({video: true, audio: false},</span>
</span><span class='line'><span class="cm">  function(stream) {</span>
</span><span class='line'><span class="cm">    console.log(stream);</span>
</span><span class='line'><span class="cm">    video.src = window.URL.createObjectURL(stream);</span>
</span><span class='line'><span class="cm">  },</span>
</span><span class='line'><span class="cm">  function(err) {</span>
</span><span class='line'><span class="cm">    console.log(err);</span>
</span><span class='line'><span class="cm">  }</span>
</span><span class='line'><span class="cm">  );</span>
</span><span class='line'><span class="cm">} </span>
</span><span class='line'><span class="cm">  &lt;/script&gt;</span>
</span><span class='line'><span class="cm">&lt;/head&gt;</span>
</span><span class='line'><span class="cm">&lt;body&gt;</span>
</span><span class='line'><span class="cm">   &lt;input type=&quot;button&quot;  value=&quot;Web Camera&quot; onClick=&quot;capCamera()&quot;&gt;</span>
</span><span class='line'><span class="cm">   &lt;br&gt;</span>
</span><span class='line'><span class="cm">   &lt;video id=&quot;camera&quot; width=&quot;640&quot; height=&quot;480&quot; autoplay=&quot;1&quot; &gt;&lt;/video&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;/body&gt;</span>
</span><span class='line'><span class="cm">&lt;/html&gt;</span>
</span><span class='line'><span class="cm">*/</span><span class="p">}).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\n)/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">_html</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="o">****</span><span class="p">,</span> <span class="s1">&#39;xxx.xx.x.xxx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;server listening...&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>HTML 部分</h2>

<p>HTML の部分をみてみます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>   <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span>  <span class="na">value=</span><span class="s">&quot;Web Camera&quot;</span> <span class="na">onClick=</span><span class="s">&quot;capCamera()&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;br&gt;</span>
</span><span class='line'>   <span class="nt">&lt;video</span> <span class="na">id=</span><span class="s">&quot;camera&quot;</span> <span class="na">width=</span><span class="s">&quot;640&quot;</span> <span class="na">height=</span><span class="s">&quot;480&quot;</span> <span class="na">autoplay=</span><span class="s">&quot;1&quot;</span> <span class="nt">&gt;&lt;/video&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>構成はボタンと、カメラからの映像をキャプチャする範囲の2つだけ</p>

<p>ボタンには <code>capCamera()</code> という関数が紐づけられています</p>

<h2>JavaScript 部分</h2>

<p>次に JavaScript の部分をみてみます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">capCamera</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span> <span class="o">||</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span><span class="p">;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitURL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">video</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;camera&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">localStream</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span><span class="nx">video</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">audio</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで <code>navigator</code> インターフェースの <code>getUserMedia()</code> メソッドを使用しているのがわかります</p>

<h3>getUserMedia の構文</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span> <span class="p">(</span> <span class="nx">constraints</span><span class="p">,</span> <span class="nx">successCallback</span><span class="p">,</span> <span class="nx">errorCallback</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>引数           </th>
<th>必須 / オプショナル            </th>
<th> 説明                                                                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td>constraints    </td>
<td>必須                           </td>
<td> successCallback に渡されるLocalMediaStream オブジェクトがサポートするメディアタイプ。</td>
</tr>
<tr>
<td>successCallback</td>
<td>必須                           </td>
<td> LocalMediaStream オブジェクトが取得できた場合、呼び出されるコールバック関数。        </td>
</tr>
<tr>
<td>errorCallback  </td>
<td>オプショナル (Firefox では必須)</td>
<td> 呼び出しが失敗した際に実行されるコールバック関数。最近の Firefox では必須となっています。省略された場合、 NS_ERROR_XPC_NOT_ENOUGH_ARGS error がスローされます。</td>
</tr>
</tbody>
</table>


<h3>constraints</h3>

<p>video, audio の二つの属性に対して真偽値を指定する</p>

<h3>successcallback</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_API#LocalMediaStream">LocalMediaStream</a> が引数として渡されるので <code>window.URL.createObjectURL()</code> メソッドにそのまま渡してオブジェクトの URL を取得する</p>

<p>このように取得したビデオストリームの URL を <code>video</code> の DOM に渡すことで <code>video</code> 領域にビデオを表示します</p>

<h2>JavaScript 内のヒアドキュメント</h2>

<p>今回は横着して <code>web_camera.js</code> の中に HTML をすべてヒアドキュメントで記述しました JavaScript 内のヒアドキュメントに関してはちょっとしたテクニックがあるようなのでそれはまた次の機会に書こうと思います。</p>

<p>Web からデバイスのカメラを操作できるというのはとても面白いのですが、今回扱ったメソッドはまだまだ一部のブラウザでしかサポートされていないので、特にモバイルで使えるようになったらもっと面白くなるのに、という感想をもってこのエントリを終わります。</p>

<h2>参照</h2>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/Navigator/getUserMedia">Navigator.getUserMedia</a></li>
<li><a href="http://python-gazo.blog.jp/html5/javascript/webcamera">WebRTCでカメラの起動とキャプチャ</a></li>
<li><a href="http://qiita.com/ampersand/items/c6c773ba7ae9115856d0">SafariでもエラーにならないJavascriptのヒアドキュメントの書き方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xdg-open コマンドとは]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/12/what-is-xdg-open-command/"/>
    <updated>2015-05-12T23:55:57+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/12/what-is-xdg-open-command</id>
    <content type="html"><![CDATA[<p>以前 <a href="http://blog.sojiro.me/blog/2015/05/10/the-second-step-of-yeoman/">初めてのYeoman (Grunt/Bowerを使ってみる)</a> というエントリで Grunt を実行したときに</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Warning: Command failed: /home/sojiro/yeoman/angular_fullstack/node_modules/open/vendor/xdg-open: line 584: xdg-mime: コマンドが見つかりません
</span></code></pre></td></tr></table></div></figure>


<p>と怒られたことがあったので <code>xdg-open</code> コマンドについて少し調べてみます</p>

<h2>xdg-open コマンドのインストール</h2>

<p>xdg-open の実体はシェルスクリプトである</p>

<p>すんなりインストールできるかと思いきや普段の CentOS に入れるのに手こずってしまった</p>

<p>どうやら Ubuntu との相性が良いようなので Vagrant で Ubuntu を立ち上げてそこでインストールしてみる</p>

<h3>Ubuntu のセットアップ</h3>

<p>Vagrant で Ubuntu 環境をセットアップする</p>

<p>まずは box のインストールから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box add ubuntu http://goo.gl/8kWkm
</span><span class='line'><span class="o">==</span>&gt; box: Adding box <span class="s1">&#39;ubuntu&#39;</span> <span class="o">(</span>v0<span class="o">)</span> <span class="k">for</span> provider:
</span><span class='line'>   box: Downloading: http://goo.gl/8kWkm
</span><span class='line'><span class="o">==</span>&gt; box: Successfully added box <span class="s1">&#39;ubuntu&#39;</span> <span class="o">(</span>v0<span class="o">)</span> <span class="k">for</span> <span class="s1">&#39;virtualbox&#39;</span>!
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>centos64 <span class="o">(</span>virtualbox, 0<span class="o">)</span>
</span><span class='line'>ubuntu   <span class="o">(</span>virtualbox, 0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>box がセットアップできたら立ち上げまで行ってしまう</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ubuntu
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>ubuntu/
</span><span class='line'><span class="nv">$ </span>vagrant init ubuntu
</span><span class='line'>A <span class="sb">`</span>Vagrantfile<span class="sb">`</span> has been placed in this directory. You are now
</span><span class='line'>ready to <span class="sb">`</span>vagrant up<span class="sb">`</span> your first virtual environment! Please <span class="nb">read</span>
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'><span class="sb">`</span>vagrantup.com<span class="sb">`</span> <span class="k">for</span> more information on using Vagrant.
</span><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Vagrantfile
</span><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">==</span>&gt; default: Importing base box <span class="s1">&#39;ubuntu&#39;</span>...
</span><span class='line'><span class="o">==</span>&gt; default: Matching MAC address <span class="k">for</span> NAT networking...
</span><span class='line'><span class="o">==</span>&gt; default: Setting the name of the VM: <span class="nv">ubuntu_default_1432117537476_54763</span>
</span><span class='line'><span class="o">==</span>&gt; default: Fixed port collision <span class="k">for</span> <span class="nv">22</span> <span class="o">=</span>&gt; 2222. Now on port 2200.
</span><span class='line'><span class="o">==</span>&gt; default: Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">==</span>&gt; default: Preparing network interfaces based on configuration...
</span><span class='line'>   default: Adapter 1: <span class="nv">nat</span>
</span><span class='line'><span class="o">==</span>&gt; default: Forwarding ports...
</span><span class='line'>   default: <span class="nv">22</span> <span class="o">=</span>&gt; <span class="m">2200</span> <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; default: Booting VM...
</span><span class='line'><span class="o">==</span>&gt; default: Waiting <span class="k">for</span> machine to boot. This may take a few minutes...
</span></code></pre></td></tr></table></div></figure>


<p>立ち上がったら以下のコマンドで Ubuntu 環境に入り、インストールの準備が完了する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Welcome to Ubuntu 12.04.1 LTS <span class="o">(</span>GNU/Linux 3.2.0-32-generic x86_64<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>* Documentation:  https://help.ubuntu.com/
</span><span class='line'>
</span><span class='line'> System information as of Wed May <span class="m">20</span> 07:30:10 BRT 2015
</span><span class='line'>
</span><span class='line'> System load:  0.0               Processes:           73
</span><span class='line'> Usage of /:   11.7% of 7.87GB   Users logged in:     0
</span><span class='line'> Memory usage: 1%                IP address <span class="k">for</span> eth0: 10.0.2.15
</span><span class='line'> Swap usage:   0%
</span><span class='line'>
</span><span class='line'> Graph this data and manage this system at https://landscape.canonical.com/
</span><span class='line'>
</span><span class='line'>New release <span class="s1">&#39;14.04.2 LTS&#39;</span> available.
</span><span class='line'>Run <span class="s1">&#39;do-release-upgrade&#39;</span> to upgrade to it.
</span></code></pre></td></tr></table></div></figure>


<h3>インストール</h3>

<p>ここからいよいよ Ubuntu に <code>xdg-open</code> をインストールしていく</p>

<p>最初から入ってたらラッキーだなーと思いつつ打ってみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xdg-open
</span><span class='line'>The program <span class="s1">&#39;xdg-open&#39;</span> is currently not installed.  You can install it by typing:
</span><span class='line'>sudo apt-get install xdg-utils
</span></code></pre></td></tr></table></div></figure>


<p>思いがけず大ヒントが返ってきたので従う</p>

<p>xdg-utils は <code>xdg-open</code> を内包するパッケージである</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install xdg-utils
</span><span class='line'>Reading package lists... Done
</span><span class='line'>Building dependency tree
</span><span class='line'>...
</span><span class='line'>E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
</span></code></pre></td></tr></table></div></figure>


<p>エラーになってしまった</p>

<p>しかしまたヒントがあるので従う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install xdg-utils --fix-missing
</span><span class='line'>Reading package lists... Done
</span><span class='line'>Building dependency tree
</span><span class='line'>...
</span><span class='line'>Extracting templates from packages: 100%
</span><span class='line'>Preconfiguring packages ...
</span><span class='line'>Selecting previously unselected package ttf-dejavu-core.
</span></code></pre></td></tr></table></div></figure>


<p>晴れてインストール完了</p>

<h2>使ってみる</h2>

<ul>
<li>テキストファイル: 普通に開ける</li>
<li>画像ファイル: 開けるメソッドがなくエラー（環境立ち上げたばかりなので）</li>
</ul>


<h3>ディレクトリを指定</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>touch <span class="nb">test</span>/file
</span><span class='line'><span class="nv">$ </span>xdg-open <span class="nb">test</span>/
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://sojiro14.github.io/images/xdg_open/directory.png"></p>

<h3>URL を指定してみる</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xdg-open http://blog.sojiro.me
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://sojiro14.github.io/images/xdg_open/blog.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>xdg-open http://google.com
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://sojiro14.github.io/images/xdg_open/google.png"></p>

<p>ブラウザはないが URL を指定すると CUI 上で Web ページが開ける</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.sojiro.me/blog/2015/05/03/the-first-step-for-vagrant/">初めてのVagrant</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのYeoman (Grunt/Bowerとは)]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/11/the-third-step-of-yeoman/"/>
    <updated>2015-05-11T23:51:11+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/11/the-third-step-of-yeoman</id>
    <content type="html"><![CDATA[<p>初めてのYeoman というタイトルでこれまで2つのエントリを投稿しました。</p>

<ul>
<li><a href="http://blog.sojiro.me/blog/2015/05/06/the-first-step-of-yeoman/">初めてのYeoman (Yoを使った雛形作成)</a></li>
<li><a href="http://blog.sojiro.me/blog/2015/05/10/the-second-step-of-yeoman/">初めてのYeoman (Grunt/Bowerを使ってみる)</a></li>
</ul>


<p>ここであらためて Grunt と Bower について書いておきます。</p>

<p>特に技術的なことはないです。</p>

<h2>Grunt とは</h2>

<blockquote><p>The JavaScript Task Runner</p></blockquote>

<p>と公式サイトに書いてある。一言で言うと自動化、とも。</p>

<p>要するに予め決められたタスクをその通りに実行してくれるツールである。
（似たようなツールとして make や rake を使ったことがある）</p>

<p>そして js 界隈で話題のツールやプラグイン、フレームワークがどんどん移り変わって行くのと同様に Grunt も gulp にとって変わられると話題になっている。</p>

<p>しかしこれは自分でやりたいことを自動化したい場合の話であって、何か自分のやりたいことを他の人がやっていたら素直にその人の作ったタスクを使わせてもらえば良いわけである。</p>

<p>（そういう意味で他の人が作った設定に多少手を加えられるほどの理解はあると嬉しいかもしれないが、それは必要になったときで良い）</p>

<p>つまり Grunt でも gulp でも、自分がやりたいことを他の人が既にやっていればそれに乗っかれば良いし、他の人がまだやっていなければ、その時点で自分が一番書きやすい方法をつかって自動化すれば良い。</p>

<p>問題は自分にやりたいこと（自動化したいこと）があるかどうかであって、自分が自分以外の何者でもない以上、それはあるはずで、それに気づいてないとか、考え続けられないから僕はまだまだ三流以下ということなんですね。</p>

<h2>Bower とは</h2>

<p>フロントエンドのパッケージマネージャーで</p>

<ul>
<li>cpan(perl)</li>
<li>gem(ruby)</li>
<li>Node.js(npm)</li>
</ul>


<p>みたいなものだと理解している</p>

<p>使い方も対して変わらないですね</p>

<h2>Yeoman</h2>

<p>ここまで Yeoman を見てきて Yeoman の要は yo のように思える</p>

<p>使う側の立場では雛形(generator)を選んで yo を実行したらやりたいことは既に決まっている</p>

<p>作る側としては最終的にどんな雛形を作るかが問題である</p>

<p>ここで雛形のルール（設定）を Grunt で規定し、フロントエンドを Bower で規定することをルールとしたら雛形もまとめやすいよね、ということか</p>

<h2>最後に</h2>

<p>なんだか雑なエントリになってしまった。。。</p>

<p>まずは Yeoman の恩恵をもっと受けまくってみます</p>

<h2>参照</h2>

<ul>
<li><a href="http://gruntjs.com/">Grunt</a></li>
<li><a href="http://bower.io/">Bower</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのYeoman (Grunt/Bowerを使ってみる)]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/10/the-second-step-of-yeoman/"/>
    <updated>2015-05-10T18:25:06+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/10/the-second-step-of-yeoman</id>
    <content type="html"><![CDATA[<p>以前のエントリ <a href="http://blog.sojiro.me/blog/2015/05/06/the-first-step-of-yeoman/">初めてのYeoman (Yoを使った雛形作成)</a> で <code>yo</code> を使い generator-angular-fullstack の雛形を作りました。</p>

<p>今回はこのとき作った雛形を Grunt を使って実際に動かしてみたいと思います。</p>

<p>Gruntがどんなものかはとりあえず使ってみてからと言うことで。</p>

<h2>Grunt のインストール</h2>

<p> <code>npm</code> でインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g grunt-cli
</span></code></pre></td></tr></table></div></figure>


<p>インストールされたことを確認</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grunt --version
</span><span class='line'>grunt-cli v0.1.13
</span><span class='line'>grunt v0.4.5
</span></code></pre></td></tr></table></div></figure>


<p>OK.</p>

<h2>Grunt / Bower の実行</h2>

<p>インストールできたら早速 Grunt を実行してみる</p>

<p>今回は雛形作成時に生成された Gruntfile.js で規定されている serve タスクを実行する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grunt serve
</span><span class='line'>Running <span class="s2">&quot;serve&quot;</span> task
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;clean:server&quot;</span> <span class="o">(</span>clean<span class="o">)</span> task
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;env:all&quot;</span> <span class="o">(</span>env<span class="o">)</span> task
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;injector:sass&quot;</span> <span class="o">(</span>injector<span class="o">)</span> task
</span><span class='line'>Missing option <span class="sb">`</span>template<span class="sb">`</span>, using <span class="sb">`</span>dest<span class="sb">`</span> as template instead
</span><span class='line'>Injecting scss files <span class="o">(</span><span class="m">4</span> files<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;concurrent:server&quot;</span> <span class="o">(</span>concurrent<span class="o">)</span> task
</span><span class='line'>    Warning: Running <span class="s2">&quot;sass:server&quot;</span> <span class="o">(</span>sass<span class="o">)</span> task
</span><span class='line'>    Warning:
</span><span class='line'>    You need to have Ruby and Sass installed and in your PATH <span class="k">for</span> this task to work.
</span><span class='line'>    More info: https://github.com/gruntjs/grunt-contrib-sass
</span><span class='line'>     Use --force to <span class="k">continue</span>.
</span><span class='line'>
</span><span class='line'>    Aborted due to warnings.
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>何やら怒られた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>You need to have Ruby and Sass installed and in your PATH <span class="k">for</span> this task to work.
</span></code></pre></td></tr></table></div></figure>


<p>ということだそうなので Sass をインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>yum install rubygems
</span><span class='line'><span class="nv">$ </span>gem install sass
</span></code></pre></td></tr></table></div></figure>


<p>もう一度トライ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grunt serve
</span><span class='line'>Running <span class="s2">&quot;serve&quot;</span> task
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;clean:server&quot;</span> <span class="o">(</span>clean<span class="o">)</span> task
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;env:all&quot;</span> <span class="o">(</span>env<span class="o">)</span> task
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;injector:sass&quot;</span> <span class="o">(</span>injector<span class="o">)</span> task
</span><span class='line'>Missing option <span class="sb">`</span>template<span class="sb">`</span>, using <span class="sb">`</span>dest<span class="sb">`</span> as template instead
</span><span class='line'>Injecting scss files <span class="o">(</span><span class="m">4</span> files<span class="o">)</span>
</span><span class='line'>&gt;&gt; Nothing changed
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;concurrent:server&quot;</span> <span class="o">(</span>concurrent<span class="o">)</span> task
</span><span class='line'>    Warning: Error: File to import not found or unreadable: bootstrap-sass-official/vendor/assets/stylesheets/bootstrap.
</span><span class='line'>           Load paths:
</span><span class='line'>             /home/sojiro/yeoman/angular_fullstack/client/bower_components
</span><span class='line'>             /home/sojiro/yeoman/angular_fullstack/client/app
</span><span class='line'>             /home/sojiro/yeoman/angular_fullstack/client/components
</span><span class='line'>            on line <span class="m">4</span> of client/app/app.scss
</span><span class='line'>      Use --trace <span class="k">for</span> backtrace. Use --force to <span class="k">continue</span>.
</span><span class='line'>
</span><span class='line'>        Aborted due to warnings.
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>また怒られた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Warning: Error: File to import not found or unreadable: bootstrap-sass-official/vendor/assets/stylesheets/bootstrap.
</span></code></pre></td></tr></table></div></figure>


<p>今回のエラーはよくわからなかったので少し調べると、 Yeoman 三種の神器の三つ目、 Bower が必要らしいのでインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g bower
</span><span class='line'><span class="nv">$ </span>bower -v
</span><span class='line'>1.4.1
</span></code></pre></td></tr></table></div></figure>


<p>雛形作成時に bower.json が生成されているのでここに記述されているパッケージをインストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bower install
</span></code></pre></td></tr></table></div></figure>


<p>そして再度実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grunt serve
</span><span class='line'>Running <span class="s2">&quot;serve&quot;</span> task
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;open:server&quot;</span> <span class="o">(</span>open<span class="o">)</span> task
</span><span class='line'>Warning: Command failed: /home/sojiro/yeoman/angular_fullstack/node_modules/open/vendor/xdg-open: line 584: xdg-mime: コマンドが見つかりません
</span><span class='line'>xdg-open: no method available <span class="k">for</span> opening <span class="s1">&#39;http://localhost:9000&#39;</span>
</span><span class='line'> Use --force to <span class="k">continue</span>.
</span><span class='line'>
</span><span class='line'>Aborted due to warnings.
</span><span class='line'>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>また怒られる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Warning: Command failed: /home/sojiro/yeoman/angular_fullstack/node_modules/open/vendor/xdg-open: line 584: xdg-mime: コマンドが見つかりません
</span></code></pre></td></tr></table></div></figure>


<p>xdg-open は引数に受け取ったものをよしなにアプリケーションを選択して開いてくれるコマンドらしい（未検証）</p>

<p>このコマンドが、指定されたオブジェクトを適切なアプリケーションで開くために mime タイプを取得するとき、 <code>xdg-mime</code> コマンドを使用するようである</p>

<p>今回は <code>xdg-open URL</code> とすることで指定したURL（localhost）をブラウザで開こうとしているようである</p>

<p>そもそもここで使っているサーバーはブラウザが入っていないリモートのサーバーなので、該当タスクをコメントアウトする。また、サーバーのURLもIPアドレスで指定するように設定ファイル(Gruntfile.js)を変更する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim Gruntfile.js
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">task</span><span class="p">.</span><span class="nx">run</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;clean:server&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;env:all&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;injector:sass&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;concurrent:server&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;injector&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;wiredep&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;autoprefixer&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;express:dev&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;wait&#39;</span><span class="p">,</span>
</span><span class='line'><span class="c1">//      &#39;open&#39;,</span>
</span><span class='line'>  <span class="s1">&#39;watch&#39;</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">open</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">server</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//url: &#39;http://localhost:&lt;%= express.options.port %&gt;&#39;</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;http://xx.xxx.xxx.xxx:&lt;%= express.options.port %&gt;&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>そしてまたまた実行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>grunt serve
</span><span class='line'>Running <span class="s2">&quot;serve&quot;</span> task
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>Running <span class="s2">&quot;watch&quot;</span> task
</span><span class='line'>Waiting...
</span></code></pre></td></tr></table></div></figure>


<p>動いた！！</p>

<h2>雛形の動作確認</h2>

<p>watch タスクまで問題なく進んだので早速ブラウザからアクセスしてみる</p>

<p>上記で Gruntfile.js に設定したアドレスにアクセスする。ポートは 9000番。</p>

<p>雛形アプリケーションのトップが表示された</p>

<p><img src="http://sojiro14.github.io/images/angular_fullstack/top.png"></p>

<p>Sign up 画面なども用意されている</p>

<p><img src="http://sojiro14.github.io/images/angular_fullstack/sign_up.png"></p>

<h2>つづく</h2>

<p>今回は何も考えずに Grunt と（はからずも）Bower を使ってみた。</p>

<p>それぞれがどのようなツールなのか次回はまとめてみたい。</p>

<h2>参照</h2>

<ul>
<li><a href="https://github.com/DaftMonk/generator-angular-fullstack/issues/710">Error sass when build mode product #710</a></li>
<li><a href="http://zkohi.hatenablog.com/entry/2013/12/14/021639">yeoman, grunt, bowerで静的サイト構築（第三回）</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replyを試してみる]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/09/try-reply/"/>
    <updated>2015-05-09T23:34:36+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/09/try-reply</id>
    <content type="html"><![CDATA[<p>Perl の REPL 環境である Reply というツールを教えてもらったので使ってみます。</p>

<h2>REPL とは？</h2>

<p>REPL とは <strong>R</strong>ead-<strong>E</strong>val-<strong>P</strong>rint <strong>L</strong>oop の頭文字を取った言葉であり、</p>

<p>プログラムを読み(Read)、評価し(Evaluate)、結果を出力(Print)することを繰り返す(Loop)という意味である。</p>

<p>この環境があればファイルにプログラムを書いて保存し、実行する、という手続きを踏まなくてもスクリプトを実行できる</p>

<p>この REPL の Perl 版が Reply と言うことだそう</p>

<h2>Reply のインストール</h2>

<p>Reply は CPAN からインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>cpanm Reply
</span><span class='line'>--&gt; Working on Reply
</span><span class='line'>Fetching http://cpan.metacpan.org/authors/id/D/DO/DOY/Reply-0.37.tar.gz ... OK
</span><span class='line'>Configuring Reply-0.37 ... OK
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>インストールできたら早速実行してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>reply
</span><span class='line'>/Users/sojiro/.replyrc not found. Generating a default...
</span><span class='line'>0&gt;
</span></code></pre></td></tr></table></div></figure>


<p>コンソールが立ち上がった</p>

<p>早速なにかプログラムを入力してみよう</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>0&gt; print <span class="s1">&#39;Hello Reply&#39;</span><span class="p">;</span>
</span><span class='line'>Hello Reply<span class="nv">$res</span><span class="o">[</span>0<span class="o">]</span> <span class="o">=</span> 1
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>1&gt; <span class="m">12</span> * 12
</span><span class='line'><span class="nv">$res</span><span class="o">[</span>1<span class="o">]</span> <span class="o">=</span> 144
</span></code></pre></td></tr></table></div></figure>


<p>なるほど単純なプログラムの動作が確認できた。今度は <code>use</code> してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2&gt; use UUID::Tiny<span class="p">;</span>
</span><span class='line'>3&gt; my <span class="nv">$id</span> <span class="o">=</span> create_UUID_as_string<span class="o">(</span>UUID_V4<span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="nv">$res</span><span class="o">[</span>2<span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;87b16a6b-c712-41b4-bf46-965eeb01d3f1&#39;</span>
</span><span class='line'>
</span><span class='line'>4&gt; print <span class="nv">$id</span><span class="p">;</span>
</span><span class='line'>87b16a6b-c712-41b4-bf46-965eeb01d3f1<span class="nv">$res</span><span class="o">[</span>3<span class="o">]</span> <span class="o">=</span> 1
</span></code></pre></td></tr></table></div></figure>


<p>このように実行結果は記憶された状態で進むので簡単にプログラムの実行結果を知りたいときに重宝しそうである。</p>

<h2>参照</h2>

<ul>
<li><a href="http://papix.hatenablog.com/entry/2014/12/15/233800">Replyでお手軽にPerlのコードを動かす話</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4774156647/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774156647&amp;linkCode=as2&amp;tag=sojiro14-22">小飼弾のコードなエッセイ ~我々は本当に世界を理解してコードしているのだろうか? </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MEANとはなにか]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/08/what-is-mean/"/>
    <updated>2015-05-08T22:14:38+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/08/what-is-mean</id>
    <content type="html"><![CDATA[<p>以前のエントリ、 <a href="http://blog.sojiro.me/blog/2015/05/06/the-first-step-of-yeoman/">初めてのYeoman (Yoを使った雛形作成)</a> にて generator-angular-fullstack という雛形を使いましたが、この雛形は <strong>MEAN</strong> なアプリケーションの雛形、と呼ばれているそうです。</p>

<p>MEANとはどういう意味でしょうか？</p>

<h2>MEAN とはなにか</h2>

<p>MEAN は</p>

<ul>
<li><strong>M</strong>ongoDB</li>
<li><strong>E</strong>xpress.js</li>
<li><strong>A</strong>ngular.js</li>
<li><strong>N</strong>ode.js</li>
</ul>


<p>これらの頭文字をとったもので、これらの技術を使ったサービスのことを言う</p>

<h2>特徴はなにか</h2>

<p>まだ使ったこともないので想像だが、（恥ずかしいので早く使いたい）</p>

<ul>
<li>サーバーサイドからクライアントサイドまですべて JavaScript で制御できること

<ul>
<li>現状他の言語ではなかなかマネできないのではないか</li>
</ul>
</li>
<li>DB含むすべてのデータを JSON 形式でやり取りできること

<ul>
<li>すべて JavaScript で、というのと被るところもあるが、やはりシンプルで良い感じがする</li>
</ul>
</li>
</ul>


<h2>最後に</h2>

<p>やっぱり使わないと上記のようなしょうもないことしか言えないので generator-angular-fullstack で作った雛形を少しずつ触りながら次回はもう少しまともなことを言えるようにします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「トークン」とはなにか]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/07/what-is-token/"/>
    <updated>2015-05-07T23:57:03+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/07/what-is-token</id>
    <content type="html"><![CDATA[<p>半年以上前のある夜、大先輩エンジニアの方に隠れ家的なオシャレな大人のBarに連れて行っていただきました。</p>

<p>その日はそれまでに既に結構飲んでいまして、本当に恥ずかしながらそこでお話した内容のほとんどは覚えていないのですが、一つだけ鮮明に覚えているのは、</p>

<p><strong> 「トークン」ってなに？ </strong></p>

<p>と私に説明を求められたことです。なにかを答えはしたのですが、かなり曖昧な答えになっていたと思います。</p>

<p>さらに最悪なのは、その後その大先輩が語られた内容を覚えていないことです。これは最悪です。次の日に「トークンって結局なんでしたっけ？」などとも聞けないのでそれ以来いろいろ考えてきたことを書きます。</p>

<h2>トークンとはなにか</h2>

<p>Webの開発をしているとしばしばトークンというものが登場します</p>

<ul>
<li>Access Token</li>
<li>ID Token</li>
<li>JWT(JSON Web Token)</li>
<li>etc&hellip;</li>
</ul>


<p>このトークンとはなにか、という話です</p>

<p>そもそもトークンなんて日本語はないのだから、トークンはトークン、という感じなのですが、あえて日本語にすると</p>

<p><strong> 「証」（しょう） </strong></p>

<p>という漢字一文字が合うのかな、と思います。</p>

<ul>
<li>通行証</li>
<li>身分証</li>
<li>免許証</li>
<li>etc&hellip;</li>
</ul>


<h2>トークンの性質</h2>

<p>これらに共通するのは</p>

<ul>
<li>誰かが発行し</li>
<li>何かが書いてある</li>
</ul>


<p>ということではないでしょうか</p>

<p>特に「何かが書いてある」、という部分は様々な内容を持ち得ます</p>

<ul>
<li>通行証には、ある場所を通ること、ある場所に到達することを許可する旨が書かれています</li>
<li>身分証には、それを持っている人が誰なのか、それを示す内容が書かれています</li>
<li>免許証には、誰に何をすることを許可するのかが書かれています</li>
</ul>


<p>このように考えると「トークン」という言葉がしっくりくるのでは、と現在思っております。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのYeoman (Yoを使った雛形作成)]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/06/the-first-step-of-yeoman/"/>
    <updated>2015-05-06T18:55:02+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/06/the-first-step-of-yeoman</id>
    <content type="html"><![CDATA[<p>前回 <a href="http://blog.sojiro.me/blog/2015/05/05/hubot-create-is-now-old/">‘Hubot –create’ は古い</a> というエントリでYeomanを試してみたいと宣言したので試してみます。</p>

<p>Yeoman は以下の3要素で構成されているそうな</p>

<ul>
<li>yo: 雛形作成ツール</li>
<li>Grunt: タスクランナー</li>
<li>Bower: フロントエンドパッケージマネージャ</li>
</ul>


<p>今回は前回に引き続き <code>yo</code> を使ってみたいと思います。</p>

<p>前提としては <code>yo</code> をインストール済みであること。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g yo
</span></code></pre></td></tr></table></div></figure>


<p>また、 <code>yo</code> は npm のバージョン2.1.0以上が推奨なので必要に応じて npm もアップデートします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm update -g npm
</span></code></pre></td></tr></table></div></figure>


<h2>generator-angular-fullstack を使ってみる</h2>

<p>今回 <code>yo</code> で作成する雛形として generator-angular-fullstack を使ってみる</p>

<p>generator-angular-fullstack は MEAN なアプリケーションの雛形で、使い勝手が良いという噂</p>

<p>早速インストール</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>yeoman/angular_fullstack
</span><span class='line'><span class="nv">$ </span>npm install generator-angular-fullstack
</span></code></pre></td></tr></table></div></figure>


<p>インストールできたので実行してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>yo angular-fullstack
</span><span class='line'>     _-----_
</span><span class='line'>    <span class="p">|</span>       <span class="p">|</span>
</span><span class='line'>    <span class="p">|</span>--<span class="o">(</span>o<span class="o">)</span>--<span class="p">|</span>   .--------------------------.
</span><span class='line'>   <span class="sb">`</span>---------´  <span class="p">|</span>    Welcome to Yeoman,    <span class="p">|</span>
</span><span class='line'>    <span class="o">(</span> _´U<span class="sb">`</span>_ <span class="o">)</span>   <span class="p">|</span>   ladies and gentlemen!  <span class="p">|</span>
</span><span class='line'>    /___A___<span class="se">\ </span>  <span class="s1">&#39;__________________________&#39;</span>
</span><span class='line'>     <span class="p">|</span>  ~  <span class="p">|</span>
</span><span class='line'>   __<span class="s1">&#39;.___.&#39;</span>__
</span><span class='line'> ´   <span class="sb">`</span>  <span class="p">|</span>° ´ Y <span class="sb">`</span>
</span><span class='line'>
</span><span class='line'>Out of the box I create an AngularJS app with an Express server.
</span><span class='line'>
</span><span class='line'><span class="c"># Client</span>
</span><span class='line'>
</span><span class='line'>? What would you like to write scripts with? JavaScript
</span><span class='line'>? What would you like to write markup with? HTML
</span><span class='line'>? What would you like to write stylesheets with? Sass
</span><span class='line'>? What Angular router would you like to use? uiRouter
</span><span class='line'>? Would you like to include Bootstrap? Yes
</span><span class='line'>? Would you like to include UI Bootstrap? Yes
</span><span class='line'>
</span><span class='line'><span class="c"># Server</span>
</span><span class='line'>
</span><span class='line'>? Would you like to use mongoDB with Mongoose <span class="k">for</span> data modeling? Yes
</span><span class='line'>? Would you scaffold out an authentication boilerplate? Yes
</span><span class='line'>? Would you like to include additional oAuth strategies? Google, Facebook, Twitter
</span><span class='line'>? Would you like to use socket.io? Yes
</span></code></pre></td></tr></table></div></figure>


<p>雛形作成を実行するといくつかインタラクティブに聞かれるので答える</p>

<p>今回は基本的に Yes と答えてみた</p>

<p>実行が終わると雛形ができていた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls
</span><span class='line'>Gruntfile.js  bower.json  client  e2e  karma.conf.js  node_modules  package.json  protractor.conf.js  server
</span></code></pre></td></tr></table></div></figure>


<h2>つづく</h2>

<p>次回は <code>grunt</code> を使って実際にアプリケーションを動かしてみる</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.chat.ac/yeoman%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6meanmongodbexpressangularjsnode-js%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%82%88%E3%81%86/">YEOMANを使ってMEAN(MongoDB+Express+AngularJS+Node.js)を作成しよう</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Hubot --create' は古い]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/05/hubot-create-is-now-old/"/>
    <updated>2015-05-05T17:50:15+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/05/hubot-create-is-now-old</id>
    <content type="html"><![CDATA[<p>このブログで過去に何度かHubotについて書いたときに、新しいbotを作るときのコマンドは <code>hubot --create bot_name</code> だったのですが、このコマンドが非推奨になったようなのでメモ。</p>

<h2>hubot &ndash;create が使えない</h2>

<p>新しいbotを作ろうとして <code>hubot --create</code> コマンドを打つと以下のように怒られた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>hubot --create test_bot
</span><span class='line'><span class="s1">&#39;hubot --create&#39;</span> is deprecated. Use the yeoman generator instead:
</span><span class='line'>    npm install -g yo generator-hubot
</span><span class='line'>    mkdir -p test_bot
</span><span class='line'>    yo hubot
</span><span class='line'>See https://github.com/github/hubot/blob/master/docs/README.md <span class="k">for</span> more details on getting started.
</span></code></pre></td></tr></table></div></figure>


<p>ところがseeとなっているREADMEファイルは存在しない模様&hellip;</p>

<h2>yo と generator-hubot とは何か</h2>

<p>よくわからないが <code>yo</code> と <code>generator-hubot</code> をインストールしろと言われているのはわかるので調べてみる</p>

<h3>yo と generator-xxx</h3>

<p>yoはYeomanというGoole社が開発した統合開発ツール群に属するツールの一つで、「雛形作成ツール」であるらしい</p>

<p>そしてその雛形は &ldquo;generator-xxx&rdquo; という形でさまざま用意されており、そのHubot版が <code>generator-hubot</code> と言う訳である</p>

<p>つまり上記エラーメッセージは</p>

<ul>
<li>雛形作成ツールである <code>yo</code> と、Hubotの雛形である <code>generator-hubot</code> をインストールし</li>
<li>新規ディレクトリ上で <code>yo</code> を実行してHubotの雛形を作るべし</li>
</ul>


<p>ということのようである</p>

<h2>yo と generator-hubot のインストール</h2>

<p>指定された通り以下のようにインストールする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install -g yo generator-hubot
</span></code></pre></td></tr></table></div></figure>


<p>（余談：私の場合はNode.jsのインストールされたpathとnpmのrootが違っていたため少々上手くいかなかった。エラーメッセージは素直によく読むべきだ。。。）</p>

<h2>yo の実行</h2>

<p>インストールが成功したら、新しいbotのディレクトリを作ってそこで <code>yo</code> を実行する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir test_bot
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>test_bot
</span><span class='line'><span class="nv">$ </span>yo hubot  <span class="c"># これは generator-hubot の雛形を作る、という意味</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>yo hubot</code> を実行するとHubotのAAが表示され、いくつかのやり取りが立ち上がる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>yo hubot
</span><span class='line'>                     _____________________________
</span><span class='line'>                    /                             <span class="se">\ </span>
</span><span class='line'>   //<span class="se">\ </span>             <span class="p">|</span>      Extracting input <span class="k">for</span>    <span class="p">|</span>
</span><span class='line'>  ////<span class="se">\ </span>   _____    <span class="p">|</span>   self-replication process   <span class="p">|</span>
</span><span class='line'> //////<span class="se">\ </span> /_____<span class="se">\ </span>  <span class="se">\ </span>                            /
</span><span class='line'> <span class="o">=======</span> <span class="p">|</span><span class="o">[</span>^_/<span class="se">\_</span><span class="o">]</span><span class="p">|</span>   /----------------------------
</span><span class='line'>  <span class="p">|</span>   <span class="p">|</span> _<span class="p">|</span>___@@__<span class="p">|</span>__
</span><span class='line'>  +<span class="o">===</span>+/  ///     <span class="se">\_\ </span>
</span><span class='line'>   <span class="p">|</span> <span class="p">|</span>_<span class="se">\ </span>/// HUBOT/<span class="se">\\</span>
</span><span class='line'>   <span class="p">|</span>___/<span class="se">\/</span>/      /  <span class="se">\\</span>
</span><span class='line'>         <span class="se">\ </span>     /   +---+
</span><span class='line'>          <span class="se">\_</span>___/    <span class="p">|</span>   <span class="p">|</span>
</span><span class='line'>           <span class="p">|</span> //<span class="p">|</span>    +<span class="o">===</span>+
</span><span class='line'>            <span class="se">\/</span>/      <span class="p">|</span>xx<span class="p">|</span>
</span><span class='line'>
</span><span class='line'>? Owner: sojiro
</span><span class='line'>? Bot name: slack-test-bot
</span><span class='line'>? Description: Slack Bot <span class="nb">test</span>
</span><span class='line'>? Bot adapter: <span class="o">(</span>campfire<span class="o">)</span> slack
</span><span class='line'>? Bot adapter: slack
</span><span class='line'>   create bin/hubot
</span><span class='line'>   create bin/hubot.cmd
</span><span class='line'>   create Procfile
</span><span class='line'>   create README.md
</span><span class='line'>   create external-scripts.json
</span><span class='line'>   create hubot-scripts.json
</span><span class='line'>   create .gitignore
</span><span class='line'>   create package.json
</span><span class='line'>   create scripts/example.coffee
</span><span class='line'>   create .editorconfig
</span><span class='line'>                     _____________________________
</span><span class='line'> _____              /                             <span class="se">\ </span>
</span><span class='line'> <span class="se">\ </span>   <span class="se">\ </span>            <span class="p">|</span>   Self-replication process   <span class="p">|</span>
</span><span class='line'> <span class="p">|</span>    <span class="p">|</span>    _____    <span class="p">|</span>          complete...         <span class="p">|</span>
</span><span class='line'> <span class="p">|</span>__<span class="se">\\</span><span class="p">|</span>   /_____<span class="se">\ </span>  <span class="se">\ </span>    Good luck with that.    /
</span><span class='line'>   <span class="p">|</span>//+  <span class="p">|</span><span class="o">[</span>^_/<span class="se">\_</span><span class="o">]</span><span class="p">|</span>   /----------------------------
</span><span class='line'>  <span class="p">|</span>   <span class="p">|</span> _<span class="p">|</span>___@@__<span class="p">|</span>__
</span><span class='line'>  +<span class="o">===</span>+/  ///     <span class="se">\_\ </span>
</span><span class='line'>   <span class="p">|</span> <span class="p">|</span>_<span class="se">\ </span>/// HUBOT/<span class="se">\\</span>
</span><span class='line'>   <span class="p">|</span>___/<span class="se">\/</span>/      /  <span class="se">\\</span>
</span><span class='line'>         <span class="se">\ </span>     /   +---+
</span><span class='line'>          <span class="se">\_</span>___/    <span class="p">|</span>   <span class="p">|</span>
</span><span class='line'>           <span class="p">|</span> //<span class="p">|</span>    +<span class="o">===</span>+
</span><span class='line'>            <span class="se">\/</span>/      <span class="p">|</span>xx<span class="p">|</span>
</span><span class='line'>...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>各項目それぞれデフォルト値が設定されており、なにも入力せずEnterを押していくとその通りになる</p>

<p>今回はSlack用のbotだったので Bot adapter: の欄で <code>slack</code> と入力した</p>

<p>他にも用途に合わせてadapterが用意されているようである</p>

<p>この <code>yo</code> 実行により、Hubotの雛形が作成され、 <code>hubot --create</code> と同様にセットアップが完了する</p>

<p>なおかつadapterを予め設定できる分、セットアップが楽になっている</p>

<h2>最後に</h2>

<p>今回はHubotに絡んで偶発的に <code>yo</code> を知りましたが、かなり便利そうなのでYeoman含めて今後も使ってみたいところです</p>

<h2>参照</h2>

<ul>
<li><a href="http://yosuke-furukawa.hatenablog.com/entry/2013/07/04/085814">Yeoman入門(第一部、yoを使う)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slack BotをHeroku上で動かす]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/04/transfer-the-slack-bot-to-heroku/"/>
    <updated>2015-05-04T21:38:12+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/04/transfer-the-slack-bot-to-heroku</id>
    <content type="html"><![CDATA[<p><a href="http://blog.sojiro.me/blog/2014/12/15/slack-bot-by-hubot/">HUBOTを使ったSlack Bot作成メモ</a>で作ったSlack Botをローカル以外の環境で動かしたくなったのでHeroku上で動かせるようにしてみます。</p>

<p>あらかじめ<a href="https://www.heroku.com">Heroku</a>にSign upしておきます。</p>

<h2>Heroku Toolbelt のインストール</h2>

<p>HerokuのCLIツールであるHeroku Toolbeltをインストールします</p>

<p>今回はMacを使っているのでこちらからダウンロード&amp;インストールしました</p>

<p><a href="https://toolbelt.heroku.com/osx">https://toolbelt.heroku.com/osx</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku version
</span><span class='line'>heroku-toolbelt/3.34.0 <span class="o">(</span>x86_64-darwin10.8.0<span class="o">)</span> ruby/1.9.3
</span><span class='line'>You have no installed plugins.
</span></code></pre></td></tr></table></div></figure>


<h2>コマンドラインからHerokuにログイン</h2>

<p>HerokuにSign upしたときのIDとPasswordでコマンドライン上からHerokuにログインする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku login
</span><span class='line'>Enter your Heroku credentials.
</span><span class='line'>Email: sojiro@example.com
</span><span class='line'>Password <span class="o">(</span>typing will be hidden<span class="o">)</span>:
</span><span class='line'>Authentication successful.
</span></code></pre></td></tr></table></div></figure>


<h2>hubotのディレクトリをGitHubにpush</h2>

<p>HerokuにはGitHubを通じてデプロイするようなのでhubotのあるディレクトリをGitHubにpushしておく</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/git/hubot/my_slack_bot/
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;initial commit&#39;</span>
</span><span class='line'><span class="nv">$ </span>git remote add origin git@github.com:your_name/slack_bot_repository  <span class="c"># 自分で用意したslack bot用のGitリポジトリ</span>
</span><span class='line'><span class="nv">$ </span>git push origin master
</span></code></pre></td></tr></table></div></figure>


<h2>Herokuにデプロイ</h2>

<p>Herokuにアプリケーションを作る</p>

<p>このときstackにcedarを指定する。アプリケーションの名前は指定しないとHerokuが勝手に名前をつけてくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku create --stack cedar
</span><span class='line'>Creating random_name... <span class="k">done</span>, stack is cedar-10
</span><span class='line'>https://random_name.herokuapp.com/ <span class="p">|</span> https://git.heroku.com/random_name.git
</span><span class='line'>Git remote heroku added
</span><span class='line'>updating...done. Updated to 3.35.0
</span></code></pre></td></tr></table></div></figure>


<p>ここまできたらいよいよデプロイ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push heroku master
</span><span class='line'>Counting objects: 16, <span class="k">done</span>.
</span><span class='line'>Delta compression using up to <span class="m">8</span> threads.
</span><span class='line'>Compressing objects: 100% <span class="o">(</span>13/13<span class="o">)</span>, <span class="k">done</span>.
</span><span class='line'>Writing objects: 100% <span class="o">(</span>16/16<span class="o">)</span>, 6.58 KiB <span class="p">|</span> <span class="m">0</span> bytes/s, <span class="k">done</span>.
</span><span class='line'>Total <span class="m">16</span> <span class="o">(</span>delta 0<span class="o">)</span>, reused <span class="m">0</span> <span class="o">(</span>delta 0<span class="o">)</span>
</span><span class='line'>remote: Compressing <span class="nb">source </span>files... <span class="k">done</span>.
</span><span class='line'>remote: Building <span class="nb">source</span>:
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Herokuに設定を追加</h2>

<p>HerokuにHubotとSlackの設定を追加していく</p>

<p>ここでは<a href="http://blog.sojiro.me/blog/2014/12/15/slack-bot-by-hubot/">HUBOTを使ったSlack Bot作成メモ</a>で払い出されたものを指定する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># HUBOT_SLACK_TOKENの設定</span>
</span><span class='line'><span class="nv">$ </span>heroku config:add <span class="nv">HUBOT_SLACK_TOKEN</span><span class="o">=</span>xxxx-123456789-abcdefghijklmnopqrstuvwxyz
</span><span class='line'>Setting config vars and restarting random_name... <span class="k">done</span>, v4
</span><span class='line'>HUBOT_SLACK_TOKEN: xxxx-123456789-abcdefghijklmnopqrstuvwxyz
</span><span class='line'>
</span><span class='line'><span class="c"># SlackのTeam設定</span>
</span><span class='line'><span class="nv">$ </span>heroku config:add <span class="nv">HUBOT_SLACK_TEAM</span><span class="o">=</span>your_team_name
</span><span class='line'>Setting config vars and restarting random_name... <span class="k">done</span>, v5
</span><span class='line'>HUBOT_SLACK_TEAM: your_team_name
</span><span class='line'>
</span><span class='line'><span class="c"># Botの名前の設定</span>
</span><span class='line'><span class="nv">$ </span>heroku config:add <span class="nv">HUBOT_SLACK_BOTNAME</span><span class="o">=</span>your_bot_name
</span><span class='line'>Setting config vars and restarting random_name... <span class="k">done</span>, v6
</span><span class='line'>HUBOT_SLACK_BOTNAME: your_bot_name
</span><span class='line'>
</span><span class='line'><span class="c"># HerokuアプリのURL設定</span>
</span><span class='line'><span class="nv">$ </span>heroku config:add <span class="nv">HEROKU_URL</span><span class="o">=</span>http://random_name.herokuapp.com
</span><span class='line'>Setting config vars and restarting random_name... <span class="k">done</span>, v7
</span><span class='line'>HEROKU_URL: http://random_name.herokuapp.com
</span></code></pre></td></tr></table></div></figure>


<h2>HerokuのWebプロセスの起動</h2>

<p>最後にHerokuのWebプロセスを起動する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>heroku ps:scale <span class="nv">web</span><span class="o">=</span>1
</span><span class='line'>Scaling dynos... <span class="k">done</span>, now running web at 1:1X.
</span></code></pre></td></tr></table></div></figure>


<p>SlackにBotが現れれば成功！</p>

<p>今回はRedisを使わなかったのでHerokuのaddon設定やクレジットカードの登録無しでいけました</p>

<h2>参照</h2>

<ul>
<li><a href="http://memo.sanographix.net/post/88371442780">Hubotで西木野真姫bot作ってSlackに呼ぶ</a></li>
<li><a href="http://tech-sketch.jp/2013/12/hubot-install-heroku.html">GitHubがOpsツールの中心として活用しているHubotを使ってみる～インストール、スクリプトの作成、Herokuへのデプロイ～</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのVagrant]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/03/the-first-step-for-vagrant/"/>
    <updated>2015-05-03T22:18:11+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/03/the-first-step-for-vagrant</id>
    <content type="html"><![CDATA[<p>仮想環境構築ツールのVagrantが便利らしいという噂を聞いて使ってみたところ確かに便利でした。</p>

<p>以前VirtualBox上での環境構築に手間取った経験があったのでこれは今後も積極的に使って行きたいと思い、最初の手順をメモします。</p>

<p>前提として今回仮想化ソフトとしてはVirtualBoxを使うのでインストールされているという前提で以下を書きます。</p>

<h2>Vagrantのインストール</h2>

<p>まずはVagrantをインストールする</p>

<p><a href="https://www.vagrantup.com/downloads.html">https://www.vagrantup.com/downloads.html</a></p>

<p>こちらのダウンロードフォームから使っているOSに合ったものをダウンロードすればOK</p>

<p>ダウンロードしたファイルをポチポチやってインストールが完了するので以下のコマンドで確かめる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant --version
</span><span class='line'>Vagrant 1.7.2
</span></code></pre></td></tr></table></div></figure>


<h2>boxの追加</h2>

<p>Vagrantでは仮想環境それぞれの設定をboxという単位で管理する</p>

<p>現在管理しているboxの情報は <code>vagrant box list</code> で確認できる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>There are no installed boxes! Use <span class="sb">`</span>vagrant box add<span class="sb">`</span> to add some.
</span></code></pre></td></tr></table></div></figure>


<p>最初はboxが何もインストールされていないのでこのような結果</p>

<p>boxは自分で作成することもできるが、既に誰かが作ってくれたものを取り込むこともできる</p>

<p><a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a></p>

<p>こちらのサイトでは有志が様々なboxを提供してくれているので今回はこちらを使わせていただくことにする</p>

<p>リストからインストールするboxを決めたら、以下のコマンドで追加する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box add 名前 boxファイル
</span></code></pre></td></tr></table></div></figure>


<p>今回はインストールするboxをcentos64という名前で管理するために以下のようにした</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box add centos64 http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20131103.box
</span><span class='line'><span class="o">==</span>&gt; box: Adding box <span class="s1">&#39;centos64&#39;</span> <span class="o">(</span>v0<span class="o">)</span> <span class="k">for</span> provider:
</span><span class='line'>   box: Downloading: http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20131103.box
</span><span class='line'><span class="o">==</span>&gt; box: Successfully added box <span class="s1">&#39;centos64&#39;</span> <span class="o">(</span>v0<span class="o">)</span> <span class="k">for</span> <span class="s1">&#39;virtualbox&#39;</span>!
</span></code></pre></td></tr></table></div></figure>


<p> <code>vagrant box list</code> コマンドで確認するとcentos64という名前でboxがインストールされたことがわかる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant box list
</span><span class='line'>centos64 <span class="o">(</span>virtualbox, 0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>仮想環境を立ち上げる</h2>

<p>boxを追加したら早速そのboxを使って仮想環境を立ち上げる</p>

<p>今回は <code>~/virtual_machines/centos64/</code> というディレクトリでこの仮想環境を管理することにする</p>

<p>まずは <code>vagrant init</code> コマンドで環境立ち上げの準備をする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/virtual_machines/centos64
</span><span class='line'><span class="nv">$ </span>vagrant init centos64
</span><span class='line'>A <span class="sb">`</span>Vagrantfile<span class="sb">`</span> has been placed in this directory. You are now
</span><span class='line'>ready to <span class="sb">`</span>vagrant up<span class="sb">`</span> your first virtual environment! Please <span class="nb">read</span>
</span><span class='line'>the comments in the Vagrantfile as well as documentation on
</span><span class='line'><span class="sb">`</span>vagrantup.com<span class="sb">`</span> <span class="k">for</span> more information on using Vagrant.
</span></code></pre></td></tr></table></div></figure>


<p>このinitコマンドを打つことで <code>Vagrantfile</code> が作られ、VirtualBox上にも仮想環境が現れる</p>

<p> <code>Vagrantfile</code> ではこの仮想環境の設定を規定している</p>

<p>ここまで準備が完了したらいよいよ環境を立ち上げる <code>vagrant up</code> コマンドを使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant up
</span><span class='line'>Bringing machine <span class="s1">&#39;default&#39;</span> up with <span class="s1">&#39;virtualbox&#39;</span> provider...
</span><span class='line'><span class="o">==</span>&gt; default: Importing base box <span class="s1">&#39;centos64&#39;</span>...
</span><span class='line'><span class="o">==</span>&gt; default: Matching MAC address <span class="k">for</span> NAT networking...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>VirtualBox上で仮想環境が立ち上がっていることを確認できたら成功</p>

<p>仮想環境の状態は <code>vagrant status</code> コマンドでも確認できる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant status
</span><span class='line'>Current machine states:
</span><span class='line'>
</span><span class='line'>default                   running <span class="o">(</span>virtualbox<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>The VM is running. To stop this VM, you can run <span class="sb">`</span>vagrant halt<span class="sb">`</span> to
</span><span class='line'>shut it down forcefully, or you can run <span class="sb">`</span>vagrant <span class="nb">suspend</span><span class="sb">`</span> to simply
</span><span class='line'><span class="nb">suspend </span>the virtual machine. In either <span class="k">case</span>, to restart it again,
</span><span class='line'>simply run <span class="sb">`</span>vagrant up<span class="sb">`</span>.
</span></code></pre></td></tr></table></div></figure>


<h2>立ち上げた仮想環境に入る</h2>

<p>立ち上げた仮想環境に入るのは非常に簡単で、管理ディレクトリ上で <code>vagrant ssh</code> コマンドを打てばよい</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant ssh
</span><span class='line'>Welcome to your Vagrant-built virtual machine.
</span></code></pre></td></tr></table></div></figure>


<p>後は通常通り好きなように仮想環境を使える</p>

<h2>ネットワークの設定をする</h2>

<p>今回立ち上げた環境では主にWebサービスの開発を行いたいのでローカルからこの環境にアクセスするための設定をする</p>

<p>ネットワークの設定は <code>Vagrantfile</code> に規定されているのでこのファイルを変更する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim Vagrantfile
</span><span class='line'><span class="nv">$ </span>cat Vagrantfile
</span><span class='line'>...
</span><span class='line'>config.vm.network <span class="s2">&quot;private_network&quot;</span>, ip: <span class="s2">&quot;192.168.33.10&quot;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>private_networkの設定をしている行のコメントアウトを外すことでIP <code>192.168.33.10</code> でアクセス可能になる</p>

<p> <code>Vagrantfile</code> の設定を変更したら <code>vagrant reload</code> コマンドで設定をリロードしてやる必要がある</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant <span class="nv">reload</span>
</span><span class='line'><span class="o">==</span>&gt; default: Attempting graceful shutdown of VM...
</span><span class='line'><span class="o">==</span>&gt; default: Clearing any previously <span class="nb">set </span>forwarded ports...
</span><span class='line'><span class="o">==</span>&gt; default: Clearing any previously <span class="nb">set </span>network interfaces...
</span><span class='line'><span class="o">==</span>&gt; default: Preparing network interfaces based on configuration...
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>決まった操作の設定</h2>

<p>仮想環境を立ち上げた後、Webサーバーの設定など毎回やる操作がある場合はそれらを予め記述しておいてVagrant側で実行することができる(provisioning)</p>

<p>まずは <code>Vagrantfile</code> に設定を追加する。設定する行は <code>config.vm.provision</code> の行。</p>

<p>元々コメントアウトで記述があるようにインラインで <code>Vagrantfile</code> 内に直接書くこともできるが、以下のように設定することで外部ファイルに書き出すこともできる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>config.vm.provision :shell, :path <span class="o">=</span>&gt; <span class="s2">&quot;provision.sh&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>provision.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo yum -y install httpd
</span><span class='line'>sudo service httpd start
</span><span class='line'>sudo chkconfig httpd on
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p> <code>Vagrantfile</code> を設定したら忘れず <code>vagrant reload</code></p>

<p>その後provisionの実行は以下のコマンド</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vagrant provision
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<ul>
<li><a href="http://dotinstall.com/lessons/basic_vagrant">Vagrant入門</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのページに「もっと見る」を設定する方法]]></title>
    <link href="http://sojiro14.github.io/blog/2015/04/30/add-excerpt-link-on-octopress-pages/"/>
    <updated>2015-04-30T20:12:17+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/04/30/add-excerpt-link-on-octopress-pages</id>
    <content type="html"><![CDATA[<p>今回はOctopressで生成したページにいわゆる「もっと見る」リンクを設定する方法をメモします。</p>

<h2>「もっと見る」の場所を指定する</h2>

<p>記事の内容としてトップページで表示させる範囲が決まったら、その直後に「もっと見る」リンクを設置します。</p>

<p>設置方法は以下のコメントを記事内の「もっと見る」リンクを設置する箇所に記述するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="c">&lt;!-- more --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>「もっと見る」以降の記事内容はトップページ上では省略されます。</p>

<p>「もっと見る」リンクは個別記事ページにリンクしています。</p>

<h2>リンクの文言を変更する</h2>

<p>上記で設定したリンクはデフォルトでは「Read on →」と表示されます。</p>

<p>リンクの文言は <code>_config.yml</code> ファイルの項目 <code>excerpt_link</code> で管理されています。</p>

<p>従って以下のように設定することでリンクの文言が「もっと見る」となります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>excerpt_link: &quot;もっと見る&quot;
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>参照</h2>

<ul>
<li><a href="http://morizyun.github.io/blog/octopress-hatena-disqus-new-tab/">5分でできる簡単 Octopress セッティング</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github PagesとOctopressで作ったブログに独自ドメインを設定する]]></title>
    <link href="http://sojiro14.github.io/blog/2015/01/30/setting-custom-domain-on-a-blog-by-octopress-and-github-pages/"/>
    <updated>2015-01-30T00:14:23+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/01/30/setting-custom-domain-on-a-blog-by-octopress-and-github-pages</id>
    <content type="html"><![CDATA[<p>本ブログをリニューアルしたついでに新しくドメインを取ってこのブログに適用してみた。</p>

<p>Github PagesとOctopressを使ったブログへの独自ドメイン設定のメモとして残しておく。</p>

<h2>やるべきこと</h2>

<p>今回は <code>blog.sojiro.me</code> というサブドメインを使うことにしたので、やるべき手順は以下の2つのみ。</p>

<ul>
<li>DNSホストにGithub Pagesのドメインを向いたCNAMEレコードを追加する</li>
<li>ブログのソースに <code>CNAME</code> ファイルを追加する</li>
</ul>


<!-- more -->


<h2>CNAMEレコードとはなにか</h2>

<p>CNAMEレコードとはDNSに用意されたレコード(ドメイン設定)の種類の一つで、
特定のドメインに対して別名を設定することができる。</p>

<p>今回は元々のGithub Pagesのドメインである</p>

<p> <code>sojiro14.github.io</code></p>

<p>というドメインの別名として</p>

<p> <code>blog.sojiro.me</code></p>

<p>というドメインを設定することで、ブラウザから<code>blog.sojiro.me</code>にアクセスした場合も内部的に名前解決して <code>sojiro14.github.io</code> の内容を表示できるようにする。</p>

<h2>CNAMEファイル</h2>

<p>Github Pagesでは <code>CNAME</code> というファイルをルートディレクトリに設置することでリダイレクト処理を設定することができる</p>

<p>このリダイレクト処理として、 <code>sojiro14.github.io</code> にアクセスがあった場合に <code>blog.sojiro.me</code> にリダイレクトする、という設定をしておけば、さらに前述のDNS上のCNAMEレコードにより内部的にGithub Pagesの内容を見に行くことになり、常に <code>blog.sojiro.me</code> ドメインでブログにアクセスすることになる。</p>

<h2>実施手順</h2>

<p>DNSへのCNAMEレコードの登録よりも <code>CNAME</code> ファイルの設置を先に行ってしまうと、
Github Pagesの元々のドメインへのアクセスが独自ドメインにリダイレクトされた際に名前解決が上手く行かず、適切なページが表示されない、
という状態になってしまうので、</p>

<ol>
<li>DNSホストにGithub Pagesのドメインを向いたCNAMEレコードを追加する</li>
<li>ブログのソースに <code>CNAME</code> ファイルを追加する</li>
</ol>


<p>という順序で行う</p>

<h2>実践</h2>

<h3>CNAMEレコードの登録</h3>

<p>今回はお名前.comでドメインを取得したのでお名前.comでのCNAMEレコード追加の手順となる</p>

<p>お名前Navi > ドメイン設定 > DNS関連機能の設定</p>

<p>から対象のドメインを選択して次へ進むと、</p>

<p>DNSレコード設定を利用する</p>

<p>という選択肢があるので、そこから以下のようにCNAMEレコードを設定する。</p>

<p><img src="http://sojiro14.github.io/images/onamae/add_cname_record.png"></p>

<p>通常CNAMEレコードのvalueに設定するドメインは最後に <code>.</code> を付ける必要があるが、お名前.comでは自動で設定してくれるので、最後の <code>.</code> を付ける必要はない。</p>

<p>また、レコードを追加後、ページ下部の確認ボタンから確認、完了の手続きを踏まないと登録されないので注意。</p>

<p>登録完了から反映まで10分ほどかかる。</p>

<h3>CNAMEファイルの設置</h3>

<p>Octopressの管理ディレクトリにて以下の手順で設置する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;blog.sojiro.me&#39;</span> &gt;&gt; <span class="nb">source</span>/CNAME
</span><span class='line'><span class="nv">$ </span>rake gen_deploy
</span></code></pre></td></tr></table></div></figure>


<p>これで <code>sojiro14.github.io</code> にアクセスすると <code>blog.sojiro.me</code> にリダイレクトされ、 <code>blog.sojiro.me</code> ではGithub Pagesの内容を表示することができるようになった。</p>

<h2>参照</h2>

<ul>
<li><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages</a></li>
<li><a href="http://blog.livedoor.jp/techblog/archives/65340720.html">CNAMEの間違った使い方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.jsを使ってWeb Serverを作ってみました]]></title>
    <link href="http://sojiro14.github.io/blog/2015/01/07/making-a-web-server-with-node-dot-js/"/>
    <updated>2015-01-07T00:55:25+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/01/07/making-a-web-server-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>Node.jsを使って簡単なWeb Serverを作ってみた際のメモ。</p>

<p>今回使うNode.jsのバージョン</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>node -v
</span><span class='line'>v0.10.32
</span></code></pre></td></tr></table></div></figure>


<h2>Web Serverオブジェクトの準備</h2>

<p>Node.jsにはWeb Serverの機能を備えたオブジェクトが用意されている</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nodeの <code>http</code> モジュールを読み込んだ後、 <code>createServer()</code> メソッドでWeb Serverオブジェクトを取得できる</p>

<!-- more -->


<h2>requestイベントの追加</h2>

<p>取得したServerオブジェクトのリスナーとして、requestを受けたときに発火するrequestイベントを追加する</p>

<p>リスナーの追加には <code>emitter.on(event, listener)</code> という形式のメソッドを使う。今回はeventに <code>'request'</code> を指定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Hello World.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここでリスナーとして指定するコールバック関数は以下の2つの引数を受ける</p>

<ul>
<li>requestの内容をもつ <code>http.IncomingMessage</code> クラスのインスタンス</li>
<li>responseの内容となる <code>http.ServerResponse</code> クラスのインスタンス</li>
</ul>


<h3>response.writeHead(statusCode, [reasonPhrase], [headers])</h3>

<p>responseのHeadを規定するメソッド</p>

<h3>response.write(chunk, [encoding])</h3>

<p>responseのbodyを規定するメソッド。 <code>chunk</code> に文字列を指定した場合は第二引数にencodingを指定することができる。デフォルトはUTF-8。</p>

<h3>response.end([data], [encoding])</h3>

<p>serverにresponseの完了を通知するメソッド。responseの終了時に必ず呼ばなければならない。</p>

<h2>接続を受け入れる</h2>

<p>ポートとホスト名を指定してWeb Serverへの接続を受け付ける</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;xx.xxx.xxx.xxx&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>コードの全体像</h2>

<figure class='code'><figcaption><span>web.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;Hello World.&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;xx.xxx.xxx.xxx&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;server listening...&#39;</span><span class="p">);</span>  <span class="c1">//起動時のメッセージ</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Web Serverの起動と確認</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>node web.js
</span><span class='line'>server listening...
</span></code></pre></td></tr></table></div></figure>


<p>Web Serverを起動したらブラウザで確認する</p>

<p><img src="http://sojiro14.github.io/images/nodejs/web_server/hello_world.png"></p>

<p>簡単なWeb Serverの完成</p>

<h2>参照</h2>

<ul>
<li><a href="http://nodejs.org/api/http.html#http_http">Node.js v0.10.35 Manual &amp; Documentation#HTTP</a></li>
<li><a href="http://nodejs.org/api/events.html#events_events">Node.js v0.10.35 Manual &amp; Documentation#Events</a></li>
<li><a href="http://dotinstall.com/lessons/basic_nodejs/26205">ドットインストール</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのMongoDB]]></title>
    <link href="http://sojiro14.github.io/blog/2015/01/02/the-first-step-for-mongodb/"/>
    <updated>2015-01-02T02:20:55+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/01/02/the-first-step-for-mongodb</id>
    <content type="html"><![CDATA[<p>NoSQLの流れを汲むMongoDBを初めて使ってみるにあたり、基本的な操作をまとめてみる。</p>

<h1>基本的な用語</h1>

<ul>
<li>データベース(database)</li>
<li>コレクション(collection)</li>
<li>ドキュメント(document)</li>
</ul>


<h2>データベース</h2>

<p>MySQLなどのRDBMSにおけるデータベース、という言葉とほぼ同じ意味として使われる。
データ管理の大元となる単位。</p>

<h2>コレクション</h2>

<p>RDBMSにおけるテーブル(table)に相当するもの。
MongoDBはスキーマレスなので、テーブルのように厳格なスキーマが決まっている訳ではなく、特定の対象に対するデータの集まり(正にコレクション)と言える。</p>

<h2>ドキュメント</h2>

<p>RDBMSにおけるレコード(record)に相当するもの。
各コレクションを構成する要素であり、BSONと呼ばれるJSONライクな形式で記述される。</p>

<!-- more -->


<h2>MongoDBの起動</h2>

<p>MongoDBの起動、停止には <code>service mongod</code> コマンドを使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo service mongod status
</span><span class='line'>mongod is stopped
</span><span class='line'><span class="nv">$ </span>sudo service mongod start
</span><span class='line'>Starting mongod:                                           <span class="o">[</span>  OK  <span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>sudo service mongod status
</span><span class='line'>mongod <span class="o">(</span>pid xxxx<span class="o">)</span> is running...
</span></code></pre></td></tr></table></div></figure>


<p>停止させる時には以下のようにする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo service mongod stop
</span><span class='line'>Stopping mongod:                                           <span class="o">[</span>  OK  <span class="o">]</span>
</span><span class='line'><span class="nv">$ </span>sudo service mongod status
</span><span class='line'>mongod is stopped
</span></code></pre></td></tr></table></div></figure>


<h2>DBの作成と選択</h2>

<p>MongoDBを起動したら、早速コンソールを立ち上げて操作してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mongo testdb
</span><span class='line'>MongoDB shell version: 2.6.6
</span><span class='line'>connecting to: testdb
</span><span class='line'>&gt;
</span></code></pre></td></tr></table></div></figure>


<p> <code>mongo</code> の後にDB名を指定してコンソールに入る。
このとき、存在しないDB名を指定すると新規でDBが作られる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; show dbs<span class="p">;</span>
</span><span class='line'>admin   <span class="o">(</span>empty<span class="o">)</span>
</span><span class='line'><span class="nb">local   </span>0.078GB
</span><span class='line'>mydb    0.078GB
</span><span class='line'>testdb  <span class="o">(</span>empty<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記コマンドで既存のDBを確認することができる。 <code>testdb</code> は新規で作成された。</p>

<p>使用するDBを変更するときは以下のようにする。今回は既に作ってある <code>mydb</code> を使うことにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; use mydb
</span><span class='line'>switched to db mydb
</span></code></pre></td></tr></table></div></figure>


<p>これで <code>mydb</code> に操作対象が移った</p>

<h1>コレクションの操作</h1>

<h2>コレクションの確認</h2>

<p>まず対象DBに存在するコレクションを確認してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; show collections<span class="p">;</span>
</span><span class='line'>system.indexes
</span><span class='line'>users
</span></code></pre></td></tr></table></div></figure>


<p>いま <code>system.indexes</code> と <code>users</code> というコレクションが存在することがわかる。</p>

<p> <code>system.indexes</code> は各DBのインデックス情報を管理するコレクションで、各DBにそれぞれ1つ作成されるもの</p>

<h2>コレクションの作成</h2>

<p>次に新たにコレクションを作成してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.createCollection<span class="o">(</span><span class="s1">&#39;items&#39;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;ok&quot;</span> : <span class="m">1</span> <span class="o">}</span>
</span><span class='line'>&gt; show collections<span class="p">;</span>
</span><span class='line'>items
</span><span class='line'>system.indexes
</span><span class='line'>users
</span></code></pre></td></tr></table></div></figure>


<p> <code>items</code> という新たなコレクションが作成された</p>

<h2>コレクションの名前の変更</h2>

<p> <code>items</code> コレクションの名前を <code>weapons</code> に変更する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.items.renameCollection<span class="o">(</span><span class="s1">&#39;weapons&#39;</span><span class="o">)</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;ok&quot;</span> : <span class="m">1</span> <span class="o">}</span>
</span><span class='line'>&gt; show collections<span class="p">;</span>
</span><span class='line'>system.indexes
</span><span class='line'>users
</span><span class='line'>weapons
</span></code></pre></td></tr></table></div></figure>


<p>コレクションの名前が変わったことが確認できる</p>

<h2>コレクションの削除</h2>

<p> <code>weapons</code> コレクションを削除する</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.weapons.drop<span class="o">()</span><span class="p">;</span>
</span><span class='line'><span class="nb">true</span>
</span><span class='line'>&gt; show collections<span class="p">;</span>
</span><span class='line'>system.indexes
</span><span class='line'>users
</span></code></pre></td></tr></table></div></figure>


<p> <code>weapons</code> コレクションが削除された</p>

<h1>ドキュメントの操作</h1>

<h2>ドキュメントの検索(find)</h2>

<p>コレクションの操作の次はドキュメントの操作について見ていく。
ドキュメントの検索には <code>find</code> メソッドを使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">()</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fd93ce8a5464641af4eb&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">10</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">67</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ee&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_3&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">51</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>対象のコレクションを指定して <code>find</code> を引数無しで実行すると全件検索となる</p>

<h2>条件を指定して検索</h2>

<p> <code>{key:value}</code> を指定して検索も可能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({</span>name:<span class="s2">&quot;sojiro&quot;</span><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fd93ce8a5464641af4eb&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">10</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>{key:value}</code> の指定には正規表現を用いることもできる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({</span>name:/sojiro_<span class="o">[</span>12<span class="o">]</span>/<span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">67</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ANDとOR</h2>

<p>検索で複数の条件を組み合わせるには <code>$and</code> や <code>$or</code> を使う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({</span>
</span><span class='line'>    <span class="nv">$and</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>name:/sojiro_<span class="o">[</span>12<span class="o">]</span>/<span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>score: <span class="o">{</span><span class="nv">$lt</span>: 60<span class="o">}}</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで <code>$lt</code> は「〜より小さい」を表す演算子</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({</span>
</span><span class='line'>    <span class="nv">$or</span>: <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>name:/sojiro_<span class="o">[</span>12<span class="o">]</span>/<span class="o">}</span>,
</span><span class='line'>        <span class="o">{</span>score: <span class="o">{</span><span class="nv">$gt</span>: 50<span class="o">}}</span>,
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">67</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ee&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_3&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">51</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここで <code>$gt</code> は「〜より大きい」を表す演算子</p>

<h2>検索結果の限定</h2>

<p>検索結果に特定のkeyだけを指定したい場合や、 <code>_id</code> を非表示にしたい場合がある</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({}</span>, <span class="o">{</span>name:1<span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fd93ce8a5464641af4eb&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ee&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_3&quot;</span> <span class="o">}</span>
</span><span class='line'>&gt; db.users.find<span class="o">({}</span>, <span class="o">{</span>name:0<span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fd93ce8a5464641af4eb&quot;</span><span class="o">)</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">10</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">67</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ee&quot;</span><span class="o">)</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">51</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>find()</code> の第二引数にkeyの表示、非表示を設定することができる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({}</span>, <span class="o">{</span>name:1, score:1<span class="o">})</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように複数のkeyに対して表示非表示の設定ができるが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({}</span>, <span class="o">{</span>name:1, score:0<span class="o">})</span><span class="p">;</span>
</span><span class='line'>error: <span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;$err&quot;</span> : <span class="s2">&quot;Can&#39;t canonicalize query: BadValue Projection cannot have a mix of inclusion and exclusion.&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;code&quot;</span> : 17287
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>key毎に表示非表示を別々に設定しようとすると怒られる</p>

<p>ただし、 <code>_id</code> だけは例外である</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({}</span>, <span class="o">{</span>name:1, _id:0<span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_3&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ドキュメントの挿入(insert)</h2>

<p>これまで見てきた <code>users</code> コレクションに新たなドキュメントを追加してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.insert<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span>, score:40<span class="o">})</span><span class="p">;</span>
</span><span class='line'>WriteResult<span class="o">({</span> <span class="s2">&quot;nInserted&quot;</span> : <span class="m">1</span> <span class="o">})</span>
</span><span class='line'>&gt; db.users.find<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a777d7a49abc8e743c71ac&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_4&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">40</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScriptの使用も可能</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.insert<span class="o">({</span>name:<span class="s2">&quot;sojiro_5&quot;</span>, score: Math.floor<span class="o">(</span>Math.random<span class="o">()</span> * 100<span class="o">)})</span><span class="p">;</span>
</span><span class='line'>WriteResult<span class="o">({</span> <span class="s2">&quot;nInserted&quot;</span> : <span class="m">1</span> <span class="o">})</span>
</span><span class='line'>&gt; db.users.find<span class="o">({</span>name:<span class="s2">&quot;sojiro_5&quot;</span><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a77886a49abc8e743c71ad&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_5&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">38</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ドキュメントの更新(update)</h2>

<p>MongoDBのupdateには少し癖がある。</p>

<p>更新するドキュメントが属するコレクションと、対象ドキュメントの条件を指定するところは直感的だが、特定のkeyのみupdateする場合は <code>$set</code> を使う必要がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a777d7a49abc8e743c71ac&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_4&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">40</span> <span class="o">}</span>
</span><span class='line'>&gt; db.users.update<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span><span class="o">}</span>, <span class="o">{</span><span class="nv">$set</span>: <span class="o">{</span>score:44<span class="o">}})</span><span class="p">;</span>
</span><span class='line'>WriteResult<span class="o">({</span> <span class="s2">&quot;nMatched&quot;</span> : 1, <span class="s2">&quot;nUpserted&quot;</span> : 0, <span class="s2">&quot;nModified&quot;</span> : <span class="m">1</span> <span class="o">})</span>
</span><span class='line'>&gt; db.users.find<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a777d7a49abc8e743c71ac&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_4&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">44</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>$set</code> を使わずにupdateを実行すると、対象ドキュメントの内容全てが書き変わる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span><span class="o">})</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a777d7a49abc8e743c71ac&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_4&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">44</span> <span class="o">}</span>
</span><span class='line'>&gt; db.users.update<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span><span class="o">}</span>, <span class="o">{</span>score:100<span class="o">})</span><span class="p">;</span>
</span><span class='line'>WriteResult<span class="o">({</span> <span class="s2">&quot;nMatched&quot;</span> : 1, <span class="s2">&quot;nUpserted&quot;</span> : 0, <span class="s2">&quot;nModified&quot;</span> : <span class="m">1</span> <span class="o">})</span>
</span><span class='line'>&gt; db.users.find<span class="o">({</span>name:<span class="s2">&quot;sojiro_4&quot;</span><span class="o">})</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p> <code>{name: "sojiro_4"}</code> に該当するドキュメントが <code>{score:100}</code> に書き換えられたため、 <code>{name:"sojiro_4"}</code> では検索結果に出てこない</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">()</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fd93ce8a5464641af4eb&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">10</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">67</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ee&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_3&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">51</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a777d7a49abc8e743c71ac&quot;</span><span class="o">)</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">100</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a77886a49abc8e743c71ad&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_5&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">38</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ドキュメントの削除(remove)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.find<span class="o">()</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fd93ce8a5464641af4eb&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">10</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">67</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ee&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_3&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">51</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a777d7a49abc8e743c71ac&quot;</span><span class="o">)</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">100</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a77886a49abc8e743c71ad&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_5&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">38</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ドキュメントの削除には <code>remove</code> メソッドを使い、このメソッドには <code>find</code> メソッドと同じように条件を指定することができる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; db.users.remove<span class="o">({</span>name:<span class="s2">&quot;sojiro_5&quot;</span><span class="o">})</span><span class="p">;</span>
</span><span class='line'>WriteResult<span class="o">({</span> <span class="s2">&quot;nRemoved&quot;</span> : <span class="m">1</span> <span class="o">})</span>
</span><span class='line'>&gt; db.users.find<span class="o">()</span><span class="p">;</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fd93ce8a5464641af4eb&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">10</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a3fee1ce8a5464641af4ec&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_1&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">20</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ed&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_2&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">67</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a40181ce8a5464641af4ee&quot;</span><span class="o">)</span>, <span class="s2">&quot;name&quot;</span> : <span class="s2">&quot;sojiro_3&quot;</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">51</span> <span class="o">}</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;54a777d7a49abc8e743c71ac&quot;</span><span class="o">)</span>, <span class="s2">&quot;score&quot;</span> : <span class="m">100</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上MongoDBの基本的な操作</p>

<h2>参照</h2>

<p><a href="http://dotinstall.com/lessons/basic_mongodb_v2">ドットインストール</a></p>
]]></content>
  </entry>
  
</feed>
