<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wordpress | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/wordpress/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2017-10-02T23:28:32+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WordPress on GAE]]></title>
    <link href="http://sojiro14.github.io/blog/2017/06/19/wordpress-on-gae/"/>
    <updated>2017-06-19T00:34:42+09:00</updated>
    <id>http://sojiro14.github.io/blog/2017/06/19/wordpress-on-gae</id>
    <content type="html"><![CDATA[<h2>GCP の事前準備</h2>

<p>以下の準備が事前に必要。ここでは割愛。</p>

<ul>
<li>GCP アカウントの作成</li>
<li>GCP プロジェクトの作成</li>
<li>課金の有効化</li>
<li>GCS(Google Cloud Storage)に default bucket を作成

<ul>
<li>default bucket: <code>YOUR_PROJECT_NAME.appspot.com</code></li>
</ul>
</li>
<li>Google Cloud SDK のインストール

<ul>
<li><a href="https://cloud.google.com/sdk/">https://cloud.google.com/sdk/</a></li>
</ul>
</li>
</ul>


<h2>Composer のインストール</h2>

<p>Composer は PHP のパッケージ管理ツール</p>

<blockquote><p>Composer is strongly inspired by node&rsquo;s npm and ruby&rsquo;s bundler.</p></blockquote>

<p>node の npm、ruby の bundler に強く影響を受けているようだ。</p>

<h3>手順</h3>

<p>PHP がインストールされていることを確認
<code>bash
$ php -v
PHP 5.5.38 (cli) (built: Aug 21 2016 21:48:49)
</code></p>

<p><a href="https://getcomposer.org/download/">こちら</a> の手順通り Composer をインストール
<code>bash
$ php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
$ php -r "if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
$ php composer-setup.php
$ php -r "unlink('composer-setup.php');"
</code></p>

<p>グローバルに呼び出せるようにしておく
<code>bash
$ mv composer.phar /usr/local/bin/composer
</code></p>

<h2>GCS へのアクセス権限変更</h2>

<p>作成したプロジェクトでログイン
<code>bash
$ gcloud auth login
$ gcloud config set project YOUR_PROJECT_NAME
</code></p>

<p>GCS のアクセス権更新
<code>bash
$ gsutil defacl ch -u AllUsers:R gs://YOUR_PROJECT_NAME.appspot.com
</code></p>

<h2>DB の setup</h2>

<p>Cloud SQL を使うので GCP の SQL メニューへ</p>

<ul>
<li><code>wp</code> という名前で MySQL のインスタンスを立てる

<ul>
<li>このとき第2世代を選択可</li>
<li>日本向けがメインであればリージョンは <code>asia-northeast1</code></li>
<li>マシンタイプは安さ重視なら <code>db-f1-micro</code> とする （このタイプで 30円/日 という印象）</li>
<li>他の設定はお好みで&hellip;</li>
</ul>
</li>
<li>立てたインスタンスに <code>wp</code> という名前のデータベースを作る</li>
<li><code>wp</code> というユーザーを作る

<ul>
<li>アクセス制御 → ユーザー → ユーザーアカウントを作成、とたどる</li>
</ul>
</li>
</ul>


<h2>WordPress の setup</h2>

<p>ローカルに WordPress 構築に必要な素材を用意する
<code>bash
$ git clone https://github.com/GoogleCloudPlatform/php-docs-samples.git
$ cd php-docs-samples/appengine/wordpress/
$ composer install
</code></p>

<p>setup の開始
&#8220;`bash
$ php wordpress-helper.php setup</p>

<h1>ここでいろいろインタラクティブに聞かれるので答える</h1>

<pre><code>※ リージョンを聞かれるが、 `asia-northeast1` がない場合は適当に答えておく

### DB_HOST 設定を変更
上記手順で WordPress setup 時に適切なリージョンが指定できなかった場合には自分で一部設定を変更する
</code></pre>

<p>cd YOUR_PROJECT_NAME/
vim wordpress/wp-config.php
<code>``
</code>/<em>* Production login info </em>/<code>以下の</code>DB_HOST` を適切なリージョンを用いて変更する</p>

<h2>Deploy</h2>

<p>GAE インスタンスに WordPress を deploy する
<code>bash
$ gcloud app deploy --promote --stop-previous-version app.yaml cron.yaml
</code>
最初はかなり多くのファイルを GCS にあげるのでそこそこ時間がかかる</p>

<h2>参照</h2>

<p><a href="https://github.com/GoogleCloudPlatform/php-docs-samples/tree/master/appengine/wordpress">https://github.com/GoogleCloudPlatform/php-docs-samples/tree/master/appengine/wordpress</a></p>
]]></content>
  </entry>
  
</feed>
