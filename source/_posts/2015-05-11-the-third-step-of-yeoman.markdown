---
layout: post
title: "初めてのYeoman (Grunt/Bowerとは)"
date: 2015-05-11 23:51:11 +0900
comments: true
categories: [Yeoman, Grunt, Bower]
---

初めてのYeoman というタイトルでこれまで2つのエントリを投稿しました。

* [初めてのYeoman (Yoを使った雛形作成)](http://blog.sojiro.me/blog/2015/05/06/the-first-step-of-yeoman/)
* [初めてのYeoman (Grunt/Bowerを使ってみる)](http://blog.sojiro.me/blog/2015/05/10/the-second-step-of-yeoman/)

ここであらためて Grunt と Bower について書いておきます。

特に技術的なことはないです。

## Grunt とは

> The JavaScript Task Runner

と公式サイトに書いてある。一言で言うと自動化、とも。

要するに予め決められたタスクをその通りに実行してくれるツールである。
（似たようなツールとして make や rake を使ったことがある）

そして js 界隈で話題のツールやプラグイン、フレームワークがどんどん移り変わって行くのと同様に Grunt も gulp にとって変わられると話題になっている。

しかしこれは自分でやりたいことを自動化したい場合の話であって、何か自分のやりたいことを他の人がやっていたら素直にその人の作ったタスクを使わせてもらえば良いわけである。

（そういう意味で他の人が作った設定に多少手を加えられるほどの理解はあると嬉しいかもしれないが、それは必要になったときで良い）

つまり Grunt でも gulp でも、自分がやりたいことを他の人が既にやっていればそれに乗っかれば良いし、他の人がまだやっていなければ、その時点で自分が一番書きやすい方法をつかって自動化すれば良い。

問題は自分にやりたいこと（自動化したいこと）があるかどうかであって、自分が自分以外の何者でもない以上、それはあるはずで、それに気づいてないとか、考え続けられないから僕はまだまだ三流以下ということなんですね。

## Bower とは

フロントエンドのパッケージマネージャーで

* cpan(perl)
* gem(ruby)
* Node.js(npm)

みたいなものだと理解している

使い方も対して変わらないですね

## Yeoman

ここまで Yeoman を見てきて Yeoman の要は yo のように思える

使う側の立場では雛形(generator)を選んで yo を実行したらやりたいことは既に決まっている

作る側としては最終的にどんな雛形を作るかが問題である

ここで雛形のルール（設定）を Grunt で規定し、フロントエンドを Bower で規定することをルールとしたら雛形もまとめやすいよね、ということか


## 最後に

なんだか雑なエントリになってしまった。。。

まずは Yeoman の恩恵をもっと受けまくってみます

## 参照

* [Grunt](http://gruntjs.com/)
* [Bower](http://bower.io/)

