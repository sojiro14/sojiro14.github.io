<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-02-21T03:02:31+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sed コマンドで置換]]></title>
    <link href="http://sojiro14.github.io/blog/2015/09/15/note-of-sed-command/"/>
    <updated>2015-09-15T01:58:45+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/09/15/note-of-sed-command</id>
    <content type="html"><![CDATA[<p>ファイルの中身を置換する必要があったので <code>sed</code> コマンドを使った。</p>

<h3>使うオプション</h3>

<p>今回使うのは</p>

<ul>
<li>変換処理の条件式を指定するための <code>e</code> オプション</li>
<li>変換してそのままファイルを上書きする <code>i</code> オプション</li>
</ul>


<h3>やってみる</h3>

<p>今回はこんな感じ
<code>bash
sed -ie '条件式' ファイル名
</code></p>

<pre><code class="bash">$ cat test
testtesttest

$ sed -ie 's/test/hoge/g' test

$ cat test
hogehogehoge

$ ls
test teste
</code></pre>

<p>指定したファイルは条件に沿って置換されているが、オリジナルの内容を持ったファイルも生成されている</p>

<p>オリジナルの内容を持ったファイルは使う sed コマンド（OS）によって元のファイル名に &lsquo;e&rsquo; が付いたり &lsquo;-e&rsquo; が付いたりする</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find コマンドの使い方]]></title>
    <link href="http://sojiro14.github.io/blog/2015/08/14/how-to-use-find-command/"/>
    <updated>2015-08-14T09:37:49+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/08/14/how-to-use-find-command</id>
    <content type="html"><![CDATA[<p>いつまでも <code>find</code> コマンドの使い方を覚えられないアホなのでメモしておく。。。</p>

<h3>基本的に</h3>

<pre><code class="bash">find [探すディレクトリ] -name 'ファイルの条件'
</code></pre>

<p>これだけは覚えとけ、と。</p>

<h3>たまには</h3>

<pre><code class="bash">find . -name '*.swp' -ok rm {} \;
</code></pre>

<p>見つけたファイルをそのまま次のコマンドに受け渡す <code>-ok</code> オプションもたまには使えるかも知れない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xdg-open コマンドとは]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/12/what-is-xdg-open-command/"/>
    <updated>2015-05-12T23:55:57+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/12/what-is-xdg-open-command</id>
    <content type="html"><![CDATA[<p>以前 <a href="http://blog.sojiro.me/blog/2015/05/10/the-second-step-of-yeoman/">初めてのYeoman (Grunt/Bowerを使ってみる)</a> というエントリで Grunt を実行したときに</p>

<pre><code class="bash">Warning: Command failed: /home/sojiro/yeoman/angular_fullstack/node_modules/open/vendor/xdg-open: line 584: xdg-mime: コマンドが見つかりません
</code></pre>

<p>と怒られたことがあったので <code>xdg-open</code> コマンドについて少し調べてみます</p>

<h2>xdg-open コマンドのインストール</h2>

<p>xdg-open の実体はシェルスクリプトである</p>

<p>すんなりインストールできるかと思いきや普段の CentOS に入れるのに手こずってしまった</p>

<p>どうやら Ubuntu との相性が良いようなので Vagrant で Ubuntu を立ち上げてそこでインストールしてみる</p>

<h3>Ubuntu のセットアップ</h3>

<p>Vagrant で Ubuntu 環境をセットアップする</p>

<p>まずは box のインストールから</p>

<pre><code class="bash">$ vagrant box add ubuntu http://goo.gl/8kWkm
==&gt; box: Adding box 'ubuntu' (v0) for provider: 
   box: Downloading: http://goo.gl/8kWkm
==&gt; box: Successfully added box 'ubuntu' (v0) for 'virtualbox'!
</code></pre>

<pre><code class="bash">$ vagrant box list
centos64 (virtualbox, 0)
ubuntu   (virtualbox, 0)
</code></pre>

<p>box がセットアップできたら立ち上げまで行ってしまう</p>

<pre><code class="bash">$ mkdir ubuntu
$ cd ubuntu/
$ vagrant init ubuntu
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
$ ls
Vagrantfile
$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==&gt; default: Importing base box 'ubuntu'...
==&gt; default: Matching MAC address for NAT networking...
==&gt; default: Setting the name of the VM: ubuntu_default_1432117537476_54763
==&gt; default: Fixed port collision for 22 =&gt; 2222. Now on port 2200.
==&gt; default: Clearing any previously set network interfaces...
==&gt; default: Preparing network interfaces based on configuration...
   default: Adapter 1: nat
==&gt; default: Forwarding ports...
   default: 22 =&gt; 2200 (adapter 1)
==&gt; default: Booting VM...
==&gt; default: Waiting for machine to boot. This may take a few minutes...
</code></pre>

<p>立ち上がったら以下のコマンドで Ubuntu 環境に入り、インストールの準備が完了する</p>

<pre><code class="bash">$ vagrant ssh
Welcome to Ubuntu 12.04.1 LTS (GNU/Linux 3.2.0-32-generic x86_64)

* Documentation:  https://help.ubuntu.com/

 System information as of Wed May 20 07:30:10 BRT 2015

 System load:  0.0               Processes:           73
 Usage of /:   11.7% of 7.87GB   Users logged in:     0
 Memory usage: 1%                IP address for eth0: 10.0.2.15
 Swap usage:   0%

 Graph this data and manage this system at https://landscape.canonical.com/

New release '14.04.2 LTS' available.
Run 'do-release-upgrade' to upgrade to it.
</code></pre>

<h3>インストール</h3>

<p>ここからいよいよ Ubuntu に <code>xdg-open</code> をインストールしていく</p>

<p>最初から入ってたらラッキーだなーと思いつつ打ってみる</p>

<pre><code class="bash">$ xdg-open
The program 'xdg-open' is currently not installed.  You can install it by typing:
sudo apt-get install xdg-utils
</code></pre>

<p>思いがけず大ヒントが返ってきたので従う</p>

<p>xdg-utils は <code>xdg-open</code> を内包するパッケージである</p>

<pre><code class="bash">$ sudo apt-get install xdg-utils
Reading package lists... Done
Building dependency tree
...
E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
</code></pre>

<p>エラーになってしまった</p>

<p>しかしまたヒントがあるので従う</p>

<pre><code class="bash">$ sudo apt-get install xdg-utils --fix-missing
Reading package lists... Done
Building dependency tree
...
Extracting templates from packages: 100%
Preconfiguring packages ...
Selecting previously unselected package ttf-dejavu-core.
</code></pre>

<p>晴れてインストール完了</p>

<h2>使ってみる</h2>

<ul>
<li>テキストファイル: 普通に開ける</li>
<li>画像ファイル: 開けるメソッドがなくエラー（環境立ち上げたばかりなので）</li>
</ul>


<h3>ディレクトリを指定</h3>

<pre><code class="bash">$ mkdir test
$ touch test/file
$ xdg-open test/
</code></pre>

<p><img src="/images/xdg_open/directory.png"></p>

<h3>URL を指定してみる</h3>

<pre><code class="bash">$ xdg-open http://blog.sojiro.me
</code></pre>

<p><img src="/images/xdg_open/blog.png"></p>

<pre><code class="bash">$ xdg-open http://google.com
</code></pre>

<p><img src="/images/xdg_open/google.png"></p>

<p>ブラウザはないが URL を指定すると CUI 上で Web ページが開ける</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.sojiro.me/blog/2015/05/03/the-first-step-for-vagrant/">初めてのVagrant</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWSのLinuxにMongoDBをインストール]]></title>
    <link href="http://sojiro14.github.io/blog/2014/12/30/installing-mongodb-on-linux-aws/"/>
    <updated>2014-12-30T13:32:15+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/12/30/installing-mongodb-on-linux-aws</id>
    <content type="html"><![CDATA[<p>AWSで借りたサーバーにmongoDBが入っていなかったのでインストールした手順</p>

<h2>YUMの設定</h2>

<p>パッケージ管理システムであるYUMにmongoDB用の設定を追加する
<code>bash
$ sudo vim /etc/yum.repos.d/mongodb.repo
</code>
<code>bash /etc/yum.repos.d/mongodb.repo
[mongodb]
name=MongoDB Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/
gpgcheck=0
enabled=1
</code>
これでYUMにmongoDBのリポジトリが追加される</p>

<!-- more -->


<h2>mongoDBのインストール</h2>

<p>今回は何も考えず最新のバージョンをインストールするので以下のコマンドで実行する
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo yum install mongodb-org
</span><span class='line'>読み込んだプラグイン:priorities, update-motd, upgrade-helper&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="p">&amp;</span>hellip<span class="p">;</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt; Package                                                  アーキテクチャー                             バージョン                                       リポジトリー                                   容量&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;インストール中:
</span><span class='line'> mongodb-org                                              x86_64                                       2.6.6-1                                          mongodb                                       4.9 k
</span><span class='line'>依存性関連でのインストールをします:
</span><span class='line'> mongodb-org-mongos                                       x86_64                                       2.6.6-1                                          mongodb                                       6.8 M
</span><span class='line'> mongodb-org-server                                       x86_64                                       2.6.6-1                                          mongodb                                       9.0 M
</span><span class='line'> mongodb-org-shell                                        x86_64                                       2.6.6-1                                          mongodb                                       4.3 M
</span><span class='line'> mongodb-org-tools                                        x86_64                                       2.6.6-1                                          mongodb                                        <span class="m">90</span> M&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;トランザクションの要約&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;インストール  <span class="m">1</span> パッケージ <span class="o">(</span>+4 個の依存関係のパッケージ<span class="o">)</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;総ダウンロード容量: <span class="m">110</span> M
</span><span class='line'>インストール容量: <span class="m">277</span> M
</span><span class='line'>Is this ok <span class="o">[</span>y/d/N<span class="o">]</span>: y
</span><span class='line'>Downloading packages:
</span><span class='line'><span class="p">&amp;</span>hellip<span class="p">;</span>
</span><span class='line'>完了しました!
</span></code></pre></td></tr></table></div></figure></p>

<h2>確認</h2>

<pre><code class="bash">$ mongo --version
MongoDB shell version: 2.6.6
</code></pre>

<p>インストール完了</p>

<h2>参照</h2>

<ul>
<li><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/">Install MongoDB on Red Hat Enterprise, CentOS, Fedora, or Amazon Linux</a></li>
<li><a href="http://qiita.com/nownabe/items/123a8fd04ff5252b3036">CentOS6.5にMongoDBをインストールする</a></li>
<li><a href="http://qiita.com/ykyk1218/items/1c1824e77fb8af78bcf5">MongoDBをLinuxにインストール</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxにRuby on Railsをインストールする]]></title>
    <link href="http://sojiro14.github.io/blog/2014/11/05/installing-ruby-on-rails-on-linux/"/>
    <updated>2014-11-05T03:58:11+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/11/05/installing-ruby-on-rails-on-linux</id>
    <content type="html"><![CDATA[<p>Ruby on Railsを使ってみたいと思い、AWSにインストールした手順。</p>

<h2>Ruby version 2.0.0 を RVMを使ってインストール</h2>

<p><a href="http://sojiro14.github.io/blog/2014/10/31/installing-latest-ruby-in-linux/">Linuxに最新のRubyをインストールする</a>を参照</p>

<h2>gemsetの作成</h2>

<blockquote><p>Rubyをインストールしたら、Railsのアプリケーションを実行するために必要な他のソフトウェア向けにシステムを構成する必要があります。通常、これはgemのインストールに関連します。gemとは自己完結型のRubyコードのパッケージです。バージョン番号の異なるgem同士がコンフリクトすることがあるため、一連のgemを自己完結的にまとめたgemsetというものを作成してバージョンを使い分けるのが便利です。
（引用: <a href="http://railstutorial.jp/chapters/beginning?version=4.0#top">Ruby on Rails チュートリアル</a>）</p></blockquote>

<p>以下のコマンドでgemsetを作成する。
<code>bash
$ rvm use 2.0.0@railstutorial_rails_4_0 --create --default
</code></p>

<blockquote><p>上のコマンドを実行すると、Ruby 2.0.0に関連付けられたrailstutorial_rails_4_0というgemsetを作成し (&ndash;create)、その場でgemsetを有効にし (use)、gemsetをデフォルトに設定 (&ndash;default) します。これにより、ターミナルウィンドウを開いたときに2.0.0@railstutorial_rails_4_0というRubyとgemsetの組み合わせが常に選択されるようになります。
（引用: <a href="http://railstutorial.jp/chapters/beginning?version=4.0#top">Ruby on Rails チュートリアル</a>）</p></blockquote>

<h2>RubyGemsのインストール</h2>

<p>AWSには始めからgemがインストールされていて、PATHは以下。
<code>bash
$ which gem
/usr/bin/gem
</code>
RVMでRubyをインストールするとPATHが上書きされる。
<code>bash
$ which gem
~/.rvm/rubies/ruby-2.0.0-p594/bin/gem
</code>
今回はチュートリアルに合わせてgemのバージョンを更新する
<code>bash
$ gem update --system 2.0.3
</code>
gemの設定ファイルである <code>.gemrc</code> に自動生成されるドキュメントである <code>ri</code> と <code>rdoc</code> の自動生成を抑制する設定をする
<code>bash
$ vim .gemrc
$ cat .gemrc
install: --no-rdoc --no-ri
update:  --no-rdoc --no-ri
</code></p>

<h2>Railsをインストールする</h2>

<p>いよいよRailsをインストールする
<code>bash
$ gem install rails --version 4.0.5
</code>
インストール完了。
以下のコマンドで確認する
<code>bash
$ rails -v
Rails 4.0.5
</code>
Railsがインストールされたことを確認できた</p>

<h2>参照</h2>

<p><a href="http://railstutorial.jp/chapters/beginning?version=4.0#top">Ruby on Rails チュートリアル</a></p>
]]></content>
  </entry>
  
</feed>
