<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-02-21T02:28:05+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[InnoDBにおけるSQL別ロックの挙動]]></title>
    <link href="http://sojiro14.github.io/blog/2015/10/27/how-locks-behave-by-sqls-on-innodb/"/>
    <updated>2015-10-27T21:17:32+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/10/27/how-locks-behave-by-sqls-on-innodb</id>
    <content type="html"><![CDATA[<p>研修時代に書いた InnoDB に関するメモ第二弾。</p>

<p>ロックの挙動に関しては基礎の基礎でちょっと考えれば分かるものの、開発しているとふとしたところで考慮が漏れていたりするので注意したい。</p>

<h2>SELECT &hellip; FROM</h2>

<p>一貫性読み取りであり、データベースのスナップショットを読み取り、トランザクションの遮断レベルが SERIALIZABLE に設定されなければロックは設定しません。SERIALIZABLE レベルの場合、検索時に直面したインデックスレコード上に共有ネクストキーロックが設定されます。</p>

<h2>SELECT &hellip; FROM &hellip; LOCK IN SHARE MODE</h2>

<p><em>検索時に直面したすべてのインデックスレコード上</em>に <strong>共有ネクストキーロック</strong> が設定されます。</p>

<h2>SELECT &hellip; FROM &hellip; FOR UPDATE</h2>

<p><em>検索で特定されたインデックスレコード</em>に対し、 <strong>排他ネクストキーロック</strong> が設定され、ほかのセッションが SELECT &hellip; FROM &hellip; LOCK IN SHARE MODE を実行したり、特定のトランザクション遮断レベルで読み取りを行ったりできないようにします。 <strong>ただし、ギャップロックの部分に関しては共有ロックとなります</strong> 。</p>

<h2>UPDATE &hellip; WHERE &hellip;</h2>

<p><em>検索が直面するすべてのレコード上</em>に <strong>排他ネクストキーロック</strong> を設定します。</p>

<h2>DELETE FROM &hellip; WHERE &hellip;</h2>

<p><em>検索が直面するすべてのレコード上</em>に <strong>排他ネクストキーロック</strong> を設定します。</p>

<h2>INSERT</h2>

<p><strong>挿入される行に排他ロック</strong> を設定します。このロックはネクストキーロックではなくインデックスレコードロックである (つまりギャップロックが存在しない) ため、ほかのセッションは挿入行の前にあるギャップへの挿入を自由に行えます。</p>

<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4873116384/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873116384&amp;linkCode=as2&amp;tag=sojiro14-22">実践ハイパフォーマンスMySQL 第3版</a></li>
<li><a href="ftp://ftp.ntu.edu.tw/MySQL/doc/refman/5.1-olh/ja/innodb-locks-set.html">ftp://ftp.ntu.edu.tw/MySQL/doc/refman/5.1-olh/ja/innodb-locks-set.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[InnoDBにおけるロックの種類]]></title>
    <link href="http://sojiro14.github.io/blog/2015/10/25/kinds-of-locks-of-innodb/"/>
    <updated>2015-10-25T23:02:53+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/10/25/kinds-of-locks-of-innodb</id>
    <content type="html"><![CDATA[<p>MySQL でよく使う InnoDB のロックについて研修時代に書いたメモ。</p>

<h2>種類</h2>

<ul>
<li>レコードロック: <strong>インデックスレコードの</strong> ロック</li>
<li>ギャップロック: インデックスレコード間にあるギャップのロック、先頭のインデックスレコードの前や末尾のインデックスレコードの後にあるギャップのロック、のいずれか</li>
<li>ネクストキーロック: インデックスレコードに対するレコードロックと、そのインデックスレコードの前、または後ろにあるギャップに対するギャップロックとを組み合わせたもの</li>
</ul>


<h2>InnoDBの行ロック（レコードロック）</h2>

<p>InnoDBは行ロックができる、とよく言いますが、
正確には <strong>インデックスレコード</strong> にロックをかけているので、
primary key や、unique key といったレコードを一意に特定できるインデックスを使用せずにロックをかけるとテーブルロックの様な挙動を示します。（実際には隠しクラスタインデックスが生成、使用される。）</p>

<h2>ギャップロック、ネクストキーロック</h2>

<p>ギャップロック、ネクストキーロックは</p>

<ul>
<li>範囲を指定して（複数のレコードにまたがって）ロックを獲得しようとしたとき</li>
<li>存在しないレコードに対してロックを獲得しようとしたとき</li>
</ul>


<p>のみ起こりうる。</p>

<p>また、 <strong>ギャップロックは常に共有ロックと同じ挙動</strong> を示す</p>

<h2>例</h2>

<p>前提：id(primary key)が10, 20, 30のレコードが入っているテーブル</p>

<pre><code class="sql">select from table where id = 15 for update;    #id 11~19にギャップロック
</code></pre>

<pre><code class="sql">select from table where id &lt; 15 for update;    #id ~20にネクストキーロック
</code></pre>

<pre><code class="sql">select from table where id &lt; 20 for update;    #id ~20にネクストキーロック
</code></pre>

<pre><code class="sql">select from table where id &lt;= 20 for update;   #id ~30にネクストキーロック
</code></pre>

<pre><code class="sql">select from table where id &gt; 15 for update;    #id 11~にギャップロック
</code></pre>

<pre><code class="sql">select from table where id = 35 for update;    #id 31~にギャップロック
</code></pre>

<h2>参照</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4873116384/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873116384&amp;linkCode=as2&amp;tag=sojiro14-22">実践ハイパフォーマンスMySQL 第3版</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLにおけるNOT NULLカラムへのインサート時の挙動]]></title>
    <link href="http://sojiro14.github.io/blog/2014/10/20/behavior-of-inserting-rows-at-not-null-column-on-mysql/"/>
    <updated>2014-10-20T13:44:28+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/10/20/behavior-of-inserting-rows-at-not-null-column-on-mysql</id>
    <content type="html"><![CDATA[<p>MySQLでカラムにNOT NULLを指定した際、そのカラムに対するインサート操作による挙動が特殊なのでまとめる。</p>

<h2>単列インサートと複数列インサートで挙動が変わる</h2>

<p> <code>NOT NULL</code>を指定したカラムを含むテーブルへのインサートでは、一度に1行のみ挿入する単列インサートと、一度に複数行を挿入する複数列インサート（バルクインサート）で挙動が変わる。</p>

<p><a href="http://dev.mysql.com/doc/refman/5.6/en/insert.html">MySQLマニュアル</a>からの抜粋</p>

<blockquote><p>Inserting NULL into a column that has been declared NOT NULL. For multiple-row INSERT statements or INSERT INTO &hellip; SELECT statements, the column is set to the implicit default value for the column data type. This is 0 for numeric types, the empty string (&lsquo;&rsquo;) for string types, and the “zero” value for date and time types. INSERT INTO &hellip; SELECT statements are handled the same way as multiple-row inserts because the server does not examine the result set from the SELECT to see whether it returns a single row. (For a single-row INSERT, no warning occurs when NULL is inserted into a NOT NULL column. Instead, the statement fails with an error.)</p></blockquote>

<p>単列インサートの場合は<code>NOT NULL</code>が指定されたカラムに<code>NULL</code>値が挿入されるとそのクエリはエラーとなって失敗するが、複数列インサートの場合は警告(warning)を発するものの、クエリは正常に受け付けられる。</p>

<p>その際、<code>NULL</code>値が指定された各カラムにはそれぞれのカラムのデータ型の暗黙的なデフォルト値が挿入される。（数値型なら<code>0</code>、文字列型なら空文字<code>''</code>、etc&hellip;）</p>

<h2>検証</h2>

<ul>
<li>MySQLのバージョンは5.1.69

<ul>
<li>ただしマニュアルの該当箇所はバージョン5.7まで変更がないため、どのバージョンでも同じ挙動と思われる</li>
</ul>
</li>
<li>テーブル定義は以下
<code>mysql
CREATE TABLE `not_null_test` (
`id` int(10) unsigned NOT NULL,
`test_score` int(10) unsigned NOT NULL,
`created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</code></li>
</ul>


<h3>単列インサート</h3>

<pre><code class="mysql">mysql&gt; insert into
not_null_test
(id, test_score, created_at)
values
(1, NULL, NULL);

ERROR 1048 (23000): Column 'test_score' cannot be null
</code></pre>

<h3>複数列インサート</h3>

<pre><code class="mysql">mysql&gt; insert into
not_null_test
(id, test_score, created_at)
values
(1, NULL, NULL),
(2, NULL, NULL);

Query OK, 2 rows affected, 2 warnings (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 2 

mysql&gt; select * from not_null_test;
+----+------------+---------------------+
| id | test_score | created_at          |
+----+------------+---------------------+
|  1 |          0 | 2014-10-18 13:35:10 |
|  2 |          0 | 2014-10-18 13:35:10 |
+----+------------+---------------------+
2 rows in set (0.00 sec)
</code></pre>

<p>※ timestampにテーブル定義で設定したデフォルト値<code>'0000-00-00 00:00:00'</code>ではなく、型のデフォルト値である現在時刻が入っている点に注意</p>
]]></content>
  </entry>
  
</feed>
