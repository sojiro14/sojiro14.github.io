<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongodb | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/mongodb/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2015-01-28T12:41:36+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[初めてのMongoDB]]></title>
    <link href="http://sojiro14.github.io/blog/2015/01/02/the-first-step-for-mongodb/"/>
    <updated>2015-01-02T02:20:55+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/01/02/the-first-step-for-mongodb</id>
    <content type="html"><![CDATA[<p>NoSQLの流れを汲むMongoDBを初めて使ってみるにあたり、基本的な操作をまとめてみる。</p>

<h1>基本的な用語</h1>

<ul>
<li>データベース(database)</li>
<li>コレクション(collection)</li>
<li>ドキュメント(document)</li>
</ul>


<h2>データベース</h2>

<p>MySQLなどのRDBMSにおけるデータベース、という言葉とほぼ同じ意味として使われる。
データ管理の大元となる単位。</p>

<h2>コレクション</h2>

<p>RDBMSにおけるテーブル(table)に相当するもの。
MongoDBはスキーマレスなので、テーブルのように厳格なスキーマが決まっている訳ではなく、特定の対象に対するデータの集まり(正にコレクション)と言える。</p>

<h2>ドキュメント</h2>

<p>RDBMSにおけるレコード(record)に相当するもの。
各コレクションを構成する要素であり、BSONと呼ばれるJSONライクな形式で記述される。</p>

<h2>MongoDBの起動</h2>

<p>MongoDBの起動、停止には <code>service mongod</code> コマンドを使う
<code>bash
$ sudo service mongod status
mongod is stopped
$ sudo service mongod start
Starting mongod:                                           [  OK  ]
$ sudo service mongod status
mongod (pid xxxx) is running...
</code>
停止させる時には以下のようにする
<code>bash
$ sudo service mongod stop
Stopping mongod:                                           [  OK  ]
$ sudo service mongod status
mongod is stopped
</code></p>

<h2>DBの作成と選択</h2>

<p>MongoDBを起動したら、早速コンソールを立ち上げて操作してみる。
&#8220;` bash
$ mongo testdb
MongoDB shell version: 2.6.6
connecting to: testdb</p>

<blockquote><pre><code> ```mongo``` の後にDB名を指定してコンソールに入る。
 このとき、存在しないDB名を指定すると新規でDBが作られる。
</code></pre>

<p>show dbs;
admin   (empty)
local   0.078GB
mydb    0.078GB
testdb  (empty)
<code>
上記コマンドで既存のDBを確認することができる。</code>testdb&#8220;` は新規で作成された。</p></blockquote>

<p>使用するDBを変更するときは以下のようにする。今回は既に作ってある <code>mydb</code> を使うことにする。
&#8220;` bash</p>

<blockquote><p>use mydb
switched to db mydb
<code>
これで</code>mydb&#8220;` に操作対象が移った</p></blockquote>

<h1>コレクションの操作</h1>

<h2>コレクションの確認</h2>

<p>まず対象DBに存在するコレクションを確認してみる
&#8220;` bash</p>

<blockquote><p>show collections;
system.indexes
users
<code>
いま</code>system.indexes<code>と</code>users&#8220;` というコレクションが存在することがわかる。</p></blockquote>

<p> <code>system.indexes</code> は各DBのインデックス情報を管理するコレクションで、各DBにそれぞれ1つ作成されるもの</p>

<h2>コレクションの作成</h2>

<p>次に新たにコレクションを作成してみる
&#8220;` bash</p>

<blockquote><p>db.createCollection(&lsquo;items&rsquo;);
{ &ldquo;ok&rdquo; : 1 }
show collections;
items
system.indexes
users
<code>
</code>items&#8220;` という新たなコレクションが作成された</p></blockquote>

<h2>コレクションの名前の変更</h2>

<p> <code>items</code> コレクションの名前を <code>weapons</code> に変更する
&#8220;` bash</p>

<blockquote><p>db.items.renameCollection(&lsquo;weapons&rsquo;);
{ &ldquo;ok&rdquo; : 1 }
show collections;
system.indexes
users
weapons
&#8220;`
コレクションの名前が変わったことが確認できる</p></blockquote>

<h2>コレクションの削除</h2>

<p> <code>weapons</code> コレクションを削除する
&#8220;` bash</p>

<blockquote><p>db.weapons.drop();
true
show collections;
system.indexes
users
<code>
</code>weapons&#8220;` コレクションが削除された</p></blockquote>

<h1>ドキュメントの操作</h1>

<h2>ドキュメントの検索(find)</h2>

<p>コレクションの操作の次はドキュメントの操作について見ていく。
ドキュメントの検索には <code>find</code> メソッドを使う
&#8220;` bash</p>

<blockquote><p>db.users.find();
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a3fd93ce8a5464641af4eb&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro&rdquo;, &ldquo;score&rdquo; : 10 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a3fee1ce8a5464641af4ec&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_1&rdquo;, &ldquo;score&rdquo; : 20 }
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ed&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_2&rdquo;, &ldquo;score&rdquo; : 67 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ee&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_3&rdquo;, &ldquo;score&rdquo; : 51 }
<code>
対象のコレクションを指定して</code>find&#8220;` を引数無しで実行すると全件検索となる</p></blockquote>

<h2>条件を指定して検索</h2>

<p> <code>{key:value}</code> を指定して検索も可能
&#8220;` bash</p>

<blockquote><p>db.users.find({name:&ldquo;sojiro&rdquo;});
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a3fd93ce8a5464641af4eb&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro&rdquo;, &ldquo;score&rdquo; : 10 }
<code>
</code>{key:value}<code>の指定には正規表現を用いることもできる
</code> bash
db.users.find({name:/sojiro</em>[12]/});
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a3fee1ce8a5464641af4ec&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_1&rdquo;, &ldquo;score&rdquo; : 20 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ed&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_2&rdquo;, &ldquo;score&rdquo; : 67 }
&#8220;`</p></blockquote>

<h2>ANDとOR</h2>

<p>検索で複数の条件を組み合わせるには <code>$and</code> や <code>$or</code> を使う
&#8220;` bash</p>

<blockquote><p>db.users.find({
    $and: [
        {name:/sojiro<em>[12]/},
        {score: {$lt: 60}},
    ]
});
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a3fee1ce8a5464641af4ec&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_1&rdquo;, &ldquo;score&rdquo; : 20 }
<code>
ここで</code>$lt&#8220;` は「〜より小さい」を表す演算子</p></blockquote>

<pre><code class="bash">&gt; db.users.find({
    $or: [
        {name:/sojiro_[12]/},
        {score: {$gt: 50}},
    ]
});
{ "_id" : ObjectId("54a3fee1ce8a5464641af4ec"), "name" : "sojiro_1", "score" : 20 }
{ "_id" : ObjectId("54a40181ce8a5464641af4ed"), "name" : "sojiro_2", "score" : 67 }
{ "_id" : ObjectId("54a40181ce8a5464641af4ee"), "name" : "sojiro_3", "score" : 51 }
</code></pre>

<p>ここで <code>$gt</code> は「〜より大きい」を表す演算子</p>

<h2>検索結果の限定</h2>

<p>検索結果に特定のkeyだけを指定したい場合や、 <code>_id</code> を非表示にしたい場合がある
&#8220;` bash</p>

<blockquote><p>db.users.find({}, {name:1});
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a3fd93ce8a5464641af4eb&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro&rdquo; }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a3fee1ce8a5464641af4ec&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_1&rdquo; }
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ed&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_2&rdquo; }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ee&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_3&rdquo; }
db.users.find({}, {name:0});
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a3fd93ce8a5464641af4eb&rdquo;), &ldquo;score&rdquo; : 10 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a3fee1ce8a5464641af4ec&rdquo;), &ldquo;score&rdquo; : 20 }
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ed&rdquo;), &ldquo;score&rdquo; : 67 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ee&rdquo;), &ldquo;score&rdquo; : 51 }
<code>
</code>find()<code>の第二引数にkeyの表示、非表示を設定することができる
</code> bash
db.users.find({}, {name:1, score:1});
<code>
のように複数のkeyに対して表示非表示の設定ができるが、
</code> bash
db.users.find({}, {name:1, score:0});
error: {
    &ldquo;$err&rdquo; : &ldquo;Can&rsquo;t canonicalize query: BadValue Projection cannot have a mix of inclusion and exclusion.&rdquo;,
    &ldquo;code&rdquo; : 17287
}
&#8220;`
key毎に表示非表示を別々に設定しようとすると怒られる</p></blockquote>

<p>ただし、 <code>_id</code> だけは例外である
&#8220;` bash</p>

<blockquote><p>db.users.find({}, {name:1, _id:0});
{ &ldquo;name&rdquo; : &ldquo;sojiro&rdquo; }
{ &ldquo;name&rdquo; : &ldquo;sojiro_1&rdquo; }
{ &ldquo;name&rdquo; : &ldquo;sojiro_2&rdquo; }
{ &ldquo;name&rdquo; : &ldquo;sojiro_3&rdquo; }
&#8220;`</p></blockquote>

<h2>ドキュメントの挿入(insert)</h2>

<p>これまで見てきた <code>users</code> コレクションに新たなドキュメントを追加してみる
&#8220;` bash</p>

<blockquote><p>db.users.insert({name:&ldquo;sojiro_4&rdquo;, score:40});
WriteResult({ &ldquo;nInserted&rdquo; : 1 })
db.users.find({name:&ldquo;sojiro_4&rdquo;});
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a777d7a49abc8e743c71ac&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_4&rdquo;, &ldquo;score&rdquo; : 40 }
<code>
JavaScriptの使用も可能
</code> bash
db.users.insert({name:&ldquo;sojiro_5&rdquo;, score: Math.floor(Math.random() * 100)});
WriteResult({ &ldquo;nInserted&rdquo; : 1 })
db.users.find({name:&ldquo;sojiro_5&rdquo;});
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a77886a49abc8e743c71ad&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_5&rdquo;, &ldquo;score&rdquo; : 38 }
&#8220;`</p></blockquote>

<h2>ドキュメントの更新(update)</h2>

<p>MongoDBのupdateには少し癖がある。</p>

<p>更新するドキュメントが属するコレクションと、対象ドキュメントの条件を指定するところは直感的だが、特定のkeyのみupdateする場合は <code>$set</code> を使う必要がある。
&#8220;` bash</p>

<blockquote><p>db.users.find({name:&ldquo;sojiro_4&rdquo;});
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a777d7a49abc8e743c71ac&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_4&rdquo;, &ldquo;score&rdquo; : 40 }
db.users.update({name:&ldquo;sojiro_4&rdquo;}, {$set: {score:44}});
WriteResult({ &ldquo;nMatched&rdquo; : 1, &ldquo;nUpserted&rdquo; : 0, &ldquo;nModified&rdquo; : 1 })
db.users.find({name:&ldquo;sojiro_4&rdquo;});
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a777d7a49abc8e743c71ac&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_4&rdquo;, &ldquo;score&rdquo; : 44 }
<code>
</code>$set<code>を使わずにupdateを実行すると、対象ドキュメントの内容全てが書き変わる
</code> bash
db.users.find({name:&ldquo;sojiro_4&rdquo;});
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a777d7a49abc8e743c71ac&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_4&rdquo;, &ldquo;score&rdquo; : 44 }
db.users.update({name:&ldquo;sojiro_4&rdquo;}, {score:100});
WriteResult({ &ldquo;nMatched&rdquo; : 1, &ldquo;nUpserted&rdquo; : 0, &ldquo;nModified&rdquo; : 1 })
db.users.find({name:&ldquo;sojiro_4&rdquo;});
<code>
</code>{name: &ldquo;sojiro_4&rdquo;}<code>に該当するドキュメントが</code>{score:100}<code>に書き換えられたため、</code>{name:&ldquo;sojiro_4&rdquo;}<code>では検索結果に出てこない
</code> bash
db.users.find();
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a3fd93ce8a5464641af4eb&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro&rdquo;, &ldquo;score&rdquo; : 10 }
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a3fee1ce8a5464641af4ec&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_1&rdquo;, &ldquo;score&rdquo; : 20 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ed&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_2&rdquo;, &ldquo;score&rdquo; : 67 }
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ee&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_3&rdquo;, &ldquo;score&rdquo; : 51 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a777d7a49abc8e743c71ac&rdquo;), &ldquo;score&rdquo; : 100 }
{ &ldquo;_id&rdquo; : ObjectId(&ldquo;54a77886a49abc8e743c71ad&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_5&rdquo;, &ldquo;score&rdquo; : 38 }
&#8220;`</p></blockquote>

<h2>ドキュメントの削除(remove)</h2>

<pre><code class="bash">&gt; db.users.find();
{ "_id" : ObjectId("54a3fd93ce8a5464641af4eb"), "name" : "sojiro", "score" : 10 }
{ "_id" : ObjectId("54a3fee1ce8a5464641af4ec"), "name" : "sojiro_1", "score" : 20 }
{ "_id" : ObjectId("54a40181ce8a5464641af4ed"), "name" : "sojiro_2", "score" : 67 }
{ "_id" : ObjectId("54a40181ce8a5464641af4ee"), "name" : "sojiro_3", "score" : 51 }
{ "_id" : ObjectId("54a777d7a49abc8e743c71ac"), "score" : 100 }
{ "_id" : ObjectId("54a77886a49abc8e743c71ad"), "name" : "sojiro_5", "score" : 38 }
</code></pre>

<p>ドキュメントの削除には <code>remove</code> メソッドを使い、このメソッドには <code>find</code> メソッドと同じように条件を指定することができる
&#8220;` bash</p>

<blockquote><p>db.users.remove({name:&ldquo;sojiro_5&rdquo;});
WriteResult({ &ldquo;nRemoved&rdquo; : 1 })
db.users.find();
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a3fd93ce8a5464641af4eb&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro&rdquo;, &ldquo;score&rdquo; : 10 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a3fee1ce8a5464641af4ec&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_1&rdquo;, &ldquo;score&rdquo; : 20 }
{ &ldquo;<em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ed&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_2&rdquo;, &ldquo;score&rdquo; : 67 }
{ &ldquo;</em>id&rdquo; : ObjectId(&ldquo;54a40181ce8a5464641af4ee&rdquo;), &ldquo;name&rdquo; : &ldquo;sojiro_3&rdquo;, &ldquo;score&rdquo; : 51 }
{ &ldquo;_id&rdquo; : ObjectId(&ldquo;54a777d7a49abc8e743c71ac&rdquo;), &ldquo;score&rdquo; : 100 }
&#8220;`</p></blockquote>

<p>以上MongoDBの基本的な操作</p>

<h2>参照</h2>

<p><a href="http://dotinstall.com/lessons/basic_mongodb_v2">ドットインストール</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWSのLinuxにMongoDBをインストール]]></title>
    <link href="http://sojiro14.github.io/blog/2014/12/30/installing-mongodb-on-linux-aws/"/>
    <updated>2014-12-30T13:32:15+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/12/30/installing-mongodb-on-linux-aws</id>
    <content type="html"><![CDATA[<p>AWSで借りたサーバーにmongoDBが入っていなかったのでインストールした手順</p>

<h2>YUMの設定</h2>

<p>パッケージ管理システムであるYUMにmongoDB用の設定を追加する
<code>bash
$ sudo vim /etc/yum.repos.d/mongodb.repo
</code>
<code>bash /etc/yum.repos.d/mongodb.repo
[mongodb]
name=MongoDB Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/
gpgcheck=0
enabled=1
</code>
これでYUMにmongoDBのリポジトリが追加される</p>

<h2>mongoDBのインストール</h2>

<p>今回は何も考えず最新のバージョンをインストールするので以下のコマンドで実行する
&#8220;` bash
$ sudo yum install mongodb-org
読み込んだプラグイン:priorities, update-motd, upgrade-helper</p>

<h1>&hellip;</h1>

<h1> Package                                                  アーキテクチャー                             バージョン                                       リポジトリー                                   容量</h1>

<p>インストール中:
 mongodb-org                                              x86_64                                       2.6.6-1                                          mongodb                                       4.9 k
依存性関連でのインストールをします:
 mongodb-org-mongos                                       x86_64                                       2.6.6-1                                          mongodb                                       6.8 M
 mongodb-org-server                                       x86_64                                       2.6.6-1                                          mongodb                                       9.0 M
 mongodb-org-shell                                        x86_64                                       2.6.6-1                                          mongodb                                       4.3 M
 mongodb-org-tools                                        x86_64                                       2.6.6-1                                          mongodb                                        90 M</p>

<h1>トランザクションの要約</h1>

<p>インストール  1 パッケージ (+4 個の依存関係のパッケージ)</p>

<p>総ダウンロード容量: 110 M
インストール容量: 277 M
Is this ok [y/d/N]: y
Downloading packages:
&hellip;
完了しました!
&#8220;`</p>

<h2>確認</h2>

<pre><code class="bash">$ mongo --version
MongoDB shell version: 2.6.6
</code></pre>

<p>インストール完了</p>

<h2>参照</h2>

<ul>
<li><a href="http://docs.mongodb.org/manual/tutorial/install-mongodb-on-red-hat-centos-or-fedora-linux/">Install MongoDB on Red Hat Enterprise, CentOS, Fedora, or Amazon Linux</a></li>
<li><a href="http://qiita.com/nownabe/items/123a8fd04ff5252b3036">CentOS6.5にMongoDBをインストールする</a></li>
<li><a href="http://qiita.com/ykyk1218/items/1c1824e77fb8af78bcf5">MongoDBをLinuxにインストール</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにNode.jsとMongoDBをインストールしたメモ]]></title>
    <link href="http://sojiro14.github.io/blog/2014/12/07/installing-node-dot-js-and-mongodb-in-mac/"/>
    <updated>2014-12-07T18:30:01+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/12/07/installing-node-dot-js-and-mongodb-in-mac</id>
    <content type="html"><![CDATA[<p>某勉強会でNode.jsとMongoDBを使うということがあったので、インストールした際のメモを残しておく。</p>

<h2>Homebrewのインストール</h2>

<p><a href="http://sojiro14.github.io/blog/2014/04/19/irc-bot-by-hubot/">HUBOTを使ったirc-bot作成メモ</a>でも触れた通り、以下の方法でインストールを試みる。
&#8220;` bash
$ ruby -e &ldquo;$(curl -fsSL <a href="https://raw.github.com/mxcl/homebrew/go/install">https://raw.github.com/mxcl/homebrew/go/install</a>)&rdquo;
Whoops, the Homebrew installer has moved! Please instead run:</p>

<p>ruby -e &ldquo;$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)&rdquo;</p>

<p>Also, please ask wherever you got this link from to update it to the above.
Thanks!
&#8220;`
どうやらHomebrewのインストーラーの場所があれから変わったようで、以下のパスで再度実行。</p>

<p>コマンドのレスポンスとして新しいパスをメッセージに残してくれるのはありがたい。
<code>bash
$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code>
これでHomebrewのインストールは完了したのであとはサクサク必要なものをインストールするのみ。</p>

<h2>Node.jsのインストール</h2>

<pre><code class="bash">$ brew install node
</code></pre>

<p>これで完了。
<code>bash
$ node -v
v0.10.33
</code>
npmもばっちり入っている
<code>bash
$ npm -v
2.1.10
</code></p>

<h2>MongoDBのインストール</h2>

<p>これも以下を実行するだけ。
<code>bash
$ brew install mongodb
</code>
<code>bash
$ mongo --version
MongoDB shell version: 2.6.5
</code>
おしまい。</p>

<h2>参照</h2>

<ul>
<li><a href="http://sojiro14.github.io/blog/2014/04/19/irc-bot-by-hubot/">HUBOTを使ったirc-bot作成メモ</a></li>
<li><a href="http://qiita.com/hajimeni/items/3c93fd981e92f66a20ce">Macにhomebrewを使ってmongodbをインストール</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
