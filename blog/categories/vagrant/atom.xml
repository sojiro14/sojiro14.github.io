<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vagrant | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/vagrant/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-07-22T08:50:16+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant Provisioning の謎]]></title>
    <link href="http://sojiro14.github.io/blog/2015/09/17/mystery-of-vagrant-provisioning/"/>
    <updated>2015-09-17T05:21:08+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/09/17/mystery-of-vagrant-provisioning</id>
    <content type="html"><![CDATA[<p>Vagrant で立てた CentOS の仮想環境にちょっとした環境構築をしようと、provision ファイルを作って <code>vagrant provision</code> で実行しようとしたところ RVM のインストールから先が上手くいかなかった。</p>

<p>（ <code>vagrant provision</code> に関しては <a href="http://blog.sojiro.me/blog/2015/05/03/the-first-step-for-vagrant/">過去のエントリ</a> に記載があります）</p>

<p>provision ファイルの該当箇所は以下</p>

<pre><code class="bash"># ruby and rails
curl -L https://get.rvm.io | bash -s
source ~/.profile

rvm requirements
rvm install 2.0.0 --with-openssl-dir=$HOME/.rvm/usr
</code></pre>

<p>上記コマンドのうち、</p>

<pre><code class="bash">curl -L https://get.rvm.io | bash -s
</code></pre>

<p>だけが実行できているが、このコマンドの結果も意図したものとなっていない。
それ以降のコマンドは失敗する。</p>

<p>まだ原因は良くわかっていない。</p>

<ul>
<li>RVM のインストール自体はできている</li>
<li>どのユーザー（vagrant? root?）で実行されているのか分からない</li>
<li>vagrant ユーザーに対しては <code>rvm</code> コマンドの path が通っているが、root ユーザーには通っていない</li>
<li>provision 実行のログ的には root で実行しているように見える</li>
<li><code>vagrant ssh</code> して手動でコマンドを実行すると意図した結果になる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初めてのVagrant]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/03/the-first-step-for-vagrant/"/>
    <updated>2015-05-03T22:18:11+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/03/the-first-step-for-vagrant</id>
    <content type="html"><![CDATA[<p>仮想環境構築ツールのVagrantが便利らしいという噂を聞いて使ってみたところ確かに便利でした。</p>

<p>以前VirtualBox上での環境構築に手間取った経験があったのでこれは今後も積極的に使って行きたいと思い、最初の手順をメモします。</p>

<p>前提として今回仮想化ソフトとしてはVirtualBoxを使うのでインストールされているという前提で以下を書きます。</p>

<h2>Vagrantのインストール</h2>

<p>まずはVagrantをインストールする</p>

<p><a href="https://www.vagrantup.com/downloads.html">https://www.vagrantup.com/downloads.html</a></p>

<p>こちらのダウンロードフォームから使っているOSに合ったものをダウンロードすればOK</p>

<p>ダウンロードしたファイルをポチポチやってインストールが完了するので以下のコマンドで確かめる</p>

<pre><code class="bash">$ vagrant --version
Vagrant 1.7.2
</code></pre>

<h2>boxの追加</h2>

<p>Vagrantでは仮想環境それぞれの設定をboxという単位で管理する</p>

<p>現在管理しているboxの情報は <code>vagrant box list</code> で確認できる</p>

<pre><code class="bash">$ vagrant box list
There are no installed boxes! Use `vagrant box add` to add some.
</code></pre>

<p>最初はboxが何もインストールされていないのでこのような結果</p>

<p>boxは自分で作成することもできるが、既に誰かが作ってくれたものを取り込むこともできる</p>

<p><a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a></p>

<p>こちらのサイトでは有志が様々なboxを提供してくれているので今回はこちらを使わせていただくことにする</p>

<p>リストからインストールするboxを決めたら、以下のコマンドで追加する</p>

<pre><code class="bash">$ vagrant box add 名前 boxファイル
</code></pre>

<p>今回はインストールするboxをcentos64という名前で管理するために以下のようにした</p>

<pre><code class="bash">$ vagrant box add centos64 http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20131103.box
==&gt; box: Adding box 'centos64' (v0) for provider: 
   box: Downloading: http://developer.nrel.gov/downloads/vagrant-boxes/CentOS-6.4-x86_64-v20131103.box
==&gt; box: Successfully added box 'centos64' (v0) for 'virtualbox'!
</code></pre>

<p> <code>vagrant box list</code> コマンドで確認するとcentos64という名前でboxがインストールされたことがわかる</p>

<pre><code class="bash">$ vagrant box list
centos64 (virtualbox, 0)
</code></pre>

<h2>仮想環境を立ち上げる</h2>

<p>boxを追加したら早速そのboxを使って仮想環境を立ち上げる</p>

<p>今回は <code>~/virtual_machines/centos64/</code> というディレクトリでこの仮想環境を管理することにする</p>

<p>まずは <code>vagrant init</code> コマンドで環境立ち上げの準備をする</p>

<pre><code class="bash">$ cd ~/virtual_machines/centos64
$ vagrant init centos64
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
</code></pre>

<p>このinitコマンドを打つことで <code>Vagrantfile</code> が作られ、VirtualBox上にも仮想環境が現れる</p>

<p> <code>Vagrantfile</code> ではこの仮想環境の設定を規定している</p>

<p>ここまで準備が完了したらいよいよ環境を立ち上げる <code>vagrant up</code> コマンドを使う</p>

<pre><code class="bash">$ vagrant up
Bringing machine 'default' up with 'virtualbox' provider...
==&gt; default: Importing base box 'centos64'...
==&gt; default: Matching MAC address for NAT networking...
...
</code></pre>

<p>VirtualBox上で仮想環境が立ち上がっていることを確認できたら成功</p>

<p>仮想環境の状態は <code>vagrant status</code> コマンドでも確認できる</p>

<pre><code class="bash">$ vagrant status
Current machine states:

default                   running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
</code></pre>

<h2>立ち上げた仮想環境に入る</h2>

<p>立ち上げた仮想環境に入るのは非常に簡単で、管理ディレクトリ上で <code>vagrant ssh</code> コマンドを打てばよい</p>

<pre><code class="bash">$ vagrant ssh
Welcome to your Vagrant-built virtual machine.
</code></pre>

<p>後は通常通り好きなように仮想環境を使える</p>

<h2>ネットワークの設定をする</h2>

<p>今回立ち上げた環境では主にWebサービスの開発を行いたいのでローカルからこの環境にアクセスするための設定をする</p>

<p>ネットワークの設定は <code>Vagrantfile</code> に規定されているのでこのファイルを変更する</p>

<pre><code class="bash">$ vim Vagrantfile
$ cat Vagrantfile
...
config.vm.network "private_network", ip: "192.168.33.10"
...
</code></pre>

<p>private_networkの設定をしている行のコメントアウトを外すことでIP <code>192.168.33.10</code> でアクセス可能になる</p>

<p> <code>Vagrantfile</code> の設定を変更したら <code>vagrant reload</code> コマンドで設定をリロードしてやる必要がある</p>

<pre><code class="bash">$ vagrant reload
==&gt; default: Attempting graceful shutdown of VM...
==&gt; default: Clearing any previously set forwarded ports...
==&gt; default: Clearing any previously set network interfaces...
==&gt; default: Preparing network interfaces based on configuration...
...
</code></pre>

<h2>決まった操作の設定</h2>

<p>仮想環境を立ち上げた後、Webサーバーの設定など毎回やる操作がある場合はそれらを予め記述しておいてVagrant側で実行することができる(provisioning)</p>

<p>まずは <code>Vagrantfile</code> に設定を追加する。設定する行は <code>config.vm.provision</code> の行。</p>

<p>元々コメントアウトで記述があるようにインラインで <code>Vagrantfile</code> 内に直接書くこともできるが、以下のように設定することで外部ファイルに書き出すこともできる</p>

<pre><code>config.vm.provision :shell, :path =&gt; "provision.sh"
</code></pre>

<pre><code class="bash provision.sh">sudo yum -y install httpd
sudo service httpd start
sudo chkconfig httpd on
...
</code></pre>

<p> <code>Vagrantfile</code> を設定したら忘れず <code>vagrant reload</code></p>

<p>その後provisionの実行は以下のコマンド</p>

<pre><code class="bash">$ vagrant provision
</code></pre>

<h2>参照</h2>

<ul>
<li><a href="http://dotinstall.com/lessons/basic_vagrant">Vagrant入門</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
