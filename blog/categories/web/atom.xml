<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-02-21T03:29:54+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「トークン」とはなにか]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/07/what-is-token/"/>
    <updated>2015-05-07T23:57:03+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/07/what-is-token</id>
    <content type="html"><![CDATA[<p>半年以上前のある夜、大先輩エンジニアの方に隠れ家的なオシャレな大人のBarに連れて行っていただきました。</p>

<p>その日はそれまでに既に結構飲んでいまして、本当に恥ずかしながらそこでお話した内容のほとんどは覚えていないのですが、一つだけ鮮明に覚えているのは、</p>

<p><strong> 「トークン」ってなに？ </strong></p>

<p>と私に説明を求められたことです。なにかを答えはしたのですが、かなり曖昧な答えになっていたと思います。</p>

<p>さらに最悪なのは、その後その大先輩が語られた内容を覚えていないことです。これは最悪です。次の日に「トークンって結局なんでしたっけ？」などとも聞けないのでそれ以来いろいろ考えてきたことを書きます。</p>

<h2>トークンとはなにか</h2>

<p>Webの開発をしているとしばしばトークンというものが登場します</p>

<ul>
<li>Access Token</li>
<li>ID Token</li>
<li>JWT(JSON Web Token)</li>
<li>etc&hellip;</li>
</ul>


<p>このトークンとはなにか、という話です</p>

<p>そもそもトークンなんて日本語はないのだから、トークンはトークン、という感じなのですが、あえて日本語にすると</p>

<p><strong> 「証」（しょう） </strong></p>

<p>という漢字一文字が合うのかな、と思います。</p>

<ul>
<li>通行証</li>
<li>身分証</li>
<li>免許証</li>
<li>etc&hellip;</li>
</ul>


<h2>トークンの性質</h2>

<p>これらに共通するのは</p>

<ul>
<li>誰かが発行し</li>
<li>何かが書いてある</li>
</ul>


<p>ということではないでしょうか</p>

<p>特に「何かが書いてある」、という部分は様々な内容を持ち得ます</p>

<ul>
<li>通行証には、ある場所を通ること、ある場所に到達することを許可する旨が書かれています</li>
<li>身分証には、それを持っている人が誰なのか、それを示す内容が書かれています</li>
<li>免許証には、誰に何をすることを許可するのかが書かれています</li>
</ul>


<p>このように考えると「トークン」という言葉がしっくりくるのでは、と現在思っております。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTとはなにか]]></title>
    <link href="http://sojiro14.github.io/blog/2014/09/14/what-is-rest/"/>
    <updated>2014-09-14T13:57:07+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/09/14/what-is-rest</id>
    <content type="html"><![CDATA[<p>APIを実装することになり、今更ながらWebのアーキテクチャスタイルであるRESTとはなにか理解するためにまとめてみた。</p>

<h2>Webのアーキテクチャスタイル</h2>

<p>Webのアーキテクチャスタイルはクライアント/サーバーというスタイルを中心に、いくつかの制限（アーキテクチャ）を複合的に組み合わせたREST(Representational State Transfer)を理想としている</p>

<h2>RESTはどのようなスタイルなのか</h2>

<p>RESTは以下のスタイルを複合的に組み合わせたアーキテクチャである</p>

<ul>
<li>クライアント/サーバー</li>
<li>ステートレスサーバー</li>
<li>キャッシュ</li>
<li>統一インターフェース</li>
<li>階層化システム</li>
<li>コードオンデマンド</li>
</ul>


<h3>クライアント/サーバー</h3>

<p>WebではHTTPでクライアントとサーバーが通信する、クライアント/サーバーアーキテクチャを採用している。クライアントはサーバーにリクエストを送り、サーバーはそれに対してレスポンスを返す。</p>

<p>ユーザーインターフェースはクライアントに任せればよく、サーバーは処理に専念できるので様々なデバイス（PC・携帯電話・ゲーム機）に対応でき、サーバーの冗長化も容易である。</p>

<h3>ステートレスサーバー</h3>

<p>ステートフル/ステートレスという考え方があるが、サーバーがステートレスなやり取りを前提としていること。</p>

<p>ステートフル/ステートレスに関しては以下のエントリを参照</p>

<ul>
<li><a href="http://sojiro14.github.io/blog/2014/09/13/stateful-and-stateless/">ステートフル/ステートレスとはどういうことか</a></li>
</ul>


<h3>キャッシュ</h3>

<p>一度取得したリソースをクライアント側である程度の期間保持して使い回すこと。</p>

<ul>
<li>メリット

<ul>
<li>同じリソースを取得するためにその都度クライアント/サーバー間で通信する必要がなくなる</li>
<li>これによりネットワークの帯域節約や処理の高速化を実現できる</li>
</ul>
</li>
<li>デメリット

<ul>
<li>適切に制御しないと意図せず古いリソースを参照してしまうことがある</li>
<li>特に大規模なシステムではどこで何がキャッシュされているか正確に把握するのは容易ではない</li>
</ul>
</li>
</ul>


<h3>統一インターフェース</h3>

<p>リソースに対する操作を統一したインターフェースで行う。</p>

<p>HTTP/1.1ではリソースに対するメソッドが8つのみ定義されている。このようにインターフェースを限定することで様々なコンポーネントが生まれても統一された仕様としてリソースへの操作が行われ、それぞれの独立性が保たれることで多様性を受け入れることができる。</p>

<h3>階層化システム</h3>

<p>統一インターフェースを採用することにより、クライアント/サーバー間にプロキシなどのコンポーネントを設置してもクライアントはそのままリクエストを送ることができる。</p>

<p>これにより大規模システムではロードバランサーを導入したり、HTTPインターフェースを持たないコンポーネントに対してHTTPインターフェースをもつサーバーを返して処理をするなどの階層化が可能となる。</p>

<p>このようなアーキテクチャを階層化システムと呼ぶ。</p>

<h3>コードオンデマンド</h3>

<p>プログラムをサーバーからクライアントが受け取り、それをクライアント上で実行するアーキテクチャスタイル。JavaScriptやFlashがこれに該当する。</p>

<ul>
<li>メリット

<ul>
<li>サーバーと都度通信することなくクライアント側のみで処理できることが増える</li>
<li>これによりユーザーのアクションに対する処理の速度が向上する</li>
</ul>
</li>
<li>デメリット

<ul>
<li>クライアント/サーバー間でやり取りされるリソースが不明確になる</li>
<li>クライアント側の裁量が増える分、サーバーとやり取りされるリソースの内容が明確ではなくなる</li>
</ul>
</li>
</ul>


<h2>RESTful</h2>

<p>RESTの思想に忠実に設計されていることをRESTfulである、と言う。</p>

<p>RESTは上記の通り分散ネットワークを効率的に、可用性・冗長性高く利用するための理論であり、Webが理想とするアーキテクチャスタイルである。</p>

<p>この思想に則った設計がされることで多様なシステムの中にも仕様の統一感が生まれ、Webの世界が広がったと言える。</p>

<h2>参考</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4774142042/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774142042&amp;linkCode=as2&amp;tag=sojiro14-22">Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ステートフル ステートレスとはどういうことか]]></title>
    <link href="http://sojiro14.github.io/blog/2014/09/13/stateful-and-stateless/"/>
    <updated>2014-09-13T18:00:03+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/09/13/stateful-and-stateless</id>
    <content type="html"><![CDATA[<p>コンポーネント間のやり取りにはステートフル/ステートレスという考え方がある。FTPではステートフルなやり取りが、HTTPではステートレスなやり取りが採用されいるが、それぞれの特徴についてまとめてみる。</p>

<h2>セッション状態（アプリケーション状態）</h2>

<p>システムにログインしてからログアウトするまでの一連の操作をセッションと呼ぶ。その一連の操作の中のそれぞれの状態をセッション状態と呼ぶ。</p>

<h2>ステートフル</h2>

<p>ステートフルなやり取りではサーバーはクライアントのセッション状態を保持している。</p>

<ul>
<li>メリット

<ul>
<li>やり取りが完結に済む</li>
<li>それによりネットワークの帯域を節約できる</li>
</ul>
</li>
<li>デメリット

<ul>
<li>クライアントの状態を都度把握しておかなければいけないのでクライアントが増えると負荷も増える</li>
<li>サーバーを複数台設置する場合にはそれぞれのサーバー間でクライアントの状態を同期しなければいけない</li>
<li>これらの理由によりスケールアウトには向かない</li>
</ul>
</li>
</ul>


<h2>ステートレス</h2>

<p>ステートレスなやり取りではサーバーはクライアントのセッション情報を保持しない。</p>

<ul>
<li>メリット

<ul>
<li>クライアントのリクエストは状態に依存せず、常にリソースに対する操作に必要十分な情報となる</li>
<li>よってサーバーが増えてもそのままのリクエストでいつも同じリソースに対する操作ができる</li>
<li>このためスケールアウトに向いている</li>
<li>また処理がクライアントの状態に依らないので処理がシンプルになる</li>
</ul>
</li>
<li>デメリット

<ul>
<li>やり取りが冗長になりがちである</li>
<li>またリソースへの操作が必要になる度にそのやり取りを繰り返す必要がある</li>
<li>これによりネットワークの帯域を消費し、処理も遅くなる</li>
<li>サーバーが状態を保持していないのでエラーが起きたときのハンドリングが複雑になりがちである</li>
</ul>
</li>
</ul>


<h2>参考</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4774142042/ref=as_li_tf_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774142042&amp;linkCode=as2&amp;tag=sojiro14-22">Webを支える技術 -HTTP、URI、HTML、そしてREST (WEB+DB PRESS plus)</a></p>
]]></content>
  </entry>
  
</feed>
