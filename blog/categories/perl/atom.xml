<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-08-13T19:29:25+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Plenv で Perl を管理する]]></title>
    <link href="http://sojiro14.github.io/blog/2016/03/05/management-perl-versions-by-plenv/"/>
    <updated>2016-03-05T07:14:26+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/03/05/management-perl-versions-by-plenv</id>
    <content type="html"><![CDATA[<p>Perl をバージョンごと、あるいはプロジェクトごとに管理するためのツールである plenv の導入手順メモ</p>

<h2>plenv をインストールする</h2>

<h3>homebrew の update</h3>

<pre><code class="bash">$ brew update
Updated Homebrew from c0fae05 to bfe20af.
No changes to formulae.
</code></pre>

<p>先ほど <a href="http://blog.sojiro.me/blog/2016/03/05/management-ruby-versions-by-rbenv/">rbenv をインストールする手順</a> で同じことをやったばかりなので更新なし</p>

<h3>plenv と perl-build のインストール</h3>

<p>これも <a href="http://blog.sojiro.me/blog/2016/03/05/management-ruby-versions-by-rbenv/">どこか</a> で見たような手順</p>

<p><code>perl-build</code> は <code>plenv</code> のプラグイン</p>

<pre><code class="bash">$ brew install plenv perl-build
==&gt; Downloading https://github.com/tokuhirom/plenv/archive/2.2.0.tar.gz
==&gt; Downloading from https://codeload.github.com/tokuhirom/plenv/tar.gz/2.2.0
...
</code></pre>

<h2>plenv init</h2>

<pre><code class="bash">$ echo 'eval "$(plenv init -)"' &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile
</code></pre>

<p> <code>plenv init -</code> でやっていることは以下の通り</p>

<pre><code class="bash">$ plenv init -
export PATH="/Your/Home/Directory/.plenv/shims:${PATH}"
export PLENV_SHELL=bash
source '/usr/local/Cellar/plenv/2.2.0/libexec/../completions/plenv.bash'

plenv() {
  local command

  command="$1"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "`plenv "sh-$command" "$@"`";;
  *)
    command plenv "$command" "$@";;
  esac
}
</code></pre>

<h2>perl のインストール</h2>

<p>インストールできる perl のバージョンを確認
<code>bash
$ plenv install -l
Available versions:
 5.6.0
 5.6.1-TRIAL1
 5.6.1-TRIAL2
...
</code></p>

<p>最新の安定版であるバージョン <code>5.22.1</code> をインストールする
<code>bash
$ plenv install 5.22.1
Installing 5.22.1 as 5.22.1
...
</code></p>

<p>インストールされたバージョンを確認
<code>bash
$ plenv versions
* system (set by /My/Home/Directory/.plenv/version)
  5.22.1
</code></p>

<h2>使用する perl を設定</h2>

<pre><code class="bash">$ plenv global 5.22.1
$ plenv versions
  system
* 5.22.1 (set by /My/Home/Directory/.plenv/version)
</code></pre>

<h2>perl に cpanm をインストールする</h2>

<p>現在使用している perl に <code>cpanm</code> をインストールする
<code>bash
$ plenv install-cpanm
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   314    0   314    0     0   2078      0 --:--:-- --:--:-- --:--:--  2079
100  296k  100  296k    0     0   367k      0 --:--:-- --:--:-- --:--:-- 2135k
...
</code></p>

<p> <code>cpanm</code> のパスが変わっていることを確認
<code>bash
$ which cpanm
/My/Home/Directory/.plenv/shims/cpanm
</code></p>

<h2>参照</h2>

<ul>
<li><a href="https://github.com/tokuhirom/plenv">plenv</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minil を使った Changes ファイルの更新]]></title>
    <link href="http://sojiro14.github.io/blog/2016/02/21/how-to-write-changes-with-minil/"/>
    <updated>2016-02-21T01:24:33+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/02/21/how-to-write-changes-with-minil</id>
    <content type="html"><![CDATA[<p>CPAN モジュールの bug fix を行ったので修正版をリリース。</p>

<p> <code>minil</code> 様様と思いながら <code>minil release</code> コマンドを打つのだが、
いつも Changes ファイルの更新のところで、どこに何を書けば良いのだっけ？となってしまうのでここにメモしておくことにした。</p>

<h2> の下に書く</h2>

<p>今回のリリースだとこうなった</p>

<pre><code>Revision history for Perl extension JSON-MergePatch

{\{$NEXT}}

    - (bug fix) diff() :when the same hash-refs are present in the hash values of source and target (thanks bessarabov)
    - refactoring

0.02 2015-09-13T09:08:20Z

    - use JSON::MaybeXS and fix keys arg

0.01 2015-07-02T18:29:20Z

    - original version
</code></pre>

<p> <code></code> となっているところにバージョンやら日付やらが入る。</p>

<h2>参照</h2>

<p><a href="http://perldoc.jp/docs/modules/Minilla-v0.6.4/lib/Minilla/Tutorial.pod#Make32a32new32build">Minilla チュートリアルドキュメント</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPAN モジュールのリリース]]></title>
    <link href="http://sojiro14.github.io/blog/2015/07/06/release-cpan-module/"/>
    <updated>2015-07-06T02:19:14+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/07/06/release-cpan-module</id>
    <content type="html"><![CDATA[<p>上司にお膳立てされ、後輩にお尻を叩かれ、やっとのことで CPAN モジュールをリリースしました。</p>

<p>前回のエントリに続き、リリースの手順を記します。</p>

<h2>モジュールの作成</h2>

<p>ここがコアの部分ですが、内容は作るモジュールに依るので割愛。編集すべきは以下のファイルです。</p>

<ul>
<li>lib/ 配下のプログラム</li>
<li>t/ 配下のテストプラグラム</li>
<li>cpanfile</li>
</ul>


<p>cpanfile の作成は <code>scan-prereqs-cpanfile</code> を使うと便利です。</p>

<p>このコマンドは <strong>App::scan_prereqs_cpanfile</strong> モジュールで提供されています。</p>

<pre><code class="bash">cpanm App::scan_prereqs_cpanfile
scan-prereqs-cpanfile &gt; cpanfile
</code></pre>

<h2>テスト</h2>

<p>モジュールの作成ができたら test を実行しますが、このとき <code>minil test</code> コマンドを使うと Changes や META.json、README.md が自動で編集されます。</p>

<pre><code class="bash">$ minil test
Creating working directory: /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
cp Build.PL /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/Build.PL
cp Changes /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/Changes
cp LICENSE /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/LICENSE
cp META.json /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/META.json
cp README.md /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/README.md
cp cpanfile /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/cpanfile
cp lib/JSON/MergePatch.pm /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/lib/JSON/MergePatch.pm
cp minil.toml /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/minil.toml
cp t/00_compile.t /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7/t/00_compile.t
Building /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
Retrieving meta data from lib/JSON/MergePatch.pm.
Name: JSON::MergePatch
Abstract: It's new $module
Version: 0.01
fatal: bad default revision 'HEAD'
Writing MANIFEST file
Writing release tests: xt/minilla/minimum_version.t
Writing release tests: xt/minilla/cpan_meta.t
Writing release tests: xt/minilla/pod.t
Writing release tests: xt/minilla/spelling.t
Writing release tests: xt/minilla/permissions.t
[5DuYQ9x7] $ perl -I. Build.PL
Creating new 'Build' script for 'JSON-MergePatch' version '0.01'
[5DuYQ9x7] $ perl -I. Build build
cp lib/JSON/MergePatch.pm blib/lib/JSON/MergePatch.pm
t/00_compile.t .. ok   
All tests successful.
Files=1, Tests=1,  0 wallclock secs ( 0.01 usr  0.01 sys +  0.03 cusr  0.01 csys =  0.06 CPU)
Result: PASS
Removing /user/home_directory/git/cpan/JSON-MergePatch/.build/5DuYQ9x7
</code></pre>

<h2>リリース</h2>

<p>テストが通ったらいよいよリリースします。</p>

<p>CPAN へのリリースには PAUSE ID が必要です。取得方法は<a href="http://blog.sojiro.me/blog/2015/05/17/get-pause-id/">こちら</a>。</p>

<p>リリースには <code>minil release</code> コマンドを使います。</p>

<pre><code class="bash">$ minil release

Release engineering requires Version::Next, but it is not available. Please install Version::Next using your preferred CPAN client at ...
</code></pre>

<p> <strong>Version::Next</strong> がないと怒られたので入れて再度実行。</p>

<pre><code class="bash">$ cpanm Version::Next
...

$ minil release

Release engineering requires CPAN::Uploader, but it is not available. Please install CPAN::Uploader using your preferred CPAN client at ...
</code></pre>

<p>今度は <strong>CPAN::Uploader</strong> がないと怒られたので入れて再度実行。</p>

<pre><code class="bash">$ cpanm CPAN::Uploader
...

$ minil release

Retrieving meta data from lib/JSON/MergePatch.pm.
Name: JSON::MergePatch
Abstract: JSON Merge Patch implementation
Version: 0.01
Next Release? [0.01] 
Name: JSON::MergePatch
Abstract: JSON Merge Patch implementation
Version: 0.01
...
All tests successful.
Files=8, Tests=67,  0 wallclock secs ( 0.04 usr  0.03 sys +  0.18 cusr  0.04 csys =  0.29 CPU)
Result: PASS
Wrote JSON-MergePatch-0.01.tar.gz
Upload to CPAN
Release to CPAN ? [y/n]   y
missing user argument at
</code></pre>

<p>リリースバージョンの確認と、 CPAN にリリースするかの確認に答えていざリリース、と思いきや</p>

<pre><code class="bash">missing user argument at
</code></pre>

<p>と怒られました。</p>

<p>どうやら <code>~/.pause</code> ファイルに PAUSE のユーザー情報を記載する必要があるようです。</p>

<pre><code class="bash">$ vim ~/.pause
$ cat ~/.pause
user SOJIRO
password your_password
</code></pre>

<p>再度実行</p>

<pre><code class="bash">$ minil release

Retrieving meta data from lib/JSON/MergePatch.pm.
Name: JSON::MergePatch
Abstract: JSON Merge Patch implementation
Version: 0.01
Next Release? [0.01] 
Name: JSON::MergePatch
Abstract: JSON Merge Patch implementation
Version: 0.01
...
All tests successful.
Files=8, Tests=67,  0 wallclock secs ( 0.04 usr  0.03 sys +  0.18 cusr  0.05 csys =  0.30 CPU)
Result: PASS
Wrote JSON-MergePatch-0.01.tar.gz
Upload to CPAN
Release to CPAN ? [y/n]   y
registering upload with PAUSE web server
POSTing upload for /user/home_directory/git/cpan/JSON-MergePatch/.build/ilpDOKuE/JSON-MergePatch-0.01.tar.gz to https://pause.perl.org/pause/authenquery
PAUSE add message sent ok [200]
Name: JSON::MergePatch
Abstract: JSON Merge Patch implementation
Version: 0.01
[JSON-MergePatch] $ git commit -a -m Checking in changes prior to tagging of version 0.01.
Changelog diff is:
diff --git a/Changes b/Changes
index 643c7bc..dae7daa 100644
--- a/Changes
+++ b/Changes
@@ -2,5 +2,7 @@ Revision history for Perl extension JSON-MergePatch

 

+0.01 2015-07-02T18:29:20Z
+
     - original version

[master 3bf0db2] Checking in changes prior to tagging of version 0.01.

 2 files changed, 17 insertions(+), 1 deletion(-)
Pushing to origin
[JSON-MergePatch] $ git push origin master
Counting objects: 7, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 831 bytes | 0 bytes/s, done.
Total 4 (delta 2), reused 0 (delta 0)
To git@github.com:sojiro14/JSON-MergePatch.git

   9c8c207..3bf0db2  master -&gt; master

[JSON-MergePatch] $ git tag 0.01
[JSON-MergePatch] $ git push origin tag 0.01
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:sojiro14/JSON-MergePatch.git

 * [new tag]         0.01 -&gt; 0.01

Removing /user/home_directory/git/cpan/JSON-MergePatch/.build/ilpDOKuE
</code></pre>

<p>テストが実行された後、CPAN にリリースされました。最後にその時点の tag が切られて完了。</p>

<p>ついに CPAN モジュールをリリースしてしまいました。メンテナンスちゃんとしなくては。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></li>
<li><a href="http://hotolab.net/blog/first_minil/">はじめてのCPAN Authorになろうとして困ったメモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPAN モジュールのための雛形を作る]]></title>
    <link href="http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module/"/>
    <updated>2015-07-02T00:13:24+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module</id>
    <content type="html"><![CDATA[<p>いよいよ CPAN モジュールを作ろうと思います。</p>

<p>しかし既存の CPAN モジュールを見てみると本体のプログラムの他に見慣れないファイルがちらほら。。。</p>

<p>正直どんなファイル群で CPAN モジュールを構成すれば良いのか分かっていないわけです。</p>

<p>そんな悩みを解決してくれたのが <strong>Minilla</strong> モジュールです。</p>

<h2>Minilla のインストール</h2>

<p> <strong>Minilla</strong> は CPAN モジュールなので <code>cpanm</code> コマンドでインストールできます。</p>

<pre><code class="bash">$ cpanm Minilla
--&gt; Working on Minilla
Fetching http://cpan.metacpan.org/authors/id/T/TO/TOKUHIROM/Minilla-v2.4.1.tar.gz ... OK
Configuring Minilla-v2.4.1 ... OK
...
Building and testing Minilla-v2.4.1 ... OK
Successfully installed Minilla-v2.4.1
11 distributions installed
</code></pre>

<h2>雛形の作成</h2>

<p> <strong>Minilla</strong> がインストールできたら早速 CPAN モジュールの雛形を作ります。 <code>minil new Your::Module</code> で作成できます。</p>

<p>今回は <strong>JSON::MergePatch</strong> というモジュールを作ります。</p>

<pre><code class="bash">$cd ~/git/cpan
$ minil new JSON::MergePatch
Writing lib/JSON/MergePatch.pm
Writing Changes
Writing t/00_compile.t
Writing .travis.yml
Writing .gitignore
Writing LICENSE
Writing cpanfile
Initializing git JSON::MergePatch
[JSON-MergePatch] $ git init
Initialized empty Git repository in /user/home_directory/git/cpan/JSON-MergePatch/.git/
Retrieving meta data from lib/JSON/MergePatch.pm.
Name: JSON::MergePatch
Abstract: It's new $module
Version: 0.01
fatal: bad default revision 'HEAD'
[JSON-MergePatch] $ git add .
Finished to create JSON::MergePatch
</code></pre>

<p>これで雛形ができました。</p>

<p>そしてこれから雛形を編集していくわけですが、自分で編集するのは基本的に以下のファイルのみです。</p>

<ul>
<li>lib/ 配下のプログラム</li>
<li>t/ 配下のテストプラグラム</li>
<li>cpanfile</li>
</ul>


<p>以下のファイルはそれぞれ <code>minil hoge</code> コマンド実行時に自動で編集されます。</p>

<ul>
<li>Changes: リリース時に更新される</li>
<li>META.json: cpanfile に合わせて更新される</li>
<li>README.md: lib/Your/Module.pm の記述から更新される</li>
</ul>


<h2>つづく</h2>

<p>次回はいよいよ CPAN へ公開する際の手順を書こうと思います。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replyを試してみる]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/09/try-reply/"/>
    <updated>2015-05-09T23:34:36+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/09/try-reply</id>
    <content type="html"><![CDATA[<p>Perl の REPL 環境である Reply というツールを教えてもらったので使ってみます。</p>

<h2>REPL とは？</h2>

<p>REPL とは <strong>R</strong>ead-<strong>E</strong>val-<strong>P</strong>rint <strong>L</strong>oop の頭文字を取った言葉であり、</p>

<p>プログラムを読み(Read)、評価し(Evaluate)、結果を出力(Print)することを繰り返す(Loop)という意味である。</p>

<p>この環境があればファイルにプログラムを書いて保存し、実行する、という手続きを踏まなくてもスクリプトを実行できる</p>

<p>この REPL の Perl 版が Reply と言うことだそう</p>

<h2>Reply のインストール</h2>

<p>Reply は CPAN からインストールする</p>

<pre><code class="bash">$ cpanm Reply
--&gt; Working on Reply
Fetching http://cpan.metacpan.org/authors/id/D/DO/DOY/Reply-0.37.tar.gz ... OK
Configuring Reply-0.37 ... OK
...
</code></pre>

<p>インストールできたら早速実行してみる</p>

<pre><code class="bash">$ reply
/Users/sojiro/.replyrc not found. Generating a default...
0&gt; 
</code></pre>

<p>コンソールが立ち上がった</p>

<p>早速なにかプログラムを入力してみよう</p>

<pre><code class="bash">0&gt; print 'Hello Reply';
Hello Reply$res[0] = 1
</code></pre>

<pre><code class="bash">1&gt; 12 * 12
$res[1] = 144
</code></pre>

<p>なるほど単純なプログラムの動作が確認できた。今度は <code>use</code> してみる。</p>

<pre><code class="bash">2&gt; use UUID::Tiny;
3&gt; my $id = create_UUID_as_string(UUID_V4);
$res[2] = '87b16a6b-c712-41b4-bf46-965eeb01d3f1'

4&gt; print $id;
87b16a6b-c712-41b4-bf46-965eeb01d3f1$res[3] = 1
</code></pre>

<p>このように実行結果は記憶された状態で進むので簡単にプログラムの実行結果を知りたいときに重宝しそうである。</p>

<h2>参照</h2>

<ul>
<li><a href="http://papix.hatenablog.com/entry/2014/12/15/233800">Replyでお手軽にPerlのコードを動かす話</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4774156647/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774156647&amp;linkCode=as2&amp;tag=sojiro14-22">小飼弾のコードなエッセイ ~我々は本当に世界を理解してコードしているのだろうか? </a></li>
</ul>

]]></content>
  </entry>
  
</feed>
