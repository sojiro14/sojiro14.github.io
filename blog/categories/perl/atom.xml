<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Perl | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2015-07-06T02:13:45+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CPAN モジュールのための雛形を作る]]></title>
    <link href="http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module/"/>
    <updated>2015-07-02T00:13:24+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/07/02/create-basic-model-for-cpan-module</id>
    <content type="html"><![CDATA[<p>いよいよ CPAN モジュールを作ろうと思います。</p>

<p>しかし既存の CPAN モジュールを見てみると本体のプログラムの他に見慣れないファイルがちらほら。。。</p>

<p>正直どんなファイル群で CPAN モジュールを構成すれば良いのか分かっていないわけです。</p>

<p>そんな悩みを解決してくれたのが <em>Minilla</em> モジュールです。</p>

<h2>Minilla のインストール</h2>

<p> <em>Minilla</em> は CPAN モジュールなので <code>cpanm</code> コマンドでインストールできます。</p>

<pre><code class="bash">$ cpanm Minilla
--&gt; Working on Minilla
Fetching http://cpan.metacpan.org/authors/id/T/TO/TOKUHIROM/Minilla-v2.4.1.tar.gz ... OK
Configuring Minilla-v2.4.1 ... OK
...
Building and testing Minilla-v2.4.1 ... OK
Successfully installed Minilla-v2.4.1
11 distributions installed
</code></pre>

<h2>雛形の作成</h2>

<p> <em>Minilla</em> がインストールできたら早速 CPAN モジュールの雛形を作ります。 <code>minil new Your::Module</code> で作成できます。</p>

<p>今回は <em>JSON::MergePatch</em> というモジュールを作ります。</p>

<pre><code class="bash">$cd ~/git/cpan
$ minil new JSON::MergePatch
Writing lib/JSON/MergePatch.pm
Writing Changes
Writing t/00_compile.t
Writing .travis.yml
Writing .gitignore
Writing LICENSE
Writing cpanfile
Initializing git JSON::MergePatch
[JSON-MergePatch] $ git init
Initialized empty Git repository in /user/home_directory/git/cpan/JSON-MergePatch/.git/
Retrieving meta data from lib/JSON/MergePatch.pm.
Name: JSON::MergePatch
Abstract: It's new $module
Version: 0.01
fatal: bad default revision 'HEAD'
[JSON-MergePatch] $ git add .
Finished to create JSON::MergePatch
</code></pre>

<p>これで雛形ができました。</p>

<p>そしてこれから雛形を編集していくわけですが、自分で編集するのは基本的に以下のファイルのみです。</p>

<ul>
<li>lib/ 配下のプログラム</li>
<li>t/ 配下のテストプラグラム</li>
<li>cpanfile</li>
</ul>


<p>以下のファイルはそれぞれ <code>minil hoge</code> コマンド実行時に自動で編集されます。</p>

<ul>
<li>Changes: リリース時に更新される</li>
<li>META.json: cpanfile に合わせて更新される</li>
<li>README.md: lib/Your/Module.pm の記述から更新される</li>
</ul>


<h2>つづく</h2>

<p>次回はいよいよ CPAN へ公開する際の手順を書こうと思います。</p>

<h2>参照</h2>

<ul>
<li><a href="http://blog.64p.org/entry/2013/05/14/080423">Minilla を用いた Perl モジュールの作り方</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replyを試してみる]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/09/try-reply/"/>
    <updated>2015-05-09T23:34:36+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/09/try-reply</id>
    <content type="html"><![CDATA[<p>Perl の REPL 環境である Reply というツールを教えてもらったので使ってみます。</p>

<h2>REPL とは？</h2>

<p>REPL とは <strong>R</strong>ead-<strong>E</strong>val-<strong>P</strong>rint <strong>L</strong>oop の頭文字を取った言葉であり、</p>

<p>プログラムを読み(Read)、評価し(Evaluate)、結果を出力(Print)することを繰り返す(Loop)という意味である。</p>

<p>この環境があればファイルにプログラムを書いて保存し、実行する、という手続きを踏まなくてもスクリプトを実行できる</p>

<p>この REPL の Perl 版が Reply と言うことだそう</p>

<h2>Reply のインストール</h2>

<p>Reply は CPAN からインストールする</p>

<pre><code class="bash">$ cpanm Reply
--&gt; Working on Reply
Fetching http://cpan.metacpan.org/authors/id/D/DO/DOY/Reply-0.37.tar.gz ... OK
Configuring Reply-0.37 ... OK
...
</code></pre>

<p>インストールできたら早速実行してみる</p>

<pre><code class="bash">$ reply
/Users/sojiro/.replyrc not found. Generating a default...
0&gt; 
</code></pre>

<p>コンソールが立ち上がった</p>

<p>早速なにかプログラムを入力してみよう</p>

<pre><code class="bash">0&gt; print 'Hello Reply';
Hello Reply$res[0] = 1
</code></pre>

<pre><code class="bash">1&gt; 12 * 12
$res[1] = 144
</code></pre>

<p>なるほど単純なプログラムの動作が確認できた。今度は <code>use</code> してみる。</p>

<pre><code class="bash">2&gt; use UUID::Tiny;
3&gt; my $id = create_UUID_as_string(UUID_V4);
$res[2] = '87b16a6b-c712-41b4-bf46-965eeb01d3f1'

4&gt; print $id;
87b16a6b-c712-41b4-bf46-965eeb01d3f1$res[3] = 1
</code></pre>

<p>このように実行結果は記憶された状態で進むので簡単にプログラムの実行結果を知りたいときに重宝しそうである。</p>

<h2>参照</h2>

<ul>
<li><a href="http://papix.hatenablog.com/entry/2014/12/15/233800">Replyでお手軽にPerlのコードを動かす話</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4774156647/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774156647&amp;linkCode=as2&amp;tag=sojiro14-22">小飼弾のコードなエッセイ ~我々は本当に世界を理解してコードしているのだろうか? </a></li>
</ul>

]]></content>
  </entry>
  
</feed>
