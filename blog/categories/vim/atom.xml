<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-02-21T03:02:31+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VimにおけるTABとスペースの扱いについて]]></title>
    <link href="http://sojiro14.github.io/blog/2014/12/26/tab-and-space-on-vim/"/>
    <updated>2014-12-26T10:52:26+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/12/26/tab-and-space-on-vim</id>
    <content type="html"><![CDATA[<p>Vimでは <code>&lt;TAB&gt;</code> やインデントについてその挙動を設定することができる。いくつか設定方法があるが、これまでこれらに関する <code>.vimrc</code> の設定は何も考えずにただコピペしていたので記述を見直してみた。</p>

<h2>tabstop</h2>

<p> <code>tabstop</code> で <code>&lt;TAB&gt;</code> にいくつのスペースを設定するか決めることができる。
<code>vim
set tabstop=4
</code>
これで <code>&lt;TAB&gt;</code> に半角4つ分が設定される。</p>

<!-- more -->


<h2><code>&lt;TAB&gt;</code> の挙動</h2>

<p>そもそも <code>&lt;TAB&gt;</code> はどのような挙動をするのか。</p>

<p>何となく、指定した数の分だけ半角スペースを入れてくれるもの、と思っていたが、</p>

<p>正確には行頭からの文字数が<code>&lt;TAB&gt;</code> に指定された半角数の倍数になるようにスペースを補完するもの、というのが正しいかもしれない。何を言っているかわからないと思うので以下で実験する。
<code>vim
set tabstop=4
set list
set listchars=tab:&gt;.,trail:_,eol:↲,extends:&gt;,precedes:&lt;,nbsp:%
</code>
実験用に上記のように <code>.vimrc</code> を設定しておく。
&#8220;`vim sample1</p>

<blockquote><p>&hellip;↲
a>..↲
bb>.↲
ccc>↲
<code>
これは以下のように打ち込んだ結果で、</code><TAB><code>により、それぞれの行が</code>tabstop&#8220;` で設定した半角4つ分で終わるように（タブ文字により）スペースが補完されているのがわかる。</p></blockquote>

<ul>
<li><code>&lt;TAB&gt;</code></li>
<li>a <code>&lt;TAB&gt;</code></li>
<li>bb <code>&lt;TAB&gt;</code></li>
<li>ccc <code>&lt;TAB&gt;</code></li>
</ul>


<pre><code class="vim sample2">&gt;...&gt;...↲
test&gt;...↲
sample&gt;.↲
</code></pre>

<p>一行に半角4つ分以上の文字が打ち込まれている場合も同じく、 <code>&lt;TAB&gt;</code> はそれぞれの行が <code>tabstop</code> で指定した半角4つの倍数の文字数になるようにタブ文字を補完する。（この場合は一行につき半角8文字）</p>

<h2>smarttabとshiftwidthとsmartindent</h2>

<p> <code>smarttab</code> をONにすることで <code>shiftwidth</code> を設定することが可能になる。</p>

<p> <code>shiftwidth</code> は行頭のインデントの幅を規定するもので、 <code>smarttab</code> が効いているときには行頭の <code>&lt;TAB&gt;</code> は <code>shiftwidth</code> の幅のスペース（タブ文字）を挿入する役目を果たす。</p>

<p> <code>smartindent</code> をONにすると改行時に前の行の行末を見て自動でインデントが挿入される。例えば行末が <code>{</code> の場合は次の行に自動的にインデントが入る。このインデントの幅は <code>shiftwidth</code> で指定された幅となる。</p>

<h2>autoindent</h2>

<p> <code>autoindent</code> は改行時に前の行のインデントと同じ幅でインデントを挿入する。</p>

<h2>expandtab</h2>

<p> <code>expandtab</code> は <code>&lt;TAB&gt;</code> により挿入されるタブ文字を純粋なスペースに変換する。</p>

<p>上記のsample1、2を以下の設定で記述してみる。
<code>vim
set expandtab
set tabstop=4
set list
set listchars=tab:&gt;.,trail:_,eol:↲,extends:&gt;,precedes:&lt;,nbsp:%
</code>
<code>vim sample1'
____↲
a___↲
bb__↲
ccc_↲
</code>
<code>vim sample2'
________↲
test____↲
sample__↲
</code>
 <code>expandtab</code> をONにした状態で一時的にタブ文字を記述したいときは、VimをINSERTモードにした状態で以下のように打つ。
<code>vim
Control-v &lt;TAB&gt;
</code></p>

<h2>参照</h2>

<ul>
<li><a href="http://vimwiki.net/?FrontPage">VIM wiki</a></li>
<li><a href="http://nanasi.jp/articles/howto/editing/et-inserttab.html">:set expandtab（:set et）設定の時に、タブ文字を挿入する </a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vimで連番を振る方法]]></title>
    <link href="http://sojiro14.github.io/blog/2014/06/14/writing-serial-numbers-with-vim/"/>
    <updated>2014-06-14T02:01:05+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/06/14/writing-serial-numbers-with-vim</id>
    <content type="html"><![CDATA[<p>大量のvalueに連番を振りたくなったのでvimの機能を調べて使ってみた。
目標は以下のようにurlのリストをPerlのハッシュ化すること。</p>

<pre><code>example_1.com
example_2.com
example_3.com
~
example_254.com
example_255.com
example_256.com
</code></pre>

<pre><code class="perl">my %urls = (
    1   =&gt; 'example_1.com',
    2   =&gt; 'example_2.com',
    3   =&gt; 'example_3.com',
~
    254 =&gt; 'example_254.com',
    255 =&gt; 'example_255.com',
    256 =&gt; 'example_256.com',
);
</code></pre>

<h2>使うvimの機能</h2>

<ul>
<li>数字のインクリメント/デクリメント</li>
<li>操作の記録（complex repeat）</li>
</ul>


<h2>①数字のインクリメント/デクリメント</h2>

<h3>数字のインクリメント</h3>

<p>数字にカーソルを合わせて
<code>
Ctrl + a
</code></p>

<h3>数字のデクリメント</h3>

<p>数字にカーソルを合わせて
<code>
Ctrl + x
</code></p>

<h2>②操作の記録（complex repeat）</h2>

<p>操作の記録は以下の順序で行う</p>

<ol>
<li>準備</li>
<li>一連の操作に名前をつけて記録を開始</li>
<li>一連の操作を行う</li>
<li>記録を終了</li>
<li>記録した操作を繰り返し実行</li>
</ol>


<h3>1. 準備</h3>

<pre><code class="perl">1 =&gt; example_1.com
example_2.com
example_3.com
~
</code></pre>

<p>最初のキーである1だけ用意しておく。</p>

<h3>2. 一連の操作に名前をつけて記録を開始</h3>

<pre><code>q
</code></pre>

<pre><code>a
</code></pre>

<p>操作を開始する位置（キー1の上）にカーソルを合わせ、q, aの順でキーを押すと、&#8217;a&#8217;という名前で操作が記録される。</p>

<p>操作の名前は&#8217;a&#8217;の大文字、小文字のアルファベット、もしくは数字から1字を選んで付けることができる。</p>

<h3>3. 一連の操作を行う</h3>

<pre><code>v (visual mode)
</code></pre>

<pre><code>llllll (=&gt; までを選択)
</code></pre>

<pre><code>y (yank)
</code></pre>

<pre><code>j P (1行下がってpaste)
</code></pre>

<pre><code>0 (行頭へカーソルを移動)
</code></pre>

<pre><code>Ctrl + a (インクリメント)
</code></pre>

<pre><code>0 (行頭へカーソルを移動)
</code></pre>

<h3>4. 記録を終了</h3>

<pre><code>q
</code></pre>

<p>qを押して記録を終了</p>

<h3>5. 記録した操作を繰り返し実行</h3>

<pre><code>254 (繰り返す回数)
</code></pre>

<pre><code>@a ('a'と名付けた操作を指定)
</code></pre>

<p>ここまで完了時点で以下のようになる。
<code>perl
1   =&gt; example_1.com
2   =&gt; example_2.com
3   =&gt; example_3.com
~
254 =&gt; example_254.com
255 =&gt; example_255.com
256 =&gt; example_256.com
</code></p>

<h2>Perlの記法に合わせて整形</h2>

<p>vimの矩形選択( <code>Ctrl + v</code> )などをつかって正しいハッシュの文法に整形する</p>
]]></content>
  </entry>
  
</feed>
