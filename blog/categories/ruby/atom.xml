<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2015-01-28T13:00:46+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Railsで初めてアプリを作ってみる #1 -railsのセットアップ-]]></title>
    <link href="http://sojiro14.github.io/blog/2014/11/10/making-first-app-with-rails-number-1-setup-rails/"/>
    <updated>2014-11-10T03:27:49+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/11/10/making-first-app-with-rails-number-1-setup-rails</id>
    <content type="html"><![CDATA[<p>Ruby on Railsで初めてアプリを作ってみます。
今回はRailsの立ち上がりを確認するところまで。</p>

<h2>アプリのセットアップ（rails new）</h2>

<p>railsのアプリ作成は <code>rails new</code> コマンドで始まる。
<code>bash
$ mkdir rails_projects
$ cd rails_projects
</code>
今回のアプリ作成の為にディレクトリを作成し、早速コマンドを実行。
<code>bash
$ rails new first_app
...
An error occurred while installing sqlite3 (1.3.10), and Bundler cannot continue.
...
</code>
いくつかのディレクトリやファイルが作成されるが、最後にこのようなエラーが出てbundle失敗。
そこでGemfileを編集してbundleをやり直す。</p>

<pre><code class="bash">$ cd first_app/
</code></pre>

<p>Gemfileを編集。内容は<a href="http://railstutorial.jp/chapters/beginning?version=4.0#sec-bundler">Ruby on Rails #Bundler</a>を参照。
&#8220;` bash
$ bundle update
&hellip;
Building native extensions.  This could take a while&hellip;
ERROR:  Error installing sqlite3:
    ERROR: Failed to build gem native extension.</p>

<pre><code>/home/sojiro/.rvm/rubies/ruby-2.0.0-p594/bin/ruby extconf.rb
</code></pre>

<p>checking for sqlite3.h&hellip; no
sqlite3.h is missing. Try &lsquo;port install sqlite3 +universal&rsquo;
or &lsquo;yum install sqlite-devel&rsquo; and check your shared library search path (the
location where your sqlite3 shared library is located).
<strong><em> extconf.rb failed </em></strong>
Could not create Makefile due to some reason, probably lack of necessary
libraries and/or headers.  Check the mkmf.log file for more details.  You may
need configuration options.
&hellip;
<code>
またも失敗。よく見るとsqlite-develが足りていないらしい
</code> bash
$ sudo yum install sqlite-devel
<code>
sqlite-develをインストール後再度bundleによるgemのインストールを試みる
</code> bash
$ bundle update
Installing sqlite3 1.3.8
Installing turbolinks 1.1.1
Installing uglifier 2.1.1
Your bundle is updated!
$ bundle install
Your bundle is complete!
Use <code>bundle show [gemname]</code> to see where a bundled gem is installed.
&#8220;`
インストール成功。</p>

<h2>サーバーの立ち上げ（rails server）</h2>

<p>ローカルでrailsを立ち上げるコマンド <code>rails server</code> を実行。
<code>bash
$ rails server
...
Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes. (ExecJS::RuntimeUnavailable)
...
</code></p>

<h3>Node.jsのインストール</h3>

<p> <code>rails server</code> コマンド実行でエラーが出てしまう。JavaScript runtimeがインストールされていないことが原因のよう。メッセージ通り <a href="https://github.com/sstephenson/execjs">https://github.com/sstephenson/execjs</a> に行ってみるとJavaScript runtimeとしてNode.jsが有効と書いてあるのでNode.jsをインストールする。</p>

<pre><code class="bash">$ sudo rpm -ivh http://ftp.riken.jp/Linux/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
$ sudo yum install nodejs npm --enablerepo=epel
</code></pre>

<p>今回はyumでインストールした。そして再度 <code>rails server</code>
<code>bash
$ rails server
=&gt; Booting WEBrick
=&gt; Rails 4.0.5 application starting in development on http://0.0.0.0:3000
=&gt; Run `rails server -h` for more startup options
=&gt; Ctrl-C to shutdown server
</code>
ローカルでサーバーが立ち上がる。
今回はAWS上で作業しているので、AWS該当インスタンスのSecurity Groupで3000番portを空ける。</p>

<p><a href="http://xx.xxx.xxx.xxx:3000">http://xx.xxx.xxx.xxx:3000</a></p>

<p>にブラウザでアクセスして以下の画面が見えればOK</p>

<p>{% img /images/rails/rails_starting.png %}</p>

<h2>GitHubに上げておく</h2>

<pre><code class="bash">$ git init
$ git remote add origin https://github.com/sojiro14/first_app.git
</code></pre>

<p>GitHubでリポジトリ作成
<code>bash
$ git add .
$ git commit -m 'Initialize repository'
$ git push -u origin master
</code></p>

<h2>参照</h2>

<ul>
<li><a href="http://qiita.com/you21979@github/items/4efd9fc4363573191b5c">node.jsをyumでインストールする(centos6.5)</a></li>
<li><a href="http://railstutorial.jp">Ruby on Rails チュートリアル</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinuxにRuby on Railsをインストールする]]></title>
    <link href="http://sojiro14.github.io/blog/2014/11/05/installing-ruby-on-rails-on-linux/"/>
    <updated>2014-11-05T03:58:11+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/11/05/installing-ruby-on-rails-on-linux</id>
    <content type="html"><![CDATA[<p>Ruby on Railsを使ってみたいと思い、AWSにインストールした手順。</p>

<h2>Ruby version 2.0.0 を RVMを使ってインストール</h2>

<p><a href="http://sojiro14.github.io/blog/2014/10/31/installing-latest-ruby-in-linux/">Linuxに最新のRubyをインストールする</a>を参照</p>

<h2>gemsetの作成</h2>

<blockquote><p>Rubyをインストールしたら、Railsのアプリケーションを実行するために必要な他のソフトウェア向けにシステムを構成する必要があります。通常、これはgemのインストールに関連します。gemとは自己完結型のRubyコードのパッケージです。バージョン番号の異なるgem同士がコンフリクトすることがあるため、一連のgemを自己完結的にまとめたgemsetというものを作成してバージョンを使い分けるのが便利です。
（引用: <a href="http://railstutorial.jp/chapters/beginning?version=4.0#top">Ruby on Rails チュートリアル</a>）</p></blockquote>

<p>以下のコマンドでgemsetを作成する。
<code>bash
$ rvm use 2.0.0@railstutorial_rails_4_0 --create --default
</code></p>

<blockquote><p>上のコマンドを実行すると、Ruby 2.0.0に関連付けられたrailstutorial_rails_4_0というgemsetを作成し (&ndash;create)、その場でgemsetを有効にし (use)、gemsetをデフォルトに設定 (&ndash;default) します。これにより、ターミナルウィンドウを開いたときに2.0.0@railstutorial_rails_4_0というRubyとgemsetの組み合わせが常に選択されるようになります。
（引用: <a href="http://railstutorial.jp/chapters/beginning?version=4.0#top">Ruby on Rails チュートリアル</a>）</p></blockquote>

<h2>RubyGemsのインストール</h2>

<p>AWSには始めからgemがインストールされていて、PATHは以下。
<code>bash
$ which gem
/usr/bin/gem
</code>
RVMでRubyをインストールするとPATHが上書きされる。
<code>bash
$ which gem
~/.rvm/rubies/ruby-2.0.0-p594/bin/gem
</code>
今回はチュートリアルに合わせてgemのバージョンを更新する
<code>bash
$ gem update --system 2.0.3
</code>
gemの設定ファイルである <code>.gemrc</code> に自動生成されるドキュメントである <code>ri</code> と <code>rdoc</code> の自動生成を抑制する設定をする
<code>bash
$ vim .gemrc
$ cat .gemrc
install: --no-rdoc --no-ri
update:  --no-rdoc --no-ri
</code></p>

<h2>Railsをインストールする</h2>

<p>いよいよRailsをインストールする
<code>bash
$ gem install rails --version 4.0.5
</code>
インストール完了。
以下のコマンドで確認する
<code>bash
$ rails -v
Rails 4.0.5
</code>
Railsがインストールされたことを確認できた</p>

<h2>参照</h2>

<p><a href="http://railstutorial.jp/chapters/beginning?version=4.0#top">Ruby on Rails チュートリアル</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linuxに最新のRubyをインストールする]]></title>
    <link href="http://sojiro14.github.io/blog/2014/10/31/installing-latest-ruby-in-linux/"/>
    <updated>2014-10-31T05:29:00+09:00</updated>
    <id>http://sojiro14.github.io/blog/2014/10/31/installing-latest-ruby-in-linux</id>
    <content type="html"><![CDATA[<p>Ruby on Railsを使ってみたいと思い、調べてみるとRails4ではRubyのバージョンは1.9以降が必須のようである。</p>

<p>自分がさくらで借りているサーバーではRubyのバージョンが1.8.7だったのでこれを新しくしてみた。</p>

<h2>RVMのインストール</h2>

<p>新しいRubyをインストールする前にRVM(Ruby Version Manager)をインストールする。これはRubyをバージョンごとに管理するツール
<code>
$ curl -L https://get.rvm.io | bash -s
</code></p>

<p>このコマンドで自分のホームディレクトリ以下に <code>.rvm/</code> が作られ、ここにRVMがインストールされる。</p>

<p>そして <code>.profile</code> <code>.bashrc</code> <code>.zshrc</code> にPATHを通す記述が追加される。</p>

<p>また、 <code>.bash_profile</code> <code>.zlogin</code> にRVMをロードする記述が追加される。</p>

<p>RVMのインストールが完了したらロードする。ここではbashを使っているので以下のようにする。
<code>
$ source .bash_profile
</code></p>

<h2>Rubyのインストール</h2>

<h3>さくらのレンタルサーバーでの失敗</h3>

<p>まずはRubyのインストールに必要なパーツを調べ、無ければインストールする。
以下のコマンドで必要なものをピックアップしインストールまで行ってくれる。
<code>
$ rvm requirements
/your/home/directry/.rvm/scripts/functions/support: line 314: rvm_debug: command not found
Checking requirements for freebsd.
Installing requirements for freebsd.
Updating system.
Installing required packages: automake, bison, readline, libyaml...
Error running 'requirements_freebsd_libs_install automake bison readline libyaml',
</code>
ここでErrorが発生。内容は必要なパッケージがインストールできなかったということ。
そこでFreeBSDのパッケージ管理コマンドである <code>pkg</code> コマンドを使ってインストールを試みる。</p>

<p>が、サーバーの設定的に自分でパッケージを追加することができなかったのでさくらのサーバーを断念してAWSに移行した。</p>

<h3>AWSに移行</h3>

<p>AWSに移行して <code>$ rvm requirements</code> までを実行する。（AWSは始めからRubyのバージョンが2.0.0だったが構わず実行）
ここでも <code>$ rvm requirements</code> が転ける。</p>

<p>そこで今度はCentOSだったので <code>yum</code> を使ってインストールを試みる。以下のコマンドは <code>$ rvm requirements</code> が教えてくれる。Errorの原因が <code>sudo</code> で実行していなかったことなので <code>sudo</code> 付きで実行する。
<code>
sudo yum install -y patch libyaml-devel libffi-devel glibc-headers autoconf gcc-c++ glibc-devel patch readline-devel zlib-devel openssl-devel automake libtool bison
</code>
これで成功。
<code>
$ rvm requirements
Checking requirements for amazon.
Requirements installation successful.
</code>
 <code>$ rvm requirements</code>も成功。</p>

<p>このサーバーではすでにバージョン2.0.0のRubyがインストールされていたが、RVMの配下に新たにバージョン2.0.0のRubyをインストールする。
<code>
$ rvm install 2.0.0 --with-openssl-dir=$HOME/.rvm/usr
</code>
インストール完了。</p>

<h2>参考</h2>

<p><a href="http://railstutorial.jp/chapters/beginning?version=4.0#top">Ruby on Rails チュートリアル</a></p>
]]></content>
  </entry>
  
</feed>
