<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Task Queue | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/task-queue/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2017-06-22T02:37:35+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GAE Task Queue について]]></title>
    <link href="http://sojiro14.github.io/blog/2016/08/10/about-gae-task-queue/"/>
    <updated>2016-08-10T21:29:29+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/08/10/about-gae-task-queue</id>
    <content type="html"><![CDATA[<p>GAE の Task Queue についてざっくり。</p>

<p>具体的な実装に関しては別エントリに書こうと思います。</p>

<h2>Overview</h2>

<ul>
<li>アプリケーションの処理（task）を Task Queue API に渡す（queue）ことでユーザーからのリクエスト外で非同期に処理させることができる</li>
<li>task はスケーラブルな GAE の Worker モジュールによってバックグラウンドで処理される</li>
</ul>


<p>Task Queue には以下の2つのタイプがある</p>

<h3>Push queues</h3>

<ul>
<li>queue を処理する間隔をあらかじめスケジュールすることができる</li>
<li>queue は GAE のモジュールへのリクエストとして処理される</li>
<li>task の処理には期限がある

<ul>
<li>自動的にスケーリングするモジュールで処理するものは 10 分以内</li>
<li>そうでないモジュールで処理するものは 24 時間以内</li>
</ul>
</li>
</ul>


<h3>Pull queues</h3>

<ul>
<li>GAE は queue を処理せず、外部の Worker が queue を取得（lease）して処理する</li>
<li>外部の Worker で、どのような間隔で queue を処理するか管理する必要がある</li>
<li>lease のタイミングで外部 Worker に対して queue の処理期限が渡される</li>
<li>期限内に queue の処理が完了するか、 queue が削除されない場合は同一 queue に対する他の Worker プロセスからの lease を許可する</li>
</ul>


<p>queue の処理は非同期で行われるので task を作成したアプリケーションは処理の結果を知ることができないが、処理に失敗した場合は自動でリトライ処理が走る</p>

<h2>Use cases</h2>

<h3>Push queues</h3>

<ul>
<li>SNS メッセージアプリケーションでユーザーがメッセージを送るたびにフォロワーの更新を非同期で行う</li>
<li>キャンペーン広告の送信をあらかじめスケジュールしておいて決められた時間に送る</li>
</ul>


<h3>Pull queues</h3>

<ul>
<li>バッチジョブに効果がある</li>
<li>task に tag をつけることで外部 worker が lease する時に同じ tag がつく task をまとめて処理することができる</li>
<li>実装例としては複数のゲームのリーダーボードが典型的

<ul>
<li>ハイスコアの更新があるたびに game id を tag として、 score と user 名を enqueue する</li>
</ul>
</li>
</ul>


<h2>Push queue</h2>

<ul>
<li>Push queue は GAE の Worker モジュールに HTTP リクエストで task を渡す</li>
<li>このリクエストは一定の間隔で実行され、失敗すると新たなリクエストをもってリトライされる</li>
<li>タスクの種類ごとにハンドラを書く必要がある</li>
<li>1つのモジュールに各種類ごとのハンドラを用意することができる</li>
<li>task の種類ごとに別々のモジュールを使うこともできる</li>
</ul>


<h3>Working with push queues</h3>

<ul>
<li>task を作って push queue に enqueue するプログラムを書く</li>
<li>task リクエストを受け取って GAE モジュールに渡すハンドラを書く</li>
<li>quota を気にする必要がある</li>
</ul>


<h2>Pull queue</h2>

<ul>
<li>Pull queue を使うことで独自のシステムから GAE の task を処理することができる</li>
<li>ここでいう独自のシステムには GAE で構成されたシステムも含まれる</li>
<li>GAE アプリケーションからは <code>com.google.appengine.api.taskqueue</code> パッケージを使って task を処理できる</li>
<li>その他のアプリケーションからは Task Queue REST API を使う</li>
<li>Push queue では GAE がやってくれる以下の処理を自前で用意する必要がある</li>
<li>アプリケーション側で worker スケールの管理をする</li>
<li>アプリケーション側で処理の終わった task を削除する</li>
<li>Pull queue は <code>queue.xml</code> という設定ファイルが必要</li>
</ul>


<h3>Pull queue による task 処理の流れ</h3>

<ol>
<li>アプリケーションが task を lease する</li>
<li>GAE が task データを返す</li>
<li>アプリケーションが task を処理する

<ol>
<li>もし lease の期限以内に処理を完了できなかった場合は再度 lease できる</li>
<li>retry できる最大の回数はあらかじめ設定できる</li>
<li>この回数を超えると GAE が task を削除する</li>
</ol>
</li>
<li>アプリケーションは task への処理が完了したら必ずその task を削除する</li>
</ol>


<h2>参照</h2>

<ul>
<li><a href="https://cloud.google.com/appengine/docs/java/taskqueue/">Task Queue Overview</a></li>
<li><a href="https://cloud.google.com/appengine/docs/java/taskqueue/push/">Push Queues in Java</a></li>
<li><a href="https://cloud.google.com/appengine/docs/java/taskqueue/overview-pull">Using Pull Queues in Java</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
