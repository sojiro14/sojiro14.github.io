<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2016-08-02T04:08:44+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 5 クラス]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/20/study-of-perfect-java-chapter-5/"/>
    <updated>2016-07-20T08:40:03+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/20/study-of-perfect-java-chapter-5</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>オブジェクトの生成</h2>

<p>Javaのオブジェクト生成方法は以下の5つ</p>

<table>
<thead>
<tr>
<th> procedure   </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>new</code> 式 </td>
<td> 基本的な生成手段 </td>
</tr>
<tr>
<td> <code>String</code> リテラル及び結合演算式 </td>
<td> 文字列固有の手段 </td>
</tr>
<tr>
<td> オートボクシング </td>
<td> 数値クラス固有の手段 </td>
</tr>
<tr>
<td> リフレクション </td>
<td> フレームワークなどが下位に隠蔽すべき手段 </td>
</tr>
<tr>
<td> <code>clone</code> メソッド</td>
<td> <code>Object</code> クラスに実装された手段 </td>
</tr>
</tbody>
</table>


<h2>ファクトリパターン</h2>

<p><code>new</code> 式をファクトリメソッドに隠蔽することでオブジェクトの生成をコンストラクタから分離する
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// コンストラクタへのアクセスを制限</span>
</span><span class='line'>    <span class="kd">private</span> <span class="nf">Sample</span><span class="o">()</span> <span class="o">{}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// ファクトリメソッド</span>
</span><span class='line'><span class="kd">static</span> <span class="n">Sample</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Sample</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Sample</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sample</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
<li>オブジェクトプーリング

<ul>
<li>オブジェクトの生成にコストがかかる場合、キャッシュされた生成済みオブジェクトを使う</li>
</ul>
</li>
<li>シングルトンパターン

<ul>
<li>オブジェクトの数を1つに制限する</li>
</ul>
</li>
</ul>


<h2>クラス宣言</h2>

<p>新しいクラスを定義するには次のように予約語 <code>class</code> を使う
<code>java
[修飾子] class クラス名 {
    メンバ宣言
      - フィールド宣言
      - メソッド宣言
      - ネストしたクラス宣言及びネストしたインターフェース宣言
    コンストラクタ宣言
    初期化ブロック
}
</code></p>

<h3>クラスの修飾子</h3>

<ul>
<li>クラス宣言時に指定できる修飾子は以下の5つ</li>
<li>複数同時指定可能（ただし <code>final</code> と <code>abstract</code> を同時に指定するとコンパイルエラー）</li>
</ul>


<table>
<thead>
<tr>
<th> modifier </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>public</code> </td>
<td> グローバルにアクセス可（書かないとパッケージ内に限定） </td>
</tr>
<tr>
<td> <code>final</code> </td>
<td> 継承禁止 </td>
</tr>
<tr>
<td> <code>abstract</code> </td>
<td> 抽象クラス </td>
</tr>
<tr>
<td> <code>strictfp</code> </td>
<td> クラス内に記述した浮動小数点遠山を厳密に評価 </td>
</tr>
<tr>
<td> アノテーション </td>
<td> 省略 </td>
</tr>
</tbody>
</table>


<h2>フィールド</h2>

<h3>フィールド宣言の修飾子</h3>

<table>
<thead>
<tr>
<th> modifier </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>public</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>protected</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>private</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>final</code> </td>
<td> フィールド変数への再代入禁止 </td>
</tr>
<tr>
<td> <code>static</code> </td>
<td> クラスフィールド </td>
</tr>
<tr>
<td> <code>transient</code> </td>
<td> シリアライズの対象外 </td>
</tr>
<tr>
<td> <code>volatile</code> </td>
<td> スレッド間で変数の値を同期 </td>
</tr>
</tbody>
</table>


<ul>
<li><code>public</code> 、 <code>protected</code> 、 <code>private</code> は同時に指定不可</li>
<li><code>final</code> 、 <code>volatile</code> は同時に指定不可</li>
</ul>


<h3>フィールド変数のスコープ</h3>

<ul>
<li>宣言の位置にかかわらず同一クラス内のすべてのコンストラクタとメソッドから使える</li>
<li><p>コンストラクタ内、メソッド内以外の場所では宣言した行以降がスコープとなる
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// コンパイルエラー</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">s</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// コンパイルエラー</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// フィールド宣言</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">sample</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p></li>
</ul>


<h3>this参照</h3>

<ul>
<li><code>this</code> 参照は明示的な宣言なしに使える、該当クラスのオブジェクトを参照する参照型変数</li>
<li>クラス内での変数名はフィールド変数よりローカル変数、パラメータ変数が優先される</li>
<li>これらの場合にフィールド変数を使う場合は <code>this</code> 参照を明示する</li>
</ul>


<pre><code class="java">class Sample {
    private final String s = "sample";

    void method (String s) {
        s; // パラメータ変数
        this.s; // フィールド変数
    }

    void method2 () {
        String s = "test 2";
        s; // ローカル変数
        this.s; // フィールド変数
    }
}
</code></pre>

<h2>メソッド</h2>

<h3>メソッド宣言の修飾子</h3>

<table>
<thead>
<tr>
<th> modifier </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>public</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>protected</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>private</code> </td>
<td> アクセス制御 </td>
</tr>
<tr>
<td> <code>abstract</code> </td>
<td> 抽象メソッド </td>
</tr>
<tr>
<td> <code>final</code> </td>
<td> オーバーライド不可 </td>
</tr>
<tr>
<td> <code>static</code> </td>
<td> クラスメソッド </td>
</tr>
<tr>
<td> <code>synchronized</code> </td>
<td> 同期のためのロック獲得 </td>
</tr>
<tr>
<td> <code>native</code> </td>
<td> ネイティヴメソッド </td>
</tr>
<tr>
<td> <code>strictfp</code> </td>
<td> 浮動小数点演算を厳密に評価 </td>
</tr>
</tbody>
</table>


<ul>
<li><code>public</code> 、 <code>protected</code> 、 <code>private</code> は同時に指定不可</li>
<li><code>abstract</code> は <code>static</code> 、 <code>final</code> 、 <code>synchronized</code> 、 <code>native</code> 、 <code>strictfp</code> と同時に指定不可</li>
</ul>


<h3>同一クラス内でのメソッドのスコープ</h3>

<ul>
<li>クラス内でメソッド宣言より前で有効</li>
<li>クラス内で <code>this</code> 参照を使った呼び出しも可能</li>
</ul>


<h3>他のクラスからのメソッド呼び出し</h3>

<ul>
<li>アクセス制御が許せば可能</li>
<li>オブジェクト参照に <code>.</code> メソッドアクセス修飾子を適用する</li>
</ul>


<h3>引数</h3>

<ul>
<li>メソッド定義のパラメータ変数を <em>仮引数</em></li>
<li>メソッド呼び出し時に渡すパラメータを <em>実引数</em></li>
<li>メソッドが呼ばれると仮引数に実引数が代入される（call by value）</li>
</ul>


<h4>可変長引数</h4>

<ul>
<li>メソッド宣言の引数定義でパラメータ変数の型に <code>...</code> を書く</li>
<li>任意の数の実引数で呼び出すことができる</li>
<li>このような引数を可変長引数という</li>
</ul>


<pre><code class="Java">class Sample {
    void exec (String... messages) {
        for (String s : messages) {
            System.out.println(s);
        }
    }
}

Sample sample = new Sample();
sample.exec();
sample.exec("hoge");
sample.exec("hoge", "fuga", "foo");
</code></pre>

<ul>
<li>内部的には配列として引数が渡る</li>
</ul>


<pre><code class="java">// 上記クラス定義と等価
class Sample {
    void exec (String[] messages) {
        for (String s : messages) {
            System.out.println(s);
        }
    }
}
</code></pre>

<h3>返り値</h3>

<ul>
<li><code>return</code> 文を使う</li>
<li><code>return</code> はどこにいくつ書いても良い</li>
<li><code>return</code> の後に実行されるような文を書くとコンパイルエラー</li>
<li><code>void</code> メソッドに <code>return</code> を書くとコンパイルエラー</li>
<li><code>return</code> が返す値が返り値の型に代入できないとコンパイルエラー</li>
</ul>


<h3>メソッド実行の終わり方</h3>

<ul>
<li><code>return</code> 文で抜ける</li>
<li><code>void</code> 型のメソッドを最後まで実行して抜ける</li>
<li>例外を投げて抜ける</li>
</ul>


<h3>メソッドのオーバーロード</h3>

<ul>
<li>同じ引数の並びで同名のメソッドの宣言はコンパイルエラー</li>
<li>引数の型が変わると同名でもコンパイル可能</li>
<li>これをメソッドのオーバーロードと呼ぶ</li>
</ul>


<h3>メソッドのシグネチャ</h3>

<ul>
<li>クラスの中でメソッドを一意に特定する情報をシグネチャと呼ぶ</li>
<li>メソッドのシグネチャは以下の2つ

<ul>
<li>メソッド名</li>
<li>引数の型の並び</li>
</ul>
</li>
</ul>


<h3>再帰呼び出し</h3>

<ul>
<li>メソッドが自分自身のメソッドを呼ぶこと</li>
<li>停止条件が必要</li>
</ul>


<h2>コンストラクタ</h2>

<h3>コンストラクタの宣言</h3>

<ul>
<li>オブジェクト生成時に呼ばれる</li>
<li>コンストラクタ名はクラス名と一致する</li>
<li>修飾子に書けるのは以下の3つ

<ul>
<li><code>public</code></li>
<li><code>protected</code></li>
<li><code>private</code></li>
</ul>
</li>
<li>コンストラクタはクラス名と同名のメソッドに見えるが言語仕様上は別物</li>
<li>コンストラクタ内に <code>return</code> 文を書くとコンパイルエラー</li>
<li>オブジェクトの初期化処理はコンストラクタにまとめるべき</li>
</ul>


<h3>this呼び出しとsuper呼び出し</h3>

<ul>
<li><code>this</code> 呼び出しでコンストラクタの共通化ができる</li>
</ul>


<pre><code class="java">class Sample {
    // フィールド宣言を省略

    Sample (String name, String label) {
        this(name, label, 10); // 下のコンストラクタ呼び出し
    }
    Sample (String name, String label, int level) {
        this.name = name;
        this.label = label;
        this.level = level;
    }
}
</code></pre>

<ul>
<li>継承したクラスから継承元のコンストラクタを <code>super</code> で呼び出す</li>
</ul>


<pre><code class="java">class SubSample extends Sample {
    private final String type;

    SubSample (String name, String label, int level, String type) {
        super(name, label, level); // Sample クラスのコンストラクタ呼び出し
        this.type = type;
    }
}
</code></pre>

<h3>デフォルトコンストラクタ</h3>

<ul>
<li>コンストラクタ宣言が書かれないクラスにはデフォルトコンストラクタが自動生成される</li>
<li>デフォルトコンストラクタの引数はなし、中身が空</li>
</ul>


<h3>オブジェクト初期化の順序</h3>

<ol>
<li>フィールド変数にデフォルト値代入</li>
<li>フィールド変数宣言時の初期化、初期化ブロックを上から順に実行</li>
<li>コンストラクタ呼び出し</li>
</ol>


<h2>staticメンバ</h2>

<ul>
<li><code>static</code> 修飾子がついたフィールド変数やメソッド</li>
<li>クラスメンバという</li>
<li><code>static</code> がつかないフィールド変数、メソッドはインスタンスメンバ</li>
<li>クラスメンバは実体がクラスにしかなく、オブジェクトはコピーを持たない</li>
<li>インスタンスフィールドとクラスフィールドは同じ名前空間（同名はつけられない）</li>
</ul>


<h2>継承</h2>

<ul>
<li>継承には実装の継承と振る舞いの継承の2つがある</li>
<li>振る舞いの継承は後出の「インターフェース」</li>
<li>実装の継承としての拡張継承は、あらかじめ意図して設計されたクラスからのみ行うべき</li>
</ul>


<h3>拡張継承の構文</h3>

<ul>
<li>クラス宣言時に <code>extends</code> を使って継承する</li>
<li><code>extends</code> のないクラス宣言は暗黙に <code>java.lang.Object</code> を継承する</li>
<li>Java のすべてのクラスは必ず <code>java.lang.Object</code> を直接的または間接的に継承する</li>
</ul>


<pre><code class="java">[修飾子] class クラス名 extends 基底クラス名 {
    クラス本体
}
</code></pre>

<ul>
<li>継承したクラスで継承元と同名のフィールド変数を宣言すると継承元のフィールド変数を隠蔽する</li>
<li>継承元にあるメソッドと同じシグネチャのメソッドを定義するとメソッドをオーバーライドする</li>
<li>メソッドをオーバーライドする条件

<ul>
<li>同じメソッド名</li>
<li>引数の数と型がすべて一致</li>
<li>返り値の型が一致、もしくは継承型</li>
<li><code>throws</code> 説の例外型が一致もしくは継承した例外型</li>
<li>アクセス制御が一致もしくはより緩い</li>
</ul>
</li>
</ul>


<h3>@Overrideアノテーション</h3>

<ul>
<li><code>@Override</code> というアノテーションをつけるとオーバーライドのミスに気づける</li>
</ul>


<pre><code class="java">Class Sample {
    void exec (CharSequence s) {
        System.out.println("sample:exec");
    }
}

Class SubSample extends Sample {
    @Override
    void exec (String s) {
        System.out.println("subSample:exec");
    }
}
</code></pre>

<h3>super参照</h3>

<ul>
<li>オーバーライドされた元メソッドに <code>private</code> 修飾子がついていなければオーバーライドしたメソッド内から <code>super</code> 参照を通じて元のメソッドを呼び出すことができる</li>
<li>隠蔽されたフィールド変数も同様</li>
</ul>


<h3>finalクラス</h3>

<ul>
<li><code>final</code> 修飾子がついたクラスを final クラスと呼ぶ</li>
<li>final クラスを継承元にして <code>extends</code> で拡張しようとするとコンパイルエラー</li>
</ul>


<h2>抽象クラスと抽象メソッド</h2>

<ul>
<li>抽象クラスはインスタンス化できないクラス</li>
<li><code>abstract</code> 修飾子をつけてクラス宣言すると抽象クラスになる</li>
<li>抽象クラスは何らかの具象クラスの基底クラスとなる（雛形の役割を担う）</li>
<li>メソッド修飾子として <code>abstract</code> をつけると抽象メソッドとなる</li>
<li>抽象メソッドはメソッド本体をもたない（オーバーライド前提）</li>
<li>抽象メソッドを一つでももつとそのクラスは抽象クラス</li>
</ul>


<h2>ネストしたクラス</h2>

<ul>
<li>あるクラスの下請けを担うクラスをヘルパークラスという</li>
<li>クラス内にクラスを宣言できる</li>
<li>ネストしたクラスをメンバクラスと呼ぶ</li>
<li>外側のクラスをエンクロージングクラスと呼ぶ</li>
</ul>


<h3>staticなネストしたクラス</h3>

<ul>
<li><code>static</code> 修飾子がついたネストしたクラス</li>
<li><code>private</code> 修飾子が指定されるとエンクロージングクラスの外から見えなくなる</li>
<li>エンクロージングクラスの <code>private</code> フィールドや <code>private</code> メソッドにアクセスできる</li>
<li>エンクロージングクラスもネストしたクラスの <code>private</code> フィールドや <code>private</code> メソッドにアクセスできる</li>
</ul>


<h3>内部クラス</h3>

<ul>
<li>非 <code>static</code> なネストしたクラスを内部クラスと呼ぶ</li>
<li>内部クラスのオブジェクトはエンクロージングオブジェクトへの参照を暗黙的にもつ</li>
<li>エンクロージングクラスのクラスメソッド内では内部クラスのオブジェクト生成ができない</li>
</ul>


<h3>ローカル内部クラス</h3>

<ul>
<li>ローカル内部クラスはメソッド内、コンストラクタ内、初期化ブロック内、 <code>if</code> 節などのブロック内で定義するクラス</li>
<li>ローカル内部クラスはブロックの外からはアクセスできない</li>
<li>クラスの実装をブロック内に隠蔽するときに使う</li>
</ul>


<h3>匿名クラス</h3>

<ul>
<li>匿名クラスにはクラス名がない</li>
<li>オブジェクト生成は以下の構文で行う</li>
</ul>


<pre><code class="java">new 基底型(実引数) {
    メソッド宣言とフィールド宣言の差分実装
}
</code></pre>

<ul>
<li>匿名クラスにはクラス名がないため、基底型名を <code>new</code> 演算子に渡し、基底型との差分実装を書き足す</li>
<li>匿名クラスを使う利点

<ul>
<li>コンストラクタが不要</li>
<li>オブジェクト作成が1つだけ</li>
</ul>
</li>
</ul>


<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 4 変数とオブジェクト]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/18/study-of-perfect-java-chapter-4/"/>
    <updated>2016-07-18T20:13:40+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/18/study-of-perfect-java-chapter-4</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>変数とオブジェクト</h2>

<ul>
<li>Javaの変数は以下の二つに分類される

<ul>
<li>基本型変数</li>
<li>参照型変数</li>
</ul>
</li>
<li>オブジェクトはある体系にそってデータを表すモノであり、名前を持たない</li>
</ul>


<h2>変数</h2>

<h3>参照型変数</h3>

<ul>
<li>C言語のポインタ型変数の値がメモリ上のアドレス値そのものであるのに対し、Javaの参照型変数の値はオブジェクトの位置情報を指し示す抽象的な「何か」である</li>
<li>参照型変数は名前を持ち、オブジェクトを参照することで扱いやすく橋渡しする</li>
<li>参照型変数自体に型があり以下の3種類、これは参照しているオブジェクトの型とは別

<ul>
<li>クラス型</li>
<li>配列型</li>
<li>インターフェース型</li>
</ul>
</li>
</ul>


<h3>基本型変数</h3>

<ul>
<li>基本型変数は値をそのまま保持する</li>
<li>基本型の種類は以下の8つ

<ul>
<li><code>boolean</code></li>
<li><code>byte</code></li>
<li><code>char</code></li>
<li><code>short</code></li>
<li><code>int</code></li>
<li><code>long</code></li>
<li><code>float</code></li>
<li><code>double</code></li>
</ul>
</li>
</ul>


<h3>変数の宣言</h3>

<ul>
<li>変数を使うには最初に変数を宣言する</li>
<li>変数宣言は最初に変数の型を書き、続けて変数名を書く
<code>java
StringBuilder sb;
</code></li>
<li>基本型変数の宣言時も型名を変数名の前に書く
<code>java
int i;
</code></li>
<li>同じスコープで同名の変数は宣言できない
<code>java
void method(int i) {
  int i;
}
// コンパイルエラー
</code></li>
</ul>


<h3>変数の初期化</h3>

<ul>
<li>変数は宣言時に初期化できる
<code>java
int i = 1;
</code></li>
<li>初期化しない場合の変数のデフォルト値は変数の型と種類に依存する</li>
</ul>


<h3>変数の修飾子</h3>

<ul>
<li>変数の宣言時に修飾子を付けることができる</li>
<li>変数に使える修飾子は以下

<ul>
<li><code>private</code></li>
<li><code>protected</code></li>
<li><code>public</code></li>
<li><code>transient</code></li>
<li><code>final</code></li>
<li><code>static</code></li>
<li><code>volatile</code></li>
</ul>
</li>
</ul>


<h2>オブジェクト</h2>

<h3>オブジェクトの生成</h3>

<ul>
<li><code>new</code> の後にクラス名を書き、 <code>()</code> で引数を指定する</li>
<li>引数の定義はクラスごとに決まっている
<code>java
new StringBuilder("012");
</code></li>
</ul>


<h3>参照型変数への代入</h3>

<ul>
<li>生成したオブジェクトは参照型変数へ参照を渡して扱う
<code>java
StringBuilder sb = new StringBuilder();
</code></li>
<li>あくまで変数が扱っているのはオブジェクトへの参照なので、以下の例では2つの変数は同じオブジェクトへの参照を持つ
<code>java
StringBuilder sb = new StringBuilder();
StringBuilder sb2 = sb;
sb.append("012");
sb2.append("345");
// sb: "0123445"
// sb2: "012345"
</code></li>
</ul>


<h3>基本型変数への代入</h3>

<ul>
<li>基本型変数へ代入されるのはオブジェクトの参照ではなく値そのもの</li>
<li>値そのものをコピーして代入する
<code>java
int i = 42;
int j = i + 1;
int K = i;
// i: 42
// j: 43
// k: 42
</code></li>
</ul>


<h3>null参照</h3>

<ul>
<li><code>null</code> は「何も参照していない」ということを表す
<code>java
StringBuilder sb = null;
</code></li>
</ul>


<h4>nullチェック</h4>

<ul>
<li>参照先がなく、 <code>null</code> を持つ参照型変数にたいする演算は <code>NullPointerException</code></li>
<li><code>Object</code> クラスに <code>null</code> をチェックするためのメソッドがある</li>
</ul>


<table>
<thead>
<tr>
<th> method </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>equals</code> </td>
<td> 引数のどちらかが <code>null</code> でも使える比較 </td>
</tr>
<tr>
<td> <code>toString</code> </td>
<td> <code>null</code> の場合の文字列を指定可能 </td>
</tr>
<tr>
<td> <code>isNull</code> </td>
<td> 引数が <code>null</code> のとき真 </td>
</tr>
<tr>
<td> <code>notNull</code> </td>
<td> 引数が <code>null</code> でないとき真 </td>
</tr>
<tr>
<td> <code>requireNonNull</code> </td>
<td> 引数が <code>null</code> だと即座に <code>NullPointerException</code> </td>
</tr>
</tbody>
</table>


<h3>Optional型</h3>

<ul>
<li><code>Optional</code> 型は任意のオブジェクトをくるんで <code>null</code> かもしれない状態を表現する</li>
<li>基本型変数のための <code>Optional</code> 型として以下の 3 つがある

<ul>
<li><code>OptionalInt</code></li>
<li><code>OptionalLong</code></li>
<li><code>OptionalDouble</code></li>
</ul>
</li>
<li><code>Optional</code> オブジェクトは <code>of</code> または <code>ofNullable</code> メソッドを使って任意のオブジェクトから生成できる
<code>java
StringBuilder sb;
Optional&lt;StringBuilder&gt; osb = Optional.of(sb);
// or
// Oprional&lt;StringBuilder&gt; osb = Optional.ofNullable(sb);
</code></li>
<li><code>get</code> メソッドで <code>Optional</code> オブジェクトでくるんだオブジェクトを取得
<code>java
Optional&lt;StringBuilder&gt; osb;
StringBuilder sb = osb.get();
</code></li>
<li>くるんだオブジェクトが <code>null</code> でなければそのまま呼び出し、 <code>null</code> であれば引数のオブジェクトを返す例
<code>java
StringBuilder sb = osb.orElse(new StringBuilder("none"));
</code></li>
</ul>


<h3>変数を介さないオブジェクトの操作</h3>

<ul>
<li>変数に参照を格納しなくてもオブジェクトを操作できる
<code>java
int len = new StringBuilder("012").length();
</code></li>
<li>文字列リテラルでも
<code>java
int len = "abc".length();
</code></li>
<li>ドット演算子でメソッド呼び出しをつなげることをメソッドチェインという
<code>java
StringBuilder sb = new StringBuilder();
int len = sb.append("012").append("345").length();
// len: 6
</code></li>
</ul>


<h2>変数と型</h2>

<ul>
<li>オブジェクトの型はクラスで定義されている</li>
<li>変数の型とオブジェクトの型が一致もしくはオブジェクトの型が変数の型の下位型であるとき変数にオブジェクトの参照を代入可能</li>
<li>変数が参照するオブジェクトに対して行える操作は変数の型できまる</li>
<li>下位型のオブジェクトは上位型の持つメソッドを持つことが保証されている

<ul>
<li>ただし実態が同一とは限らない</li>
</ul>
</li>
</ul>


<h2>変数の詳細</h2>

<h3>変数の種類</h3>

<table>
<thead>
<tr>
<th> type </th>
<th> description </th>
</tr>
</thead>
<tbody>
<tr>
<td> ローカル変数 </td>
<td> メソッドもしくはコンストラクタ内で宣言される。メソッドやコンストラクタが終わると消滅。 </td>
</tr>
<tr>
<td> パラメータ変数 </td>
<td> メソッドもしくはコンストラクタに引数として渡る。メソッドやコンストラクタが終わると消滅。 </td>
</tr>
<tr>
<td> インスタンスフィールド変数 </td>
<td> クラスの構成要素 </td>
</tr>
<tr>
<td> クラスフィールド変数 </td>
<td> クラスの構成要素 </td>
</tr>
</tbody>
</table>


<h3>変数のデフォルト値</h3>

<table>
<thead>
<tr>
<th> type </th>
<th> default value </th>
</tr>
</thead>
<tbody>
<tr>
<td> 参照型 </td>
<td> <code>null</code>      </td>
</tr>
<tr>
<td> <code>boolean</code> </td>
<td> <code>false</code>  </td>
</tr>
<tr>
<td> <code>char</code> </td>
<td> &ldquo;¥u0000&rdquo;    </td>
</tr>
<tr>
<td> <code>byte</code>, <code>short</code>, <code>int</code>, <code>Long</code> </td>
<td> 0 </td>
</tr>
<tr>
<td> <code>float</code>, <code>double</code> </td>
<td> +0.0 </td>
</tr>
</tbody>
</table>


<h3>変数のスコープ</h3>

<h4>ローカル変数</h4>

<ul>
<li>変数を宣言した行からメソッドもしくはコンストラクタが終わるまで</li>
</ul>


<h4>ブロックスコープ</h4>

<ul>
<li><code>{}</code> で囲ったブロックに閉じたスコープ</li>
<li>変数を宣言した行からブロックが終わるまで</li>
</ul>


<h4>シャドーイング</h4>

<ul>
<li>同一のスコープ内で同じ変数を2度以上宣言</li>
</ul>


<h4>パラメータ変数のスコープ</h4>

<ul>
<li>メソッド及びコンストラクタの中</li>
</ul>


<h4>フィールド変数のスコープ</h4>

<ul>
<li>フィールド変数のスコープはクラス内</li>
<li>宣言した行の位置は無関係</li>
</ul>


<h2>オブジェクトの寿命</h2>

<p>オブジェクトへの参照が外れる条件
* ローカル変数及びパラメータ変数のスコープが外れたとき
* オブジェクトが消滅したとき
* クラスが消滅し、クラスフィールド変数の参照が外れたとき
* 変数に別のオブジェクトの参照もしくは <code>null</code> が再代入されたとき
* 変数を介さない操作がされていた場合、式の評価が終わったとき</p>

<h2>final変数と不変オブジェクト</h2>

<ul>
<li><code>final</code> 修飾子を指定した変数を final 変数と呼ぶ</li>
<li>final 変数は再代入不可</li>
<li><code>final</code> 修飾子が禁止するのは変数自体の値の変更であって、変数が参照するオブジェクト自体の変更ではない</li>
</ul>


<h2>参照</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 3 数値①]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/17/study-of-perfect-java-chapter-3/"/>
    <updated>2016-07-17T17:36:05+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/17/study-of-perfect-java-chapter-3</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>整数型</h2>

<p>以下の5種類</p>

<table>
<thead>
<tr>
<th> name   </th>
<th> bit length </th>
<th>  min  </th>
<th>  max  </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>byte</code>  </td>
<td> 8         </td>
<td> -128  </td>
<td>  127  </td>
</tr>
<tr>
<td> <code>char</code>  </td>
<td> 16        </td>
<td> 0     </td>
<td> 65535 </td>
</tr>
<tr>
<td> <code>short</code> </td>
<td> 16        </td>
<td> -32768 </td>
<td> 32767 </td>
</tr>
<tr>
<td> <code>int</code>   </td>
<td> 32        </td>
<td> -2147483648 </td>
<td> 2147483647 </td>
</tr>
<tr>
<td> <code>long</code>  </td>
<td> 64        </td>
<td> -9223372036854775808 </td>
<td> 9223372036854775807 </td>
</tr>
</tbody>
</table>


<h3>bit値</h3>

<p>符号あり整数で最上位ビットが1の値は負の値となる</p>

<h4>4bit長の符号なし整数</h4>

<table>
<thead>
<tr>
<th> type </th>
<th> value </th>
<th> bit </th>
</tr>
</thead>
<tbody>
<tr>
<td> min  </td>
<td> 0     </td>
<td> 0000 </td>
</tr>
<tr>
<td> max  </td>
<td> 15    </td>
<td> 1111 </td>
</tr>
</tbody>
</table>


<h4>4bit長の符号あり整数</h4>

<table>
<thead>
<tr>
<th> type      </th>
<th> value </th>
<th> bit </th>
</tr>
</thead>
<tbody>
<tr>
<td> min bit   </td>
<td> 0     </td>
<td> 0000 </td>
</tr>
<tr>
<td> max value </td>
<td> 7     </td>
<td> 0111 </td>
</tr>
<tr>
<td> min value </td>
<td> -8    </td>
<td> 1000 </td>
</tr>
<tr>
<td> max bit   </td>
<td> -1    </td>
<td> 1111 </td>
</tr>
</tbody>
</table>


<h2>桁あふれ</h2>

<p>整数の加算はbit値を進める処理であり、</p>

<p>整数の減算はbit値を戻す処理である</p>

<p>したがってbitの境界値をまたいで整数の加算減算を行うと予期しない結果となる場合がある
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Interger</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'><span class="c1">// i: 2147483647&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">i</span><span class="o">++</span>
</span><span class='line'><span class="c1">// i: -2147483648</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>整数リテラル</h2>

<ul>
<li><code>L</code> または <code>l</code> で終わる整数リテラルの型は <code>long</code> 型</li>
<li>それ以外の整数リテラルは <code>int</code> 型</li>
<li><code>int</code> 型リテラル値を <code>byte</code> 、 <code>char</code> 、 <code>short</code> の型の変数に代入する場合、値が代入する先の型の範囲内であれば自動的に型が変換されて代入される

<ul>
<li>代入する先の型の範囲を超えている場合はコンパイルエラーとなる</li>
</ul>
</li>
</ul>


<h3>基数</h3>

<ul>
<li><code>0b</code> から始めると 2 進数</li>
<li><code>0</code> から始めると 8 進数</li>
<li><code>0x</code> から始めると 16 進数</li>
</ul>


<h2>整数の演算</h2>

<h3>四則演算</h3>

<table>
<thead>
<tr>
<th> 演算子 </th>
<th> 演算 </th>
</tr>
</thead>
<tbody>
<tr>
<td> +     </td>
<td> 和   </td>
</tr>
<tr>
<td> -     </td>
<td> 差   </td>
</tr>
<tr>
<td> *     </td>
<td> 積   </td>
</tr>
<tr>
<td> /     </td>
<td> 商   </td>
</tr>
</tbody>
</table>


<h4>注意点</h4>

<ul>
<li>大きな正の整数の和における桁あふれ</li>
<li>小さな負の整数の差における桁あふれ</li>
<li>絶対値の大きな整数同士の積の桁あふれ</li>
<li>商の結果は切り捨て</li>
<li>0 による割り算は <code>ArithmeticException</code></li>
</ul>


<h3>剰余</h3>

<ul>
<li>剰余演算子は <code>%</code></li>
<li>0 による剰余演算は <code>ArithmeticException</code></li>
</ul>


<h3>符号反転</h3>

<p>単項演算子 <code>-</code> は通常単純に符号を反転させる
<code>java
int n = 10;
// -n: -10
</code></p>

<p>しかしここにも桁あふれの問題があるので注意
<code>java
int n = -2147483648;
// -n: -2147483648
</code>
<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.15.4">仕様書</a>によると</p>

<blockquote><p>-x equals (~x)+1</p></blockquote>

<ul>
<li><code>~</code> は bit 反転演算子</li>
<li>-2147483648 は bit に変換すると 100&hellip;0（0 が 31 個つづく）</li>
<li>これを反転させると 011&hellip;1（1 が 31 個つづく）となり、これは 2147483647 を表す</li>
<li>2147483647 + 1 は桁あふれが起こり、 -2147483648 となる</li>
</ul>


<h3>インクリメント・デクリメント</h3>

<ul>
<li><code>++</code> でインクリメント</li>
<li><code>--</code> でデクリメント</li>
</ul>


<h2>キャスト</h2>

<p><code>()</code> 付きで型を書くことで強制的に型変換する
<code>java
int i = 1;
short si = (short)i;
</code></p>

<h3>代入先の型に収まらないとあふれたbitが切り捨てられる</h3>

<pre><code class="java">short si = (short)65536;
// si: 0
</code></pre>

<ul>
<li>65536 は bit に変換すると 100&hellip;0 （0 が 16 個つづく）</li>
<li><code>short</code> 型は 16 bit なので先頭の 1 があふれる</li>
</ul>


<h2>ブーリアン（真偽値）</h2>

<p>ブーリアン型が取りうる値は <code>true</code> か <code>false</code> のみ</p>

<p>※ ド・モルガンの法則の説明等</p>

<h2>参照</h2>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></li>
<li><a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.15.4">15.15.4. Unary Minus Operator -</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パーフェクトJava読書メモ Chapter 2 文字と文字列]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/12/study-of-perfect-java-chapter-2/"/>
    <updated>2016-07-12T16:17:33+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/12/study-of-perfect-java-chapter-2</id>
    <content type="html"><![CDATA[<p>Javaを使うために<a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a>を読んだメモ</p>

<h2>文字列</h2>

<p>&ldquo;（ダブルクォート）で囲んで文字数リテラル</p>

<h3>String クラス</h3>

<ul>
<li>文字列リテラルから <code>String</code> オブジェクトが自動生成</li>
<li>配列のように1文字ごとにindexが振られる</li>
</ul>


<h3>StringBuilder クラス</h3>

<ul>
<li>オブジェクトに対して破壊的</li>
<li><code>String</code> オブジェクトは read only</li>
</ul>


<h3>文字列の結合</h3>

<ul>
<li><code>+=</code> と <code>StringBuilder</code> の関係</li>
<li><code>join</code> メソッド</li>
</ul>


<h3>文字列の比較</h3>

<ul>
<li><code>==</code> 演算子じゃなくて <code>equals</code> メソッド

<ul>
<li><code>==</code> 比較は同一のオブジェクトへの参照かどうかの比較</li>
</ul>
</li>
<li>同じ文字列リテラルは同じ <code>String</code> オブジェクト</li>
<li>ただし <code>String</code> と <code>StringBuilder</code> では文字列の内容が同じでも違うオブジェクト

<ul>
<li>そんなときは <code>contentEquals</code> メソッド</li>
</ul>
</li>
<li><code>StringBuilder</code> 同士の文字列の内容比較もできないので、 <code>toString</code> で <code>String</code> に変換してから <code>contentEquals</code> 使うこと</li>
</ul>


<h3>文字列と数値の変換</h3>

<h4>数値から文字列への変換</h4>

<p><code>valueOf</code> メソッド
<code>java
String s = String.valueOf(255);
// s: "255"
</code></p>

<p><code>toString</code> メソッドで10進数以外に直接変換する
<code>java
String s = Integer.toString(255, 16);
// s: "ff"
</code></p>

<h3>文字列から数値への変換</h3>

<p><code>parseInt</code> メソッド
<code>java
int i = Integer.parseInt("255");
// i: 255
</code>
基数を与えて10進数以外の処理
<code>java
int i = Integer.parseint("ff", 16);
// i: 255
</code></p>

<h2>文字</h2>

<ul>
<li>&lsquo;（シングルクォート）で囲んで文字リテラル</li>
<li>Javaの世界ではUTF-16

<ul>
<li>文字を16bitの数値で表す <code>char</code> 型</li>
</ul>
</li>
<li>文字リテラルは <code>char</code> 型の数値</li>
<li><code>String</code> オブジェクトは文字（ <code>char</code> 型）の配列</li>
</ul>


<h2>バイト</h2>

<ul>
<li>歴史的に文字とバイトは同一視されがち</li>
<li>Javaではバイトを文字と区別する</li>
<li>8bit長の <code>byte</code> 型</li>
<li>バイト列は <code>byte</code> 型の配列</li>
</ul>


<h3>バイト列と文字列の変換</h3>

<h4>バイト列から文字列への変換</h4>

<p><code>byte</code> の配列を渡して <code>String</code> オブジェクトを生成
<code>java
byte[] bytes = new byte[]{0x61, 0x62, 0x63};
String s = new String(bytes);
// s: abc
</code></p>

<h4>文字列からバイト列への変換</h4>

<p><code>getBytes</code> メソッドを使う
<code>java
String s = "abc";
byte[] bytes = s.getBytes();
</code></p>

<h2>参照</h2>

<p><a href="http://www.amazon.co.jp/gp/product/4774166855/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774166855&amp;linkCode=as2&amp;tag=sojiro14-22">改訂2版 パーフェクトJava</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android StudioからGAE for Javaアプリケーションをdeployするのに必要なFacet]]></title>
    <link href="http://sojiro14.github.io/blog/2016/07/07/facets-necessary-in-order-to-deploy-from-android-studio-to-gae/"/>
    <updated>2016-07-07T08:27:00+09:00</updated>
    <id>http://sojiro14.github.io/blog/2016/07/07/facets-necessary-in-order-to-deploy-from-android-studio-to-gae</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/okitsutakatomo/items/18cdd3db35185a9b1e99">こちらの記事</a>を参考にGAE for JavaアプリケーションをAndroid Studio + Gradleでセットアップし、サンプルアプリケーションを開発してみました。</p>

<p>早速GAEにdeployしてみようと、メニューバーの <code>Build</code> から <code>Deploy Module to App Engine...</code> を選択してdeployを実行&hellip;ところがタスクが走らずうんともすんとも言わないので調べてみました。</p>

<h2>結論</h2>

<p>以下の設定を <code>app.iml</code> ファイルに追記する</p>

<pre><code class="xml">&lt;facet type="android-gradle" name="Android-Gradle"&gt;
  &lt;configuration&gt;
    &lt;option name="GRADLE_PROJECT_PATH" value=":app" /&gt;
  &lt;/configuration&gt;
&lt;/facet&gt;
&lt;facet type="java-gradle" name="Java-Gradle"&gt;
  &lt;configuration&gt;
     &lt;option name="BUILD_FOLDER_PATH" value="$MODULE_DIR$/build" /&gt;
     &lt;option name="BUILDABLE" value="true" /&gt;
  &lt;/configuration&gt;
&lt;/facet&gt;
</code></pre>

<p><a href="http://qiita.com/okitsutakatomo/items/18cdd3db35185a9b1e99">こちら</a>は少々特殊な方法でmoduleを作成しているのでFacetの設定が不十分となってしまった模様。</p>

<h2>Facetとは</h2>

<p>FacetはIntelliJ IDEAに用意された機能で、使用するフレームワークや言語に合わせたFacetを設定することでIntelliJ IDEAが必要なコンポーネントのダウンロードや各種補完機能の設定などを行ってくれるもの。</p>

<p>Android StudioはIntelliJ IDEAをベースとして開発されたIDEなのでFacetの機能を継承している。</p>

<h2>参照</h2>

<ul>
<li><a href="http://qiita.com/okitsutakatomo/items/18cdd3db35185a9b1e99">GoogleAppEngine for Java を AndroidStudio + Gradleで開発環境を作る</a></li>
<li><a href="https://www.jetbrains.com/help/idea/2016.1/facet.html">Facet</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
