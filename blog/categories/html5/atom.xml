<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Html5 | Sojiro's Blog]]></title>
  <link href="http://sojiro14.github.io/blog/categories/html5/atom.xml" rel="self"/>
  <link href="http://sojiro14.github.io/"/>
  <updated>2015-10-27T14:10:49+09:00</updated>
  <id>http://sojiro14.github.io/</id>
  <author>
    <name><![CDATA[Sojiro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webからデバイスのカメラを起動する]]></title>
    <link href="http://sojiro14.github.io/blog/2015/05/13/start-up-a-web-camera-via-web/"/>
    <updated>2015-05-13T18:58:45+09:00</updated>
    <id>http://sojiro14.github.io/blog/2015/05/13/start-up-a-web-camera-via-web</id>
    <content type="html"><![CDATA[<p>Web からデバイスのカメラを起動してみたいと思いたち、少し調べて見たことのメモ</p>

<h2>準備</h2>

<p>以前のエントリ <a href="http://blog.sojiro.me/blog/2015/01/07/making-a-web-server-with-node-dot-js/">Node.jsを使ってWeb Serverを作ってみました</a> で立てたサーバーで実験してみます</p>

<h2>ベースとなるコード</h2>

<p>このコードに手を入れていきます</p>

<pre><code class="javascript web.js">var http = require('http');
var server = http.createServer();

server.on('request', function(request, response) {
    response.writeHead(200, {'Content-Type': 'text/html'});
    response.write('&lt;title&gt;Hello World&lt;/title&gt;');
    response.end();
});
server.listen(****, 'xxx.xx.x.xxx');
console.log('server listening...');
</code></pre>

<h2>コードの全体像</h2>

<p>最終的なコードはこちら。かなり手抜きしてます</p>

<p><a href="http://python-gazo.blog.jp/html5/javascript/webcamera">こちら</a> を参考にさせていただきました</p>

<pre><code class="javascript web_camera.js">var http = require('http');
var server = http.createServer();
var _html = (function () {/*
&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Web Camera&lt;/title&gt;
  &lt;script type="text/javascript"&gt;
function capCamera(){
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;
    window.URL = window.URL || window.webkitURL;

  var video = document.getElementById("camera");
  var localStream = null;
  navigator.getUserMedia({video: true, audio: false},
  function(stream) {
    console.log(stream);
    video.src = window.URL.createObjectURL(stream);
  },
  function(err) {
    console.log(err);
  }
  );
} 
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;input type="button"  value="Web Camera" onClick="capCamera()"&gt;
   &lt;br&gt;
   &lt;video id="camera" width="640" height="480" autoplay="1" &gt;&lt;/video&gt;

&lt;/body&gt;
&lt;/html&gt;
*/}).toString().replace(/(\n)/g, '').split('*')[1];

server.on('request', function(request, response) {
    response.writeHead(200, {'Content-Type': 'text/html'});
    response.write(_html);
    response.end();
});
server.listen(****, 'xxx.xx.x.xxx');
console.log('server listening...');
</code></pre>

<h2>HTML 部分</h2>

<p>HTML の部分をみてみます</p>

<pre><code class="html">&lt;body&gt;
   &lt;input type="button"  value="Web Camera" onClick="capCamera()"&gt;
   &lt;br&gt;
   &lt;video id="camera" width="640" height="480" autoplay="1" &gt;&lt;/video&gt;
&lt;/body&gt;
</code></pre>

<p>構成はボタンと、カメラからの映像をキャプチャする範囲の2つだけ</p>

<p>ボタンには <code>capCamera()</code> という関数が紐づけられています</p>

<h2>JavaScript 部分</h2>

<p>次に JavaScript の部分をみてみます</p>

<pre><code class="javascript">function capCamera(){
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;
    window.URL = window.URL || window.webkitURL;

  var video = document.getElementById("camera");
  var localStream = null;
  navigator.getUserMedia({video: true, audio: false},
  function(stream) {
    console.log(stream);
    video.src = window.URL.createObjectURL(stream);
  },
  function(err) {
    console.log(err);
  }
  );
} 
</code></pre>

<p>ここで <code>navigator</code> インターフェースの <code>getUserMedia()</code> メソッドを使用しているのがわかります</p>

<h3>getUserMedia の構文</h3>

<pre><code class="javascript">navigator.getUserMedia ( constraints, successCallback, errorCallback );
</code></pre>

<table>
<thead>
<tr>
<th>引数           </th>
<th>必須 / オプショナル            </th>
<th> 説明                                                                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td>constraints    </td>
<td>必須                           </td>
<td> successCallback に渡されるLocalMediaStream オブジェクトがサポートするメディアタイプ。</td>
</tr>
<tr>
<td>successCallback</td>
<td>必須                           </td>
<td> LocalMediaStream オブジェクトが取得できた場合、呼び出されるコールバック関数。        </td>
</tr>
<tr>
<td>errorCallback  </td>
<td>オプショナル (Firefox では必須)</td>
<td> 呼び出しが失敗した際に実行されるコールバック関数。最近の Firefox では必須となっています。省略された場合、 NS_ERROR_XPC_NOT_ENOUGH_ARGS error がスローされます。</td>
</tr>
</tbody>
</table>


<h3>constraints</h3>

<p>video, audio の二つの属性に対して真偽値を指定する</p>

<h3>successcallback</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_API#LocalMediaStream">LocalMediaStream</a> が引数として渡されるので <code>window.URL.createObjectURL()</code> メソッドにそのまま渡してオブジェクトの URL を取得する</p>

<p>このように取得したビデオストリームの URL を <code>video</code> の DOM に渡すことで <code>video</code> 領域にビデオを表示します</p>

<h2>JavaScript 内のヒアドキュメント</h2>

<p>今回は横着して <code>web_camera.js</code> の中に HTML をすべてヒアドキュメントで記述しました JavaScript 内のヒアドキュメントに関してはちょっとしたテクニックがあるようなのでそれはまた次の機会に書こうと思います。</p>

<p>Web からデバイスのカメラを操作できるというのはとても面白いのですが、今回扱ったメソッドはまだまだ一部のブラウザでしかサポートされていないので、特にモバイルで使えるようになったらもっと面白くなるのに、という感想をもってこのエントリを終わります。</p>

<h2>参照</h2>

<ul>
<li><a href="https://developer.mozilla.org/ja/docs/Web/API/Navigator/getUserMedia">Navigator.getUserMedia</a></li>
<li><a href="http://python-gazo.blog.jp/html5/javascript/webcamera">WebRTCでカメラの起動とキャプチャ</a></li>
<li><a href="http://qiita.com/ampersand/items/c6c773ba7ae9115856d0">SafariでもエラーにならないJavascriptのヒアドキュメントの書き方</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
